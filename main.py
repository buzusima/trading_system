#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INTELLIGENT GOLD TRADING SYSTEM - MAIN ENTRY POINT (FIXED)
=========================================================
‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î Gold ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Circular Import ‡πÅ‡∏•‡∏∞ Module Loading

üîß ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
- Circular Import Dependencies
- Import Path ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á  
- Module Loading Order
- Error Handling ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô

üöÄ ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å:
- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Logger ‡πÅ‡∏•‡∏∞ Error Handler
- ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Core Trading System
- ‡πÄ‡∏õ‡∏¥‡∏î GUI ‡∏´‡∏•‡∏±‡∏Å
- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö
"""

import sys
import os
import traceback
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° project root ‡πÄ‡∏Ç‡πâ‡∏≤ sys.path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def setup_basic_logging():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ debug"""
    import logging
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler('trading_system.log', encoding='utf-8')
        ]
    )
    
    return logging.getLogger("IntelligentGoldTrading")

def check_dependencies():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
    required_modules = [
        'tkinter',
        'threading', 
        'datetime',
        'queue',
        'json',
        'sqlite3'
    ]
    
    missing_modules = []
    
    for module_name in required_modules:
        try:
            __import__(module_name)
        except ImportError:
            missing_modules.append(module_name)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MetaTrader5 (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
    try:
        import MetaTrader5 as mt5
        print("‚úÖ MetaTrader5 module ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    except ImportError:
        print("‚ö†Ô∏è MetaTrader5 module ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏•‡∏≠‡∏á")
    
    if missing_modules:
        print(f"‚ùå ‡∏Ç‡∏≤‡∏î modules ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: {missing_modules}")
        return False
    
    return True

def load_config_safe():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        from config.settings import SystemSettings
        settings = SystemSettings()
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö - Mode: {settings.trading_mode}")
        return settings
    except ImportError as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î config.settings: {e}")
        # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        class DefaultSettings:
            trading_mode = "LIVE"
            symbol = "XAUUSD"
            high_frequency_mode = True
        
        return DefaultSettings()

def initialize_logger_safe():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Logger ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        from utilities.professional_logger import setup_main_logger
        logger = setup_main_logger("IntelligentGoldTrading")
        logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Intelligent Gold Trading System")
        return logger
    except ImportError as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î professional logger: {e}")
        return setup_basic_logging()

def initialize_error_handler_safe(logger):
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Error Handler ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        from utilities.error_handler import GlobalErrorHandler
        error_handler = GlobalErrorHandler(logger)
        error_handler.setup_global_exception_handling()
        logger.info("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Global Error Handler")
        return error_handler
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î error handler: {e}")
        return None

def initialize_trading_system_safe(settings, logger):
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Trading System ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        from core_system.trading_system import IntelligentTradingSystem
        trading_system = IntelligentTradingSystem(settings, logger)
        logger.info("üß† ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å")
        return trading_system
    except ImportError as e:
        logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î trading system: {e}")
        traceback.print_exc()
        return None
    except Exception as e:
        logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô trading system: {e}")
        traceback.print_exc()
        return None

def initialize_gui_safe(settings, logger, trading_system):
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô GUI ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        from gui_system.main_window import TradingSystemGUI
        gui = TradingSystemGUI(settings, logger, trading_system)
        logger.info("üñ•Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏î‡∏¥‡πâ‡∏á")
        return gui
    except ImportError as e:
        logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î GUI system: {e}")
        traceback.print_exc()
        return None
    except Exception as e:
        logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô GUI: {e}")
        traceback.print_exc()
        return None

def create_fallback_gui(logger):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á GUI ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"""
    try:
        import tkinter as tk
        from tkinter import messagebox
        
        class FallbackGUI:
            def __init__(self):
                self.root = tk.Tk()
                self.root.title("Intelligent Gold Trading System - Emergency Mode")
                self.root.geometry("600x400")
                self.root.configure(bg='#1a1a2e')
                
                # Title
                title_label = tk.Label(
                    self.root,
                    text="üîß EMERGENCY MODE",
                    font=("Arial", 20, "bold"),
                    fg='#e94560',
                    bg='#1a1a2e'
                )
                title_label.pack(pady=20)
                
                # Status
                status_text = tk.Text(
                    self.root,
                    height=15,
                    width=70,
                    bg='#16213e',
                    fg='#ffffff',
                    font=("Consolas", 10)
                )
                status_text.pack(pady=10)
                
                # ‡∏≠‡πà‡∏≤‡∏ô log file ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á
                try:
                    with open('trading_system.log', 'r', encoding='utf-8') as f:
                        log_content = f.read()
                        status_text.insert(tk.END, log_content)
                except:
                    status_text.insert(tk.END, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô log file ‡πÑ‡∏î‡πâ")
                
                # Button
                close_btn = tk.Button(
                    self.root,
                    text="‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö",
                    command=self.root.quit,
                    bg='#e94560',
                    fg='white',
                    font=("Arial", 12),
                    width=15
                )
                close_btn.pack(pady=10)
            
            def run(self):
                self.root.mainloop()
        
        return FallbackGUI()
        
    except Exception as e:
        logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Fallback GUI: {e}")
        return None

def main():
    """üöÄ Main Entry Point - ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á"""
    print("=" * 60)
    print("üöÄ INTELLIGENT GOLD TRADING SYSTEM")
    print("   Starting up with enhanced error handling...")
    print("=" * 60)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies
    if not check_dependencies():
        input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
        sys.exit(1)
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô basic logging
    basic_logger = setup_basic_logging()
    
    try:
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        print("üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö...")
        settings = load_config_safe()
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Logger
        print("üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Logger...")
        logger = initialize_logger_safe()
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Error Handler
        print("üõ°Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Error Handler...")
        error_handler = initialize_error_handler_safe(logger)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Trading System
        print("üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î...")
        trading_system = initialize_trading_system_safe(settings, logger)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô GUI
        print("üñ•Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô GUI...")
        gui = initialize_gui_safe(settings, logger, trading_system)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°
        if gui is None:
            print("‚ö†Ô∏è GUI ‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ - ‡πÄ‡∏õ‡∏¥‡∏î Emergency Mode")
            gui = create_fallback_gui(logger)
        
        if gui is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô GUI ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
            input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
            return
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡πÄ‡∏õ‡∏¥‡∏î GUI...")
        print("=" * 60)
        
        # Start the application
        gui.run()
        
    except KeyboardInterrupt:
        print("\nüõë ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (Ctrl+C)")
    except ImportError as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•: {e}")
        print("üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡πÅ‡∏•‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå")
        traceback.print_exc()
        input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
    except Exception as e:
        print(f"üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {e}")
        print("üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:")
        traceback.print_exc()
        input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
    finally:
        print("üõë ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö Intelligent Gold Trading System")
        print("=" * 60)

def test_imports():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import modules ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import modules...")
    
    modules_to_test = [
        'config.settings',
        'config.trading_params', 
        'utilities.professional_logger',
        'utilities.error_handler',
        'adaptive_entries.signal_generator',
        'market_intelligence.market_analyzer',
        'intelligent_recovery.recovery_engine'
    ]
    
    for module_name in modules_to_test:
        try:
            __import__(module_name)
            print(f"‚úÖ {module_name}")
        except ImportError as e:
            print(f"‚ùå {module_name}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è {module_name}: {e}")
    
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö imports ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

if __name__ == "__main__":
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö imports ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    if len(sys.argv) > 1 and sys.argv[1] == "--test-imports":
        test_imports()
    else:
        main()
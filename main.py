#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INTELLIGENT GOLD TRADING SYSTEM - MAIN ENTRY POINT (REAL ONLY)
==============================================================
‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î Gold ‡πÅ‡∏ö‡∏ö Live Trading ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
‡∏•‡∏ö Mock ‡πÅ‡∏•‡∏∞ Simulation ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÉ‡∏ä‡πâ MT5 ‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

üö® ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
- Live Trading ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ Demo/Simulation
- ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ MT5 ‡πÅ‡∏•‡∏∞ Live Account
- ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
- ‡πÑ‡∏°‡πà‡∏°‡∏µ Mock Components ‡πÉ‡∏î‡πÜ

üéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MT5 Connection
2. ‡πÇ‡∏´‡∏•‡∏î Real Components ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
3. ‡πÄ‡∏£‡∏¥‡πà‡∏° Live Trading System
4. ‡πÄ‡∏õ‡∏¥‡∏î GUI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
"""

import sys
import os
import traceback
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° project root ‡πÄ‡∏Ç‡πâ‡∏≤ sys.path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def check_mt5_requirements():
   """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á MT5 ‡πÅ‡∏•‡∏∞‡∏´‡∏≤ Gold Symbol ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
   print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MT5 Requirements ‡πÅ‡∏•‡∏∞ Gold Symbols...")
   
   try:
       import MetaTrader5 as mt5
       print("‚úÖ MetaTrader5 module ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
       
       # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
       if not mt5.initialize():
           print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ")
           print("üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
           print("   - MT5 ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
           print("   - Login ‡πÄ‡∏Ç‡πâ‡∏≤ Account ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
           print("   - Account ‡πÄ‡∏õ‡πá‡∏ô Live Account ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
           return False
       
       # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö account info
       account_info = mt5.account_info()
       if not account_info:
           print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Account ‡πÑ‡∏î‡πâ")
           mt5.shutdown()
           return False
       
       # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö trading permission
       if not account_info.trade_allowed:
           print("‚ùå Account ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡∏£‡∏î")
           mt5.shutdown()
           return False
       
       # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• account
       print(f"‚úÖ Account Connected: {account_info.login}")
       print(f"üìä Server: {account_info.server}")
       print(f"üí∞ Balance: {account_info.balance:.2f} {account_info.currency}")
       print(f"üí∞ Equity: {account_info.equity:.2f}")
       print(f"‚úÖ Trade Allowed: {account_info.trade_allowed}")
       
       # ===== AUTO-DETECT GOLD SYMBOL =====
       print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤ Gold Symbol ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...")
       
       try:
           from mt5_integration.gold_symbol_detector import GoldSymbolDetector
           
           # ‡∏™‡∏£‡πâ‡∏≤‡∏á detector
           detector = GoldSymbolDetector()
           
           # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ gold symbols
           if detector.detect_gold_symbols():
               print(f"üéØ ‡∏û‡∏ö Gold Symbols: {len(detector.found_symbols)} symbols")
               
               # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ symbols ‡∏ó‡∏µ‡πà‡∏û‡∏ö
               print("\nüìã Gold Symbols ‡∏ó‡∏µ‡πà‡∏û‡∏ö:")
               for i, gold_info in enumerate(detector.found_symbols[:5], 1):  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                   status = "‚úÖ" if gold_info.is_tradable else "‚ùå"
                   print(f"   {i}. {gold_info.symbol:<12} - Spread: {gold_info.spread_points:<6.1f} - Quality: {gold_info.quality.value} {status}")
               
               # ‡πÅ‡∏™‡∏î‡∏á symbol ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
               if detector.best_symbol:
                   print(f"\nüèÜ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ: {detector.best_symbol.symbol}")
                   print(f"üí∞ Spread: {detector.best_symbol.spread_points:.1f} points")
                   print(f"üìä Quality: {detector.best_symbol.quality.value}")
                   print(f"üìà ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {detector.best_symbol.current_bid:.2f} / {detector.best_symbol.current_ask:.2f}")
                   
                   # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                   verification = detector.verify_symbol_trading(detector.best_symbol.symbol)
                   if verification['available']:
                       print("‚úÖ Symbol ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á")
                   else:
                       print(f"‚ùå Symbol ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ó‡∏£‡∏î: {verification['error']}")
                       return False
               else:
                   print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Gold Symbol ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
                   return False
           else:
               print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbols ‡πÑ‡∏î‡πâ")
               return False
               
       except Exception as e:
           print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ Gold Symbol Detector: {e}")
           print("üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö XAUUSD ‡πÅ‡∏ö‡∏ö manual...")
           
           # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö XAUUSD ‡πÅ‡∏ö‡∏ö manual
           symbol_info = mt5.symbol_info("XAUUSD.v")
           if not symbol_info:
               print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Symbol XAUUSD")
               
               # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ GOLD
               symbol_info = mt5.symbol_info("GOLD")
               if symbol_info:
                   print("‚úÖ ‡∏û‡∏ö Symbol GOLD")
               else:
                   print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Symbol GOLD")
                   mt5.shutdown()
                   return False
           else:
               print("‚úÖ ‡∏û‡∏ö Symbol XAUUSD")
           
           if not symbol_info.visible:
               symbol_name = symbol_info.name
               if not mt5.symbol_select(symbol_name, True):
                   print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Symbol {symbol_name}")
                   mt5.shutdown()
                   return False
           
           # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö market status
           tick = mt5.symbol_info_tick(symbol_info.name)
           if tick:
               print(f"üìà {symbol_info.name} Price: {tick.bid:.2f} / {tick.ask:.2f}")
               print(f"üìä Spread: {(tick.ask - tick.bid):.2f}")
           else:
               print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ {symbol_info.name}")
               mt5.shutdown()
               return False
       
       mt5.shutdown()
       return True
       
   except ImportError:
       print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö MetaTrader5 module")
       print("üìã ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏î‡∏¢: pip install MetaTrader5")
       return False
   except Exception as e:
       print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô MT5: {e}")
       return False

def check_system_dependencies():
   """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
   print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö System Dependencies...")
   
   required_modules = [
       'threading',
       'datetime', 
       'json',
       'queue',
       'tkinter',
       'pandas',
       'numpy'
   ]
   
   missing_modules = []
   
   for module_name in required_modules:
       try:
           __import__(module_name)
           print(f"‚úÖ {module_name}")
       except ImportError:
           missing_modules.append(module_name)
           print(f"‚ùå {module_name}")
   
   if missing_modules:
       print(f"\n‚ùå ‡∏Ç‡∏≤‡∏î modules: {missing_modules}")
       print("üìã ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏î‡∏¢: pip install pandas numpy")
       return False
   
   return True

def load_real_trading_system():
   """‡πÇ‡∏´‡∏•‡∏î Real Trading System ‡∏û‡∏£‡πâ‡∏≠‡∏° Auto Gold Symbol"""
   print("\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î Real Trading System...")
   
   try:
       # Import core system
       from core_system.trading_system import get_real_trading_system
       
       # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gold Symbol ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
       from config.trading_params import get_current_gold_symbol
       current_symbol = get_current_gold_symbol()
       print(f"üéØ Gold Symbol ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {current_symbol}")
       
       # ‡∏™‡∏£‡πâ‡∏≤‡∏á trading system
       trading_system = get_real_trading_system()
       print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Real Trading System ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
       
       # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
       if not trading_system.initialize_system():
           print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ")
           return None
       
       print("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
       print(f"üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ó‡∏£‡∏î {current_symbol}")
       return trading_system
       
   except Exception as e:
       print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Trading System: {e}")
       traceback.print_exc()
       return None

def load_gui_system(trading_system):
   """‡πÇ‡∏´‡∏•‡∏î GUI System"""
   print("\nüñ•Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î GUI System...")
   
   try:
       # Import GUI
       from gui_system.main_window import create_main_window
       
       # ‡∏™‡∏£‡πâ‡∏≤‡∏á main window
       main_window = create_main_window(trading_system)
       print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
       
       return main_window
       
   except Exception as e:
       print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î GUI: {e}")
       print("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Console ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
       return None

def console_interface(trading_system):
   """Interface ‡πÅ‡∏ö‡∏ö Console ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö"""
   # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• symbol ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   from config.trading_params import get_current_gold_symbol, get_trading_parameters
   
   print("\n" + "=" * 60)
   print("üéØ INTELLIGENT GOLD TRADING SYSTEM - CONSOLE MODE")
   print("=" * 60)
   print("‚ö†Ô∏è LIVE TRADING MODE - ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á")
   
   # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Symbol
   current_symbol = get_current_gold_symbol()
   params = get_trading_parameters()
   symbol_info = params.get_symbol_info()
   
   print(f"ü•á Trading Symbol: {current_symbol}")
   print(f"üîç Auto-detect: {'‡πÄ‡∏õ‡∏¥‡∏î' if symbol_info['auto_detect_enabled'] else '‡∏õ‡∏¥‡∏î'}")
   print(f"‚úÖ Verified: {'‡πÉ‡∏ä‡πà' if symbol_info['symbol_verified'] else '‡πÑ‡∏°‡πà'}")
   
   print("\nüìã Commands:")
   print("   start    - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
   print("   stop     - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î") 
   print("   status   - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
   print("   stats    - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
   print("   symbol   - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Symbol")
   print("   detect   - ‡∏´‡∏≤ Gold Symbol ‡πÉ‡∏´‡∏°‡πà")
   print("   set <symbol> - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Symbol (‡πÄ‡∏ä‡πà‡∏ô: set GOLD)")
   print("   quit     - ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö")
   print("=" * 60)
   
   while True:
       try:
           command_input = input(f"\nüéØ Command [{current_symbol}]: ").strip()
           command_parts = command_input.split()
           command = command_parts[0].lower() if command_parts else ""
           
           if command == "start":
               print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î...")
               if trading_system.start_trading():
                   print(f"‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î {current_symbol} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                   print("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏î‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á!")
               else:
                   print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ")
           
           elif command == "stop":
               print("‚èπÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î...")
               if trading_system.stop_trading():
                   print("‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
               else:
                   print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ")
           
           elif command == "status":
               status = trading_system.get_system_status()
               print(f"\nüìä System Status: {status.get('system_state', 'UNKNOWN')}")
               print(f"üîÑ Trading Active: {status.get('trading_active', False)}")
               print(f"‚è±Ô∏è Uptime: {status.get('uptime', 0):.0f} seconds")
               print(f"üîå MT5 Connected: {status.get('mt5_connected', False)}")
               
               account_info = status.get('account_info', {})
               print(f"üí∞ Balance: {account_info.get('balance', 0):.2f}")
               print(f"üí∞ Equity: {account_info.get('equity', 0):.2f}")
               print(f"üìç Positions: {status.get('position_count', 0)}")
               print(f"üéØ Trading Symbol: {current_symbol}")
           
           elif command == "stats":
               stats = trading_system.get_trading_statistics()
               print(f"\nüìà Trading Statistics for {current_symbol}:")
               
               if 'signals' in stats:
                   signals = stats['signals']
                   print(f"üéØ Total Signals: {signals.get('total_signals', 0)}")
                   print(f"‚úÖ Executed: {signals.get('signals_executed', 0)}")
                   print(f"‚ùå Rejected: {signals.get('signals_rejected', 0)}")
                   print(f"üìä Success Rate: {signals.get('success_rate', 0):.2%}")
               
               if 'executions' in stats:
                   executions = stats['executions']
                   print(f"‚ö° Total Orders: {executions.get('total_orders', 0)}")
                   print(f"üìä Volume Traded: {executions.get('total_volume', 0):.2f}")
           
           elif command == "symbol":
               # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• symbol ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
               symbol_info = params.get_symbol_info()
               print(f"\nü•á Symbol Information:")
               print(f"üéØ Primary Symbol: {symbol_info['primary_symbol']}")
               print(f"üîç Auto-detect Enabled: {symbol_info['auto_detect_enabled']}")
               print(f"‚úÖ Symbol Verified: {symbol_info['symbol_verified']}")
               print(f"‚è∞ Last Detection: {symbol_info['last_detection_time']}")
               print(f"üìù Notes: {symbol_info['detection_notes']}")
               
               # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö symbol ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô MT5
               try:
                   import MetaTrader5 as mt5
                   if mt5.initialize():
                       symbol_mt5 = mt5.symbol_info(current_symbol)
                       if symbol_mt5:
                           tick = mt5.symbol_info_tick(current_symbol)
                           if tick:
                               print(f"üìà Current Price: {tick.bid:.2f} / {tick.ask:.2f}")
                               print(f"üìä Spread: {(tick.ask - tick.bid):.2f}")
                       mt5.shutdown()
               except Exception as e:
                   print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• live: {e}")
           
           elif command == "detect":
               print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤ Gold Symbol ‡πÉ‡∏´‡∏°‡πà...")
               from config.trading_params import force_symbol_detection
               new_symbol = force_symbol_detection()
               if new_symbol:
                   current_symbol = new_symbol
                   print(f"‚úÖ ‡∏û‡∏ö Symbol ‡πÉ‡∏´‡∏°‡πà: {new_symbol}")
               else:
                   print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Symbol ‡πÉ‡∏´‡∏°‡πà")
           
           elif command == "set" and len(command_parts) >= 2:
               new_symbol = command_parts[1].upper()
               print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Symbol: {new_symbol}")
               if params.set_symbol(new_symbol, verify=True):
                   current_symbol = new_symbol
                   print(f"‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Symbol ‡πÄ‡∏õ‡πá‡∏ô: {new_symbol}")
               else:
                   print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ Symbol: {new_symbol}")
           
           elif command == "quit":
               print("üëã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö...")
               if trading_system.trading_active:
                   print("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å...")
                   trading_system.stop_trading()
               print("‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
               break
           
           elif command == "help":
               print("üìã Available Commands:")
               print("   start        - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
               print("   stop         - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î") 
               print("   status       - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
               print("   stats        - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
               print("   symbol       - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Symbol")
               print("   detect       - ‡∏´‡∏≤ Gold Symbol ‡πÉ‡∏´‡∏°‡πà")
               print("   set <symbol> - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Symbol")
               print("   quit         - ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö")
           
           else:
               print("‚ùå Command ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÉ‡∏ä‡πâ 'help' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π commands)")
               
       except KeyboardInterrupt:
           print("\n\nüëã Ctrl+C ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö...")
           if trading_system.trading_active:
               trading_system.stop_trading()
           break
       except Exception as e:
           print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

def show_startup_warning():
   """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö"""
   print("\n" + "üö®" * 20)
   print("‚ö†Ô∏è  LIVE GOLD TRADING SYSTEM WARNING  ‚ö†Ô∏è")
   print("üö®" * 20)
   print("‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏≠‡∏á (Gold) ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô MT5 Live Account")
   print("‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏´‡∏≤‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ó‡∏≠‡∏á (XAUUSD, GOLD, etc.) ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå")
   print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏´‡∏°‡∏î Demo ‡∏´‡∏£‡∏∑‡∏≠ Simulation")
   print("‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á - ‡∏≠‡∏≤‡∏à‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô")
   print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á")
   print("üö®" * 20)
   
   response = input("\n‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö Live Gold Trading? (yes/no): ")
   if response.lower() not in ['yes', 'y', '‡πÉ‡∏ä‡πà']:
       print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö")
       return False
   
   return True

def main():
   """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
   print("üöÄ INTELLIGENT GOLD TRADING SYSTEM")
   print("üéØ Live Trading Mode Only")
   print("=" * 50)
   
   try:
       # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
       if not show_startup_warning():
           return
       
       # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö system dependencies
       if not check_system_dependencies():
           print("\n‚ùå System dependencies ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö")
           return
       
       # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MT5 (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
       if not check_mt5_requirements():
           print("\n‚ùå MT5 requirements ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö")
           print("üìã ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤:")
           print("   1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MetaTrader 5")
           print("   2. ‡πÄ‡∏õ‡∏¥‡∏î MT5 ‡πÅ‡∏•‡∏∞ Login ‡πÄ‡∏Ç‡πâ‡∏≤ Live Account")
           print("   3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Account ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡∏£‡∏î")
           return
       
       # ‡πÇ‡∏´‡∏•‡∏î Real Trading System
       trading_system = load_real_trading_system()
       if not trading_system:
           print("\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Trading System ‡πÑ‡∏î‡πâ")
           return
       
       # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î GUI
       main_window = load_gui_system(trading_system)
       
       if main_window:
           # ‡πÄ‡∏£‡∏¥‡πà‡∏° GUI Mode
           print("\nüñ•Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏° GUI Mode...")
           print("‚ö†Ô∏è ‡∏õ‡∏¥‡∏î GUI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö")
           
           try:
               main_window.mainloop()
           except KeyboardInterrupt:
               print("\nüëã Keyboard interrupt - ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö")
           finally:
               if trading_system.trading_active:
                   trading_system.stop_trading()
       else:
           # ‡πÄ‡∏£‡∏¥‡πà‡∏° Console Mode
           print("\nüíª ‡πÄ‡∏£‡∏¥‡πà‡∏° Console Mode...")
           console_interface(trading_system)
       
       print("\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
       
   except Exception as e:
       print(f"\n‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {e}")
       traceback.print_exc()
       
   finally:
       # Cleanup
       try:
           import MetaTrader5 as mt5
           mt5.shutdown()
           print("üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5")
       except:
           pass

if __name__ == "__main__":
   main()
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INTELLIGENT GOLD TRADING SYSTEM - MAIN ENTRY POINT
=================================================
‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î Gold ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Entry Point ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (< 50 lines ‡∏ï‡∏≤‡∏° requirement)

‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á:
- config/settings.py (‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö)
- gui_system/main_window.py (‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å)
- utilities/professional_logger.py (‡∏£‡∏∞‡∏ö‡∏ö logging)
- utilities/error_handler.py (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)
- position_management/ (‡∏£‡∏∞‡∏ö‡∏ö Profit ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
- adaptive_entries/ (Signal Generator)
- mt5_integration/ (Order Executor)
"""

import sys
import os
import threading
import time
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô sys.path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

try:
    # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å
    from config.settings import SystemSettings
    from utilities.professional_logger import setup_main_logger
    from utilities.error_handler import GlobalErrorHandler
    from gui_system.main_window import TradingSystemGUI
    
    # üîó ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Profit ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    from position_management.position_tracker import get_position_tracker
    from position_management.profit_optimizer import get_profit_taker
    
    # üéØ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Signal ‡πÅ‡∏•‡∏∞ Order
    from adaptive_entries.signal_generator import get_signal_generator
    from mt5_integration.order_executor import get_smart_order_executor, OrderType
    

    def intelligent_position_manager(signal_generator, order_executor, position_tracker, logger):
        """
        üß† Intelligent Position Manager - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Position ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
        """
        logger.info("üß† Intelligent Position Manager ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
        current_cycle = "ANALYSIS"  # ANALYSIS, MONITORING, RECOVERY
        last_analysis_time = 0
        analysis_cooldown = 120  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏¥‡∏î‡∏Ñ‡∏£‡∏ö)
        signal_generator_running = False  # ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        last_order_attempt = 0  # ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡πà‡∏≠‡∏¢
        order_cooldown = 30  # ‚ú® ‡∏´‡πâ‡∏≤‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        while True:
            try:
                # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏î" ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if not getattr(signal_generator, 'trading_started', False):
                    logger.debug("‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏î' ‡∏Å‡πà‡∏≠‡∏ô...")
                    time.sleep(5)
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö positions ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                current_positions = order_executor.get_open_positions("XAUUSD")
                total_positions = len(current_positions)
                current_time = time.time()
                
                # üìä ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                if current_time % 30 < 10:  # ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    logger.debug(f"üìä Positions: {total_positions} | Cycle: {current_cycle} | "
                                f"Signal Generator: {'Running' if signal_generator_running else 'Stopped'}")
                
                if total_positions == 0:
                    # üéØ ‡πÑ‡∏°‡πà‡∏°‡∏µ positions ‚Üí ‡πÇ‡∏´‡∏°‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                    if current_cycle != "ANALYSIS":
                        logger.info("üìä Positions: 0 ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î ANALYSIS")
                        current_cycle = "ANALYSIS"
                    
                    # üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Signal Generator ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ positions
                    if not signal_generator_running:
                        try:
                            # ‚ú® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
                            status = signal_generator.get_system_status()
                            if not status.get('generator_active', False):
                                success = signal_generator.start_signal_generation()
                                signal_generator_running = success
                                if success:
                                    logger.info("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Signal Generator ‡πÉ‡∏´‡∏°‡πà - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                                else:
                                    logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Signal Generator")
                            else:
                                signal_generator_running = True
                                logger.debug("‚úÖ Signal Generator ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Signal Generator: {e}")
                            signal_generator_running = False
                    
                    # ‚ú® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö order cooldown
                    if current_time - last_order_attempt < order_cooldown:
                        remaining = order_cooldown - (current_time - last_order_attempt)
                        logger.debug(f"‚è∞ ‡∏£‡∏≠‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏µ‡∏Å {remaining:.0f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                        time.sleep(10)
                        continue
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö analysis cooldown  
                    if current_time - last_analysis_time >= analysis_cooldown:
                        logger.info("üîç ‡πÑ‡∏°‡πà‡∏°‡∏µ positions ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà")
                        
                        # ‡∏£‡∏±‡∏ö signal ‡∏à‡∏≤‡∏Å Signal Generator
                        if signal_generator_running:
                            signal = signal_generator.get_next_signal()
                            
                            if signal:
                                logger.info(f"üì® Signal ‡πÉ‡∏´‡∏°‡πà: {signal.signal_id} | {signal.direction.value} | "
                                        f"Price: {signal.current_price:.2f} | Confidence: {signal.confidence:.2f}")
                                
                                # ‡πÅ‡∏õ‡∏•‡∏á Signal ‡πÄ‡∏õ‡πá‡∏ô Order
                                if signal.direction.value == "BUY":
                                    order_type = OrderType.BUY
                                elif signal.direction.value == "SELL":
                                    order_type = OrderType.SELL
                                else:
                                    logger.warning(f"‚ö†Ô∏è Invalid signal direction: {signal.direction.value}")
                                    time.sleep(10)
                                    continue
                                
                                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î volume (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0.01)
                                volume = 0.01
                                
                                # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                                logger.info(f"üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: {order_type.value} {volume} lots")
                                result = order_executor.send_market_order(
                                    symbol="XAUUSD.v",
                                    order_type=order_type,
                                    volume=volume,
                                    comment=f"Smart_{signal.signal_id[:8]}",
                                    strategy_name=signal.source_engine.value,
                                    recovery_level=0
                                )
                                
                                # ‚ú® ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                                last_order_attempt = current_time
                                
                                if result.status.value == "FILLED":
                                    last_analysis_time = current_time
                                    current_cycle = "MONITORING"
                                    
                                    # üõë ‡∏´‡∏¢‡∏∏‡∏î Signal Generator ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                                    if signal_generator_running:
                                        try:
                                            success = signal_generator.stop_signal_generation()
                                            signal_generator_running = not success
                                            logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î Signal Generator - ‡∏£‡∏≠‡πÉ‡∏´‡πâ position ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô")
                                            
                                            # ‚ú® ‡∏•‡πâ‡∏≤‡∏á signals ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô queue
                                            try:
                                                while True:
                                                    remaining_signal = signal_generator.get_next_signal()
                                                    if remaining_signal is None:
                                                        break
                                                    logger.debug(f"üóëÔ∏è ‡∏•‡∏ö signal ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {remaining_signal.signal_id}")
                                            except:
                                                pass
                                                
                                        except Exception as e:
                                            logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î Signal Generator: {e}")
                                    
                                    logger.info(f"‚úÖ Position ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {order_type.value} {volume} lots | "
                                            f"Price: {result.price_executed:.2f}")
                                    logger.info("üëÅÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î MONITORING - ‡∏£‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
                                else:
                                    logger.error(f"‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á Position ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.error_description}")
                            else:
                                logger.debug("‚è≥ ‡πÑ‡∏°‡πà‡∏°‡∏µ signals ‡πÉ‡∏´‡∏°‡πà")
                        else:
                            logger.debug("‚è≥ ‡∏£‡∏≠ Signal Generator ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")
                            
                    else:
                        # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤ cooldown
                        remaining_time = analysis_cooldown - (current_time - last_analysis_time)
                        if remaining_time > 60:  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ
                            logger.debug(f"‚è∞ ‡∏£‡∏≠ analysis cooldown ‡∏≠‡∏µ‡∏Å {remaining_time:.0f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                
                else:
                    # üëÅÔ∏è ‡∏°‡∏µ positions ‚Üí ‡πÇ‡∏´‡∏°‡∏î MONITORING/RECOVERY
                    if current_cycle == "ANALYSIS":
                        logger.info(f"üìä Positions: {total_positions} ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î MONITORING")
                        current_cycle = "MONITORING"
                    
                    # ‚ú® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î Signal Generator ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
                    if signal_generator_running:
                        try:
                            success = signal_generator.stop_signal_generation()
                            signal_generator_running = not success
                            logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î Signal Generator - ‡∏°‡∏µ positions ‡∏≠‡∏¢‡∏π‡πà")
                            
                            # ‚ú® ‡∏•‡πâ‡∏≤‡∏á signals ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô queue
                            try:
                                signals_cleared = 0
                                while True:
                                    remaining_signal = signal_generator.get_next_signal()
                                    if remaining_signal is None:
                                        break
                                    signals_cleared += 1
                                if signals_cleared > 0:
                                    logger.info(f"üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á {signals_cleared} signals ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
                            except:
                                pass
                                
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î Signal Generator: {e}")
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°
                    total_profit = sum(pos.get('profit', 0) for pos in current_positions)
                    profitable_positions = len([pos for pos in current_positions if pos.get('profit', 0) > 0])
                    losing_positions = len([pos for pos in current_positions if pos.get('profit', 0) < 0])
                    
                    if current_time % 30 < 10:  # ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                        logger.info(f"üí∞ P&L: ${total_profit:.2f} | ‡∏Å‡∏≥‡πÑ‡∏£: {profitable_positions} | ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: {losing_positions}")
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ Recovery ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if total_profit < -5:  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô $50
                        if current_cycle != "RECOVERY":
                            logger.warning(f"üö® ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô $50 (${total_profit:.2f}) ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î RECOVERY")
                            current_cycle = "RECOVERY"
                            # TODO: ‡πÄ‡∏£‡∏¥‡πà‡∏° Recovery System
                    elif total_profit > 2:  # ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏Å‡∏¥‡∏ô $10
                        if current_cycle != "MONITORING":
                            logger.info(f"üíö ‡∏Å‡∏≥‡πÑ‡∏£ ${total_profit:.2f} ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î MONITORING")
                            current_cycle = "MONITORING"
                    
                    # ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ Profit System ‡πÅ‡∏•‡∏∞ Recovery System ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
                    logger.debug("üëÅÔ∏è ‡πÇ‡∏´‡∏°‡∏î MONITORING - ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£")
                
                # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                time.sleep(10)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                
            except Exception as e:
                logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Position Manager: {e}")
                time.sleep(30)  # ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error
            
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î Position Manager ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
                break
        
        # ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö
        try:
            if signal_generator_running:
                stop_success = signal_generator.stop_signal_generation()
                if stop_success:
                    signal_generator_running = False
                    logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î Signal Generator ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    logger.error("‚ùå ‡∏´‡∏¢‡∏∏‡∏î Signal Generator ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Force stop")
                    # Force ‡∏´‡∏¢‡∏∏‡∏î
                    signal_generator.generator_active = False
                    signal_generator.is_ready = False
                    signal_generator_running = False
                    logger.info("üõë Force stop Signal Generator ‡πÄ‡∏™‡∏£‡πá‡∏à")
            else:
                logger.info("‚úÖ Signal Generator ‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            logger.error(f"‚ùå Error stopping Signal Generator: {e}")
            # Force ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error
            try:
                signal_generator.generator_active = False
                signal_generator.is_ready = False
                signal_generator_running = False
                logger.info("üõë Emergency force stop Signal Generator")
            except:
                pass

        logger.info("‚úÖ Intelligent Position Manager ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

    def main():
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logger ‡∏´‡∏•‡∏±‡∏Å
        - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Error Handler
        - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö Profit
        - ‡πÄ‡∏£‡∏¥‡πà‡∏° Intelligent Position Manager
        - ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á GUI ‡∏´‡∏•‡∏±‡∏Å
        """
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logger ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        logger = setup_main_logger("IntelligentGoldTrading")
        logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Intelligent Gold Trading System")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Global Error Handler
        error_handler = GlobalErrorHandler(logger)
        error_handler.setup_global_exception_handling()
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        settings = SystemSettings()
        logger.info(f"üìã ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Mode: {settings.trading_mode}")
        
        # üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö Profit
        logger.info("üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö Profit...")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Position Tracker
        position_tracker = get_position_tracker()
        logger.info("‚úÖ Position Tracker ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Profit Optimizer
        profit_optimizer = get_profit_taker()
        profit_optimizer.start_profit_taking()
        logger.info("‚úÖ Profit Optimizer ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        
        # üß† ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö Intelligent Position Manager
        logger.info("üß† ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Intelligent Position Manager...")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Signal Generator (‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á signals)
        signal_generator = get_signal_generator()
        # signal_generator.start_signal_generation()  # ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô - ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô Position Manager
        logger.info("‚úÖ Signal Generator ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á signals)")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Order Executor
        order_executor = get_smart_order_executor()
        logger.info("‚úÖ Order Executor ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° Intelligent Position Manager Thread
        manager_thread = threading.Thread(
            target=intelligent_position_manager,
            args=(signal_generator, order_executor, position_tracker, logger),
            daemon=True,
            name="IntelligentPositionManager"
        )
        manager_thread.start()
        logger.info("üß† Intelligent Position Manager ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß!")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô GUI ‡∏´‡∏•‡∏±‡∏Å
        app = TradingSystemGUI(settings, logger)
        logger.info("üñ•Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏î‡∏¥‡πâ‡∏á")
        
        # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        app.run()
        
        # ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        logger.info("üõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
        signal_generator.stop_signal_generation()
        profit_optimizer.stop_profit_taking()
        position_tracker.stop_tracking()
        logger.info("üõë ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö Intelligent Gold Trading System")

    if __name__ == "__main__":
        main()

except ImportError as e:
    print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•: {e}")
    print("üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡πÅ‡∏•‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå")
    print("üìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:")
    print("   - position_management/position_tracker.py")
    print("   - position_management/profit_optimizer.py")
    print("   - adaptive_entries/signal_generator.py")
    print("   - mt5_integration/order_executor.py")
    sys.exit(1)
except Exception as e:
    print(f"üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {e}")
    sys.exit(1)
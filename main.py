#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INTELLIGENT GOLD TRADING SYSTEM - MAIN ENTRY POINT with GUI
==========================================================
‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏≠‡∏á‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏° GUI Interface
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ XAUUSD Symbol Loading Error ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î GUI
"""

import sys
import os
import time
import threading
from datetime import datetime
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö imports
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

# Core imports
try:
    import MetaTrader5 as mt5
    MT5_AVAILABLE = True
except ImportError:
    MT5_AVAILABLE = False
    print("‚ö†Ô∏è MetaTrader5 module ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

# GUI imports
try:
    import tkinter as tk
    from gui_system.main_window import TradingSystemGUI
    GUI_AVAILABLE = True
except ImportError:
    GUI_AVAILABLE = False
    print("‚ö†Ô∏è GUI system ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

# System imports
try:
    from market_intelligence.market_analyzer import MarketAnalyzer
    from adaptive_entries.strategy_selector import StrategySelector
    from intelligent_recovery.recovery_selector import RecoverySelector
    COMPONENTS_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è ‡∏ö‡∏≤‡∏á Components ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°: {e}")
    COMPONENTS_AVAILABLE = False

class IntelligentTradingSystem:
    """‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏≠‡∏á‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏´‡∏•‡∏±‡∏Å"""
    
    def __init__(self):
        self.symbol = None
        self.components = {}
        self.gui = None
        self.is_running = False
        
    def initialize_system(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
        print("üöÄ INTELLIGENT GOLD TRADING SYSTEM v2.0")
        print("=" * 50)
        
        # 1. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
        if not self._connect_mt5():
            return False
        
        # 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbol
        symbol = self._detect_gold_symbol()
        if not symbol:
            return False
        
        self.symbol = symbol
        
        # 3. ‡πÇ‡∏´‡∏•‡∏î Components
        if COMPONENTS_AVAILABLE:
            self._load_components()
        
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    
    def _connect_mt5(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
        if not MT5_AVAILABLE:
            print("‚ùå MetaTrader5 module ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return False
        
        if not mt5.initialize():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ")
            return False
        
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        account_info = mt5.account_info()
        if account_info:
            print(f"üìä ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {account_info.login}")
            print(f"üí∞ Balance: ${account_info.balance:,.2f}")
            print(f"üè¶ ‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå: {account_info.company}")
        
        return True
    
    def _detect_gold_symbol(self):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbol"""
        print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbol...")
        
        gold_symbols = [
            "XAUUSD", "XAUUSD.v", "XAUUSD.a", "XAUUSD.c", "XAUUSD.e",
            "XAUUSD.m", "GOLD", "GOLDUSD", "GOLD.USD", "XAU.USD"
        ]
        
        for symbol in gold_symbols:
            try:
                symbol_info = mt5.symbol_info(symbol)
                if symbol_info:
                    # Enable symbol ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà visible
                    if not symbol_info.visible:
                        mt5.symbol_select(symbol, True)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
                    tick = mt5.symbol_info_tick(symbol)
                    if tick and tick.bid > 0:
                        print(f"üéØ ‡∏û‡∏ö Symbol: {symbol}")
                        print(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {tick.bid:.2f} / {tick.ask:.2f}")
                        return symbol
            except:
                continue
        
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Gold Symbol")
        return None
    
    def _load_components(self):
        """‡πÇ‡∏´‡∏•‡∏î Components"""
        print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î Components...")
        
        try:
            # Market Analyzer
            self.components['market_analyzer'] = MarketAnalyzer(self.symbol)
            print("‚úÖ Market Analyzer ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # Strategy Selector
            self.components['strategy_selector'] = StrategySelector(self.symbol)
            print("‚úÖ Strategy Selector ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # Recovery Selector
            self.components['recovery_selector'] = RecoverySelector(self.symbol)
            print("‚úÖ Recovery Selector ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Components: {e}")
    
    def start_gui(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° GUI Interface"""
        if not GUI_AVAILABLE:
            print("‚ùå GUI System ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return False
        
        try:
            print("üñ•Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î GUI Interface...")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI
            self.gui = TradingSystemGUI(
                trading_system=self,
                symbol=self.symbol,
                components=self.components
            )
            
            print("‚úÖ GUI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            print("üí° ‡πÉ‡∏ä‡πâ GUI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î")
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° GUI mainloop
            self.gui.root.mainloop()
            
            return True
            
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô GUI: {e}")
            return False
    
    def start_console_mode(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î Console"""
        print("üíª ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î Console...")
        print("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°", self.symbol)
        
        try:
            for i in range(20):  # ‡∏£‡∏±‡∏ô 20 ‡∏£‡∏≠‡∏ö
                if self.symbol and MT5_AVAILABLE:
                    tick = mt5.symbol_info_tick(self.symbol)
                    if tick:
                        time_str = datetime.now().strftime('%H:%M:%S')
                        print(f"üí∞ {time_str} | {self.symbol}: {tick.bid:.2f}/{tick.ask:.2f}")
                
                time.sleep(3)  # ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                
        except KeyboardInterrupt:
            print("\nüëã ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Ctrl+C")
    
    def shutdown(self):
        """‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
        
        self.is_running = False
        
        if MT5_AVAILABLE:
            mt5.shutdown()
            print("‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5")
        
        print("üëã ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    system = IntelligentTradingSystem()
    
    try:
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        if not system.initialize_system():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ")
            return
        
        print("\n" + "=" * 50)
        print("üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:")
        print("1. GUI Mode (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)")
        print("2. Console Mode")
        print("=" * 50)
        
        # ‡∏ñ‡∏≤‡∏° user ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏´‡∏ô
        try:
            choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1/2) [‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: 1]: ").strip()
            if not choice:
                choice = "1"
        except:
            choice = "1"
        
        if choice == "1":
            # GUI Mode
            if not system.start_gui():
                print("‚ùå GUI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Console Mode")
                system.start_console_mode()
        else:
            # Console Mode
            system.start_console_mode()
    
    except KeyboardInterrupt:
        print("\nüëã ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Ctrl+C")
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    finally:
        system.shutdown()

if __name__ == "__main__":
    main()
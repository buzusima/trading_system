#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INTELLIGENT GOLD TRADING SYSTEM - MAIN ENTRY POINT
=================================================
‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î Gold ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Entry Point ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (< 50 lines ‡∏ï‡∏≤‡∏° requirement)

‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á:
- config/settings.py (‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö)
- gui_system/main_window.py (‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å)
- utilities/professional_logger.py (‡∏£‡∏∞‡∏ö‡∏ö logging)
- utilities/error_handler.py (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)
- position_management/ (‡∏£‡∏∞‡∏ö‡∏ö Profit ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
- adaptive_entries/ (Signal Generator)
- mt5_integration/ (Order Executor)
"""

import sys
import os
import threading
import time
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô sys.path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

try:
    # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å
    from config.settings import SystemSettings
    from utilities.professional_logger import setup_main_logger
    from utilities.error_handler import GlobalErrorHandler
    from gui_system.main_window import TradingSystemGUI
    
    # üîó ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Profit ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    from position_management.position_tracker import get_position_tracker
    from position_management.profit_optimizer import get_profit_taker
    
    # üéØ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Signal ‡πÅ‡∏•‡∏∞ Order
    from adaptive_entries.signal_generator import get_signal_generator
    from mt5_integration.order_executor import get_smart_order_executor, OrderType
    
    def intelligent_position_manager(signal_generator, order_executor, position_tracker, logger):
        """
        üß† Intelligent Position Manager - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Position ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
        
        Logic:
        1. ‡πÑ‡∏°‡πà‡∏°‡∏µ positions ‚Üí ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á position ‡πÉ‡∏´‡∏°‡πà
        2. ‡∏°‡∏µ positions ‡∏Å‡∏≥‡πÑ‡∏£ ‚Üí ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ Profit System ‡πÄ‡∏Å‡πá‡∏ö
        3. ‡∏°‡∏µ positions ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô ‚Üí ‡πÉ‡∏ä‡πâ Recovery ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
        4. ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏£‡∏ö‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏Ç‡πâ‡∏≠ 1
        """
        logger.info("üß† Intelligent Position Manager ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
        current_cycle = "ANALYSIS"  # ANALYSIS, MONITORING, RECOVERY
        last_analysis_time = 0
        analysis_cooldown = 120  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏¥‡∏î‡∏Ñ‡∏£‡∏ö)
        
        while True:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö positions ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                current_positions = order_executor.get_open_positions("XAUUSD")
                total_positions = len(current_positions)
                
                if total_positions == 0:
                    # üéØ ‡πÑ‡∏°‡πà‡∏°‡∏µ positions ‚Üí ‡πÇ‡∏´‡∏°‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                    current_cycle = "ANALYSIS"
                    current_time = time.time()
                    
                    # üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Signal Generator ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ positions
                    try:
                        signal_generator.start_signal_generation()
                        logger.info("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Signal Generator ‡πÉ‡∏´‡∏°‡πà - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Signal Generator: {e}")
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown
                    if current_time - last_analysis_time >= analysis_cooldown:
                        logger.info("üîç ‡πÑ‡∏°‡πà‡∏°‡∏µ positions ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà")
                        
                        # ‡∏£‡∏±‡∏ö signal ‡∏à‡∏≤‡∏Å Signal Generator
                        signal = signal_generator.get_next_signal()
                        
                        if signal:
                            logger.info(f"üì® Signal ‡πÉ‡∏´‡∏°‡πà: {signal.signal_id} | {signal.direction.value} | "
                                      f"Price: {signal.current_price:.2f} | Confidence: {signal.confidence:.2f}")
                            
                            # ‡πÅ‡∏õ‡∏•‡∏á Signal ‡πÄ‡∏õ‡πá‡∏ô Order
                            if signal.direction.value == "BUY":
                                order_type = OrderType.BUY
                            elif signal.direction.value == "SELL":
                                order_type = OrderType.SELL
                            else:
                                logger.warning(f"‚ö†Ô∏è Invalid signal direction: {signal.direction.value}")
                                time.sleep(10)
                                continue
                            
                            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î volume (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0.01)
                            volume = 0.01
                            
                            # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                            result = order_executor.send_market_order(
                                symbol="XAUUSD.v",
                                order_type=order_type,
                                volume=volume,
                                comment=f"Smart_{signal.signal_id[:8]}",
                                strategy_name=signal.source_engine.value,
                                recovery_level=0
                            )
                            
                            if result.status.value == "FILLED":
                                last_analysis_time = current_time
                                current_cycle = "MONITORING"
                                
                                # üõë ‡∏´‡∏¢‡∏∏‡∏î Signal Generator ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                                try:
                                    signal_generator.stop_signal_generation()
                                    logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î Signal Generator - ‡∏£‡∏≠‡πÉ‡∏´‡πâ position ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô")
                                except Exception as e:
                                    logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î Signal Generator: {e}")
                                
                                logger.info(f"‚úÖ Position ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {order_type.value} {volume} lots | "
                                          f"Price: {result.price_executed:.2f}")
                                logger.info("üëÅÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î MONITORING - ‡∏£‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
                            else:
                                logger.error(f"‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á Position ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.error_description}")
                        
                        else:
                            logger.info("üìä ‡πÑ‡∏°‡πà‡∏°‡∏µ Signal ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ - ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                    
                    else:
                        time_left = int(analysis_cooldown - (current_time - last_analysis_time))
                        logger.info(f"‚è≥ ‡∏£‡∏≠ Cooldown ‡∏≠‡∏µ‡∏Å {time_left} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà")
                
                else:
                    # üìä ‡∏°‡∏µ positions ‚Üí ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì P&L ‡∏£‡∏ß‡∏°
                    total_pnl = sum(pos['profit'] for pos in current_positions)
                    profitable_positions = [pos for pos in current_positions if pos['profit'] > 0]
                    losing_positions = [pos for pos in current_positions if pos['profit'] < -30.0]  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô $30
                    
                    logger.info(f"üìä Positions: {total_positions} | Total P&L: ${total_pnl:.2f} | "
                              f"Profit: {len(profitable_positions)} | Loss: {len(losing_positions)}")
                    
                    if losing_positions:
                        # üîÑ ‡∏°‡∏µ positions ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô ‚Üí ‡πÇ‡∏´‡∏°‡∏î RECOVERY
                        current_cycle = "RECOVERY"
                        logger.warning(f"üîÑ ‡πÇ‡∏´‡∏°‡∏î RECOVERY - ‡∏°‡∏µ {len(losing_positions)} positions ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô")
                        
                        # ‡∏´‡∏≤ position ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                        worst_position = min(losing_positions, key=lambda p: p['profit'])
                        loss_amount = abs(worst_position['profit'])
                        
                        logger.info(f"üéØ Target Recovery: Position {worst_position['ticket']} | "
                                  f"Loss: ${loss_amount:.2f} | Type: {worst_position['type']}")
                        
                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Recovery Order
                        recovery_volume = min(worst_position['volume'] * 1.5, 0.05)  # Martingale x1.5, ‡∏à‡∏≥‡∏Å‡∏±‡∏î 0.05
                        recovery_type = OrderType.SELL if worst_position['type'] == 'BUY' else OrderType.BUY
                        
                        # ‡∏™‡πà‡∏á Recovery Order
                        recovery_result = order_executor.send_market_order(
                            symbol="XAUUSD",
                            order_type=recovery_type,
                            volume=recovery_volume,
                            comment=f"Recov_{worst_position['ticket']}",
                            strategy_name="SMART_RECOVERY",
                            recovery_level=1
                        )
                        
                        if recovery_result.status.value == "FILLED":
                            logger.info(f"‚úÖ Recovery Order ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {recovery_type.value} {recovery_volume} lots | "
                                      f"Price: {recovery_result.price_executed:.2f}")
                        else:
                            logger.error(f"‚ùå Recovery Order ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {recovery_result.error_description}")
                    
                    elif total_pnl > 0:
                        # üí∞ P&L ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å ‚Üí ‡πÇ‡∏´‡∏°‡∏î MONITORING (‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ Profit System ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
                        current_cycle = "MONITORING"
                        logger.info("üí∞ Portfolio ‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£ - ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ Profit System ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£")
                    
                    else:
                        # üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥ ‚Üí ‡πÇ‡∏´‡∏°‡∏î MONITORING
                        current_cycle = "MONITORING"
                        logger.info("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° positions - ‡∏£‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á")
                
                # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                if current_cycle == "ANALYSIS":
                    time.sleep(30)  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                elif current_cycle == "MONITORING":
                    time.sleep(15)  # ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏∏‡∏Å 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                elif current_cycle == "RECOVERY":
                    time.sleep(10)  # Recovery ‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                
            except Exception as e:
                logger.error(f"‚ùå Position Manager error: {e}")
                time.sleep(20)
    
    def main():
        """
        ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logger ‡∏´‡∏•‡∏±‡∏Å
        - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Error Handler
        - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö Profit
        - ‡πÄ‡∏£‡∏¥‡πà‡∏° Intelligent Position Manager
        - ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á GUI ‡∏´‡∏•‡∏±‡∏Å
        """
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logger ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        logger = setup_main_logger("IntelligentGoldTrading")
        logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Intelligent Gold Trading System")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Global Error Handler
        error_handler = GlobalErrorHandler(logger)
        error_handler.setup_global_exception_handling()
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        settings = SystemSettings()
        logger.info(f"üìã ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Mode: {settings.trading_mode}")
        
        # üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö Profit
        logger.info("üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö Profit...")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Position Tracker
        position_tracker = get_position_tracker()
        logger.info("‚úÖ Position Tracker ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Profit Optimizer
        profit_optimizer = get_profit_taker()
        profit_optimizer.start_profit_taking()
        logger.info("‚úÖ Profit Optimizer ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        
        # üß† ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö Intelligent Position Manager
        logger.info("üß† ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Intelligent Position Manager...")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Signal Generator (‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á signals)
        signal_generator = get_signal_generator()
        # signal_generator.start_signal_generation()  # ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô - ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô Position Manager
        logger.info("‚úÖ Signal Generator ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á signals)")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Order Executor
        order_executor = get_smart_order_executor()
        logger.info("‚úÖ Order Executor ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° Intelligent Position Manager Thread
        manager_thread = threading.Thread(
            target=intelligent_position_manager,
            args=(signal_generator, order_executor, position_tracker, logger),
            daemon=True,
            name="IntelligentPositionManager"
        )
        manager_thread.start()
        logger.info("üß† Intelligent Position Manager ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß!")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô GUI ‡∏´‡∏•‡∏±‡∏Å
        app = TradingSystemGUI(settings, logger)
        logger.info("üñ•Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏î‡∏¥‡πâ‡∏á")
        
        # ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        app.run()
        
        # ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        logger.info("üõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
        signal_generator.stop_signal_generation()
        profit_optimizer.stop_profit_taking()
        position_tracker.stop_tracking()
        logger.info("üõë ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö Intelligent Gold Trading System")

    if __name__ == "__main__":
        main()

except ImportError as e:
    print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•: {e}")
    print("üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡πÅ‡∏•‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå")
    print("üìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:")
    print("   - position_management/position_tracker.py")
    print("   - position_management/profit_optimizer.py")
    print("   - adaptive_entries/signal_generator.py")
    print("   - mt5_integration/order_executor.py")
    sys.exit(1)
except Exception as e:
    print(f"üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {e}")
    sys.exit(1)
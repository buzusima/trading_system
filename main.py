#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INTELLIGENT GOLD TRADING SYSTEM - MAIN ENTRY POINT with GUI
==========================================================
‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏≠‡∏á‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏° GUI Interface
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ XAUUSD Symbol Loading Error ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î GUI
"""

import sys
import os
import time
import threading
from datetime import datetime
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö imports
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

# Core imports
try:
    import MetaTrader5 as mt5
    MT5_AVAILABLE = True
except ImportError:
    MT5_AVAILABLE = False
    print("‚ö†Ô∏è MetaTrader5 module ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

# System status
class SystemStatus:
    def __init__(self):
        self.start_time = datetime.now()
        self.is_running = True
        self.error_count = 0
        self.message_count = 0
        
    def get_uptime(self):
        return (datetime.now() - self.start_time).total_seconds()
    
    def add_error(self):
        self.error_count += 1
    
    def add_message(self):
        self.message_count += 1
    
    def get_status_line(self):
        uptime = self.get_uptime()
        return f"[Uptime:{uptime:.1f}s|Msgs:{self.message_count}|Errs:{self.error_count}]"

# Global system status
system_status = SystemStatus()

def log_status(message, is_error=False):
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏° uptime"""
    if is_error:
        system_status.add_error()
        print(f"ERROR | {system_status.get_status_line()} | {message}")
    else:
        system_status.add_message()
        print(f"INFO  | {system_status.get_status_line()} | {message}")

def check_mt5_installation():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MT5"""
    log_status("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MetaTrader 5...")
    
    if not MT5_AVAILABLE:
        log_status("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö MetaTrader5 Python module", True)
        log_status("üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á: pip install MetaTrader5")
        return False
    
    return True

def initialize_mt5_connection():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Symbol"""
    log_status("üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MetaTrader 5...")
    
    try:
        if not mt5.initialize():
            log_status("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ", True)
            return False
        
        log_status("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        account_info = mt5.account_info()
        if account_info:
            log_status(f"üìä ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {account_info.login} | Balance: ${account_info.balance:,.2f}")
            log_status(f"üè¶ ‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå: {account_info.company}")
            log_status(f"üåê Server: {account_info.server}")
        
        return True
        
    except Exception as e:
        log_status(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô MT5 connection: {e}", True)
        return False

def auto_detect_gold_symbol():
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbol ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    log_status("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbol...")
    
    gold_symbols = [
        "XAUUSD", "XAUUSD.v", "XAUUSD.a", "XAUUSD.c", "XAUUSD.e",
        "XAUUSD.m", "GOLD", "GOLDUSD", "GOLD.USD", "XAU.USD"
    ]
    
    found_symbols = []
    
    for symbol in gold_symbols:
        try:
            symbol_info = mt5.symbol_info(symbol)
            if symbol_info:
                log_status(f"üéØ ‡∏û‡∏ö Symbol: {symbol}")
                
                if not symbol_info.visible:
                    if mt5.symbol_select(symbol, True):
                        log_status(f"‚úÖ Enable {symbol} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    else:
                        continue
                
                tick = mt5.symbol_info_tick(symbol)
                if tick and tick.bid > 0:
                    spread = (tick.ask - tick.bid) / symbol_info.point
                    log_status(f"üìà {symbol} - ‡∏£‡∏≤‡∏Ñ‡∏≤: {tick.bid:.2f}/{tick.ask:.2f} - Spread: {spread:.1f}p")
                    
                    found_symbols.append({
                        'name': symbol,
                        'spread': spread,
                        'bid': tick.bid,
                        'ask': tick.ask,
                        'info': symbol_info
                    })
        except:
            continue
    
    if not found_symbols:
        log_status("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Gold Symbol ‡πÉ‡∏î‡πÜ", True)
        return None
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å symbol ‡∏ó‡∏µ‡πà‡∏°‡∏µ spread ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
    best_symbol = min(found_symbols, key=lambda x: x['spread'])
    
    log_status(f"üèÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ Symbol: {best_symbol['name']}")
    log_status(f"‚≠ê Spread ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {best_symbol['spread']:.1f} points")
    log_status(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {best_symbol['bid']:.2f} / {best_symbol['ask']:.2f}")
    
    return best_symbol['name']

def initialize_trading_components():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î"""
    log_status("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î Trading Components...")
    
    components_status = {
        'mt5_connector': False,
        'market_analyzer': False,
        'entry_system': False,
        'recovery_system': False,
        'position_manager': False
    }
    
    try:
        try:
            from mt5_integration.mt5_connector import MT5Connector
            components_status['mt5_connector'] = True
            log_status("‚úÖ MT5 Connector ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except ImportError as e:
            log_status(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î MT5 Connector: {e}", True)
        
        try:
            from market_intelligence.market_analyzer import MarketAnalyzer
            components_status['market_analyzer'] = True
            log_status("‚úÖ Market Analyzer ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except ImportError as e:
            log_status(f"‚ö†Ô∏è Market Analyzer ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°: {e}")
        
        try:
            from adaptive_entries.strategy_selector import StrategySelector
            components_status['entry_system'] = True
            log_status("‚úÖ Entry System ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except ImportError as e:
            log_status(f"‚ö†Ô∏è Entry System ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°: {e}")
        
        try:
            from intelligent_recovery.recovery_selector import RecoverySelector  
            components_status['recovery_system'] = True
            log_status("‚úÖ Recovery System ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except ImportError as e:
            log_status(f"‚ö†Ô∏è Recovery System ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°: {e}")
        
        try:
            from position_management.position_tracker import PositionTracker
            components_status['position_manager'] = True
            log_status("‚úÖ Position Manager ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except ImportError as e:
            log_status(f"‚ö†Ô∏è Position Manager ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°: {e}")
        
        loaded_count = sum(components_status.values())
        total_count = len(components_status)
        
        log_status(f"üìä ‡πÇ‡∏´‡∏•‡∏î Components: {loaded_count}/{total_count} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        return loaded_count > 0
            
    except Exception as e:
        log_status(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Components: {e}", True)
        return False

def save_symbol_config(symbol_name):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Symbol ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"""
    try:
        config_dir = current_dir / "config"
        config_dir.mkdir(exist_ok=True)
        
        config_file = config_dir / "detected_symbol.py"
        
        config_content = f'''# Auto-generated Symbol Configuration
# Generated at: {datetime.now().isoformat()}

# Selected Gold Symbol
GOLD_SYMBOL = "{symbol_name}"

# Detection Results
DETECTION_TIME = "{datetime.now().isoformat()}"
BROKER_INFO = {{
    "company": "{mt5.account_info().company if mt5.account_info() else 'Unknown'}",
    "server": "{mt5.account_info().server if mt5.account_info() else 'Unknown'}"
}}

# Usage in other modules:
# from config.detected_symbol import GOLD_SYMBOL
'''
        
        with open(config_file, 'w', encoding='utf-8') as f:
            f.write(config_content)
        
        log_status(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Symbol ‡∏•‡∏á {config_file}")
        return True
        
    except Exception as e:
        log_status(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: {e}")
        return False

def start_gui_system():
    """‡πÄ‡∏£‡∏¥‡πà‡∏° GUI System ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
    try:
        log_status("üñ•Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î GUI System...")
        
        # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ GUI ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
        try:
            # ‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÅ‡∏£‡∏Å
            from gui_system.main_window import TradingSystemGUI
            gui = TradingSystemGUI()
        except ImportError:
            try:
                # ‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
                from gui_system.main_window import create_trading_gui
                gui = create_trading_gui()
            except ImportError:
                try:
                    # ‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏° - ‡πÉ‡∏ä‡πâ class ‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                    import gui_system.main_window as gui_module
                    
                    # ‡∏´‡∏≤ class ‡∏ó‡∏µ‡πà‡∏°‡∏µ method run ‡∏´‡∏£‡∏∑‡∏≠ mainloop
                    for attr_name in dir(gui_module):
                        attr = getattr(gui_module, attr_name)
                        if hasattr(attr, '__call__') and 'GUI' in attr_name.upper():
                            gui = attr()
                            break
                    else:
                        raise ImportError("‡πÑ‡∏°‡πà‡∏û‡∏ö GUI class ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
                        
                except ImportError:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÄ‡∏≠‡∏á
                    return start_simple_gui()
        
        log_status("‚úÖ GUI System ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        log_status("üí° ‡πÉ‡∏ä‡πâ GUI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î")
        
        # ‡∏£‡∏±‡∏ô GUI
        if hasattr(gui, 'run'):
            gui.run()
        elif hasattr(gui, 'mainloop'):
            gui.mainloop()
        elif hasattr(gui, 'root') and hasattr(gui.root, 'mainloop'):
            gui.root.mainloop()
        else:
            log_status("‚ùå GUI ‡πÑ‡∏°‡πà‡∏°‡∏µ method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô", True)
            return False
        
        return True
        
    except Exception as e:
        log_status(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î GUI System: {e}", True)
        return False

def start_simple_gui():
    """‡πÄ‡∏£‡∏¥‡πà‡∏° GUI ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)"""
    try:
        import tkinter as tk
        from tkinter import messagebox
        
        log_status("üñ•Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î Simple GUI...")
        
        root = tk.Tk()
        root.title("üöÄ Intelligent Gold Trading System")
        root.geometry("600x400")
        root.configure(bg='#1a1a2e')
        
        # Header
        tk.Label(
            root,
            text="üöÄ INTELLIGENT GOLD TRADING SYSTEM",
            font=("Arial", 16, "bold"),
            fg='#e94560',
            bg='#1a1a2e'
        ).pack(pady=20)
        
        # Status
        status_label = tk.Label(
            root,
            text="‚úÖ System Ready - MT5 Connected",
            font=("Arial", 12),
            fg='#27ae60',
            bg='#1a1a2e'
        )
        status_label.pack(pady=10)
        
        # Account info
        if MT5_AVAILABLE:
            account_info = mt5.account_info()
            if account_info:
                account_text = f"Account: {account_info.login} | Balance: ${account_info.balance:,.2f}"
                tk.Label(
                    root,
                    text=account_text,
                    font=("Arial", 11),
                    fg='#ffffff',
                    bg='#1a1a2e'
                ).pack(pady=5)
        
        # Buttons
        button_frame = tk.Frame(root, bg='#1a1a2e')
        button_frame.pack(pady=30)
        
        def start_trading():
            result = messagebox.askyesno(
                "Confirm",
                "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î?\n\n‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á"
            )
            if result:
                messagebox.showinfo("Started", "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß\n\nüí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á")
        
        def stop_trading():
            result = messagebox.askyesno("Confirm", "üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î?")
            if result:
                messagebox.showinfo("Stopped", "üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß")
        
        tk.Button(
            button_frame,
            text="üöÄ Start Trading",
            font=("Arial", 14, "bold"),
            bg='#27ae60',
            fg='white',
            width=15,
            height=2,
            command=start_trading
        ).pack(side=tk.LEFT, padx=10)
        
        tk.Button(
            button_frame,
            text="üõë Stop Trading",
            font=("Arial", 14, "bold"),
            bg='#e74c3c',
            fg='white',
            width=15,
            height=2,
            command=stop_trading
        ).pack(side=tk.LEFT, padx=10)
        
        # Status bar
        status_bar = tk.Label(
            root,
            text="üîÑ System Ready",
            font=("Arial", 10),
            fg='#bdc3c7',
            bg='#16213e',
            relief=tk.SUNKEN
        )
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        log_status("‚úÖ Simple GUI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        def on_closing():
            if messagebox.askyesno("Quit", "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö?"):
                if MT5_AVAILABLE:
                    mt5.shutdown()
                root.quit()
                root.destroy()
        
        root.protocol("WM_DELETE_WINDOW", on_closing)
        root.mainloop()
        
        return True
        
    except Exception as e:
        log_status(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î Simple GUI: {e}", True)
        return False

def start_minimal_trading_mode(symbol_name):
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡πÄ‡∏°‡∏∑‡πà‡∏≠ GUI ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)"""
    log_status("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥...")
    
    try:
        log_status(f"üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° {symbol_name}...")
        
        for i in range(10):
            tick = mt5.symbol_info_tick(symbol_name)
            if tick:
                current_time = datetime.now().strftime('%H:%M:%S')
                spread = tick.ask - tick.bid
                log_status(f"üí∞ {current_time} | {symbol_name}: {tick.bid:.2f}/{tick.ask:.2f} | Spread: {spread:.2f}")
            
            time.sleep(2)
        
        log_status("‚úÖ ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
        return True
        
    except Exception as e:
        log_status(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥: {e}", True)
        return False

def cleanup_and_shutdown():
    """‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î"""
    log_status("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
    
    try:
        if MT5_AVAILABLE:
            mt5.shutdown()
            log_status("‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5")
        
        uptime = system_status.get_uptime()
        log_status(f"üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:")
        log_status(f"   ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {uptime:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        log_status(f"   üì® ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {system_status.message_count}")
        log_status(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {system_status.error_count}")
        
        success_rate = ((system_status.message_count - system_status.error_count) / 
                       max(system_status.message_count, 1)) * 100
        log_status(f"   ‚úÖ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_rate:.1f}%")
        
        log_status("üëã ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö Intelligent Gold Trading ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö: {e}")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    print("üöÄ INTELLIGENT GOLD TRADING SYSTEM v2.0")
    print("=" * 50)
    print("üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ XAUUSD Symbol Loading Error")
    print("‚ö° ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Auto-Detection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")
    print("üñ•Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î GUI Interface")
    print("=" * 50)
    
    try:
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MT5
        if not check_mt5_installation():
            return False
        
        # 2. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
        if not initialize_mt5_connection():
            log_status("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", True)
            return False
        
        # 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbol
        gold_symbol = auto_detect_gold_symbol()
        if not gold_symbol:
            log_status("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Gold Symbol - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ", True)
            return False
        
        # 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Symbol
        save_symbol_config(gold_symbol)
        
        # 5. ‡πÇ‡∏´‡∏•‡∏î Trading Components
        components_loaded = initialize_trading_components()
        
        if components_loaded:
            log_status("üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")
        else:
            log_status("‚ö†Ô∏è ‡∏ö‡∏≤‡∏á Components ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î")
        
        # 6. ‡πÄ‡∏õ‡∏¥‡∏î GUI System
        log_status("üñ•Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î GUI Interface...")
        
        if start_gui_system():
            log_status("‚úÖ GUI System ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        else:
            log_status("‚ö†Ô∏è GUI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ - ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥")
            start_minimal_trading_mode(gold_symbol)
        
        log_status("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ XAUUSD Symbol ‡πÅ‡∏•‡πâ‡∏ß")
        return True
        
    except KeyboardInterrupt:
        log_status("‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Ctrl+C")
        return False
        
    except Exception as e:
        log_status(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å: {e}", True)
        return False
    
    finally:
        cleanup_and_shutdown()

if __name__ == "__main__":
    try:
        success = main()
        exit_code = 0 if success else 1
        sys.exit(exit_code)
    except Exception as e:
        print(f"FATAL ERROR: {e}")
        sys.exit(1)
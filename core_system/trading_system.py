#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CORE TRADING SYSTEM - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å (COMPLETE FIXED)
=================================================
‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Intelligent Gold Trading System
‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Import ‡πÅ‡∏•‡∏∞ Component Initialization

üîß ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
- Circular Import Dependencies
- Component Initialization Order
- Safe Module Loading
- Error Handling ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Components
- Mock Components ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Development

üéØ ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å:
- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ lifecycle ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î
- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ components ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
- ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö
- ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° health ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Recovery ‡πÅ‡∏•‡∏∞ Position Management
- Performance Tracking
"""

import threading
import time
import traceback
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass, field
from enum import Enum
import json
import queue
import sys
import random
from pathlib import Path
from collections import defaultdict, deque

# Safe imports with fallback
def safe_import(module_name: str, fallback_value: Any = None):
    """Import module ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        parts = module_name.split('.')
        module = __import__(module_name)
        for part in parts[1:]:
            module = getattr(module, part)
        return module
    except ImportError as e:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import {module_name}: {e}")
        return fallback_value
    except Exception as e:
        print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô import {module_name}: {e}")
        return fallback_value

# Import required modules with safe fallback
try:
    from utilities.professional_logger import setup_main_logger, setup_component_logger
    from utilities.error_handler import GlobalErrorHandler, ErrorCategory, ErrorSeverity, handle_trading_errors
except ImportError:
    # Fallback to basic logging
    import logging
    def setup_main_logger(name="TradingSystem"):
        logger = logging.getLogger(name)
        if not logger.handlers:
            logger.setLevel(logging.INFO)
            handler = logging.StreamHandler()
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        return logger
    
    def setup_component_logger(name):
        return setup_main_logger(name)
    
    class ErrorCategory(Enum):
        SYSTEM = "SYSTEM"
        TRADING = "TRADING"
        MT5_CONNECTION = "MT5_CONNECTION"
        RECOVERY = "RECOVERY"
    
    class ErrorSeverity(Enum):
        LOW = "LOW"
        MEDIUM = "MEDIUM"
        HIGH = "HIGH"
        CRITICAL = "CRITICAL"
    
    def handle_trading_errors(func):
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                print(f"Trading Error in {func.__name__}: {e}")
                raise
        return wrapper
    
    class GlobalErrorHandler:
        def __init__(self, logger=None):
            self.logger = logger
        
        def setup_global_exception_handling(self):
            pass
        
        def handle_error(self, category, severity, message, exc_info=None):
            if self.logger:
                self.logger.error(f"[{category.value}] {message}")
            else:
                print(f"[{category.value}] {message}")

# System State Management
class SystemState(Enum):
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    INITIALIZING = "INITIALIZING"
    READY = "READY"
    RUNNING = "RUNNING"
    STOPPING = "STOPPING"
    STOPPED = "STOPPED"
    ERROR = "ERROR"

class ComponentStatus(Enum):
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Component"""
    NOT_LOADED = "NOT_LOADED"
    LOADING = "LOADING"
    LOADED = "LOADED"
    RUNNING = "RUNNING"
    STOPPED = "STOPPED"
    ERROR = "ERROR"

@dataclass
class ComponentInfo:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Component"""
    name: str
    status: ComponentStatus = ComponentStatus.NOT_LOADED
    instance: Optional[Any] = None
    error_message: Optional[str] = None
    load_time: Optional[datetime] = None
    start_time: Optional[datetime] = None
    last_update: Optional[datetime] = None
    health_status: str = "UNKNOWN"

@dataclass
class SystemMetrics:
    """‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
    start_time: datetime = field(default_factory=datetime.now)
    components_loaded: int = 0
    components_running: int = 0
    total_components: int = 0
    last_update: datetime = field(default_factory=datetime.now)
    uptime_seconds: int = 0
    errors_count: int = 0
    signals_generated: int = 0
    orders_executed: int = 0
    recovery_operations: int = 0

class MockMarketAnalyzer:
    """Mock Market Analyzer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    
    def __init__(self):
        self.analysis_active = False
        self.current_condition = "RANGING"
        self.current_session = "ASIAN"
    
    def start_analysis(self):
        self.analysis_active = True
        print("üß† Mock Market Analyzer ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    def stop_analysis(self):
        self.analysis_active = False
        print("üõë Mock Market Analyzer ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
    
    def get_current_condition(self):
        conditions = ["TRENDING_UP", "TRENDING_DOWN", "RANGING", "VOLATILE", "QUIET"]
        return random.choice(conditions)
    
    def get_current_session(self):
        hour = datetime.now().hour
        if 22 <= hour or hour < 8:
            return "ASIAN"
        elif 15 <= hour < 20:
            return "LONDON"
        elif 20 <= hour < 22:
            return "OVERLAP"
        else:
            return "NEW_YORK"

class MockSignalGenerator:
    """Mock Signal Generator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    
    def __init__(self):
        self.generation_active = False
        self.signals_generated = 0
        self.signals_queue = queue.Queue(maxsize=50)
    
    def start_signal_generation(self):
        self.generation_active = True
        print("üéØ Mock Signal Generator ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì")
        return True
    
    def stop_signal_generation(self):
        self.generation_active = False
        print("üõë Mock Signal Generator ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì")
    
    def get_next_signal(self, timeout=1.0):
        if random.random() > 0.7:  # 30% chance ‡πÑ‡∏î‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
            return {
                'signal_id': f'MOCK_{int(time.time())}',
                'signal_type': random.choice(['BUY', 'SELL']),
                'confidence': random.uniform(0.5, 0.9),
                'entry_price': 2000 + random.uniform(-10, 10),
                'volume': 0.01
            }
        return None
    
    def get_statistics(self):
        return {
            'generation_active': self.generation_active,
            'signals_generated_today': self.signals_generated,
            'queue_size': self.signals_queue.qsize()
        }

class MockRecoveryEngine:
    """Mock Recovery Engine ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    
    def __init__(self):
        self.recovery_active = False
        self.recovery_operations = 0
        self.positions_in_recovery = []
    
    def start_recovery_system(self):
        self.recovery_active = True
        print("üîÑ Mock Recovery Engine ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Recovery")
        return True
    
    def stop_recovery_system(self):
        self.recovery_active = False
        print("üõë Mock Recovery Engine ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö Recovery")
    
    def add_position_to_recovery(self, position_data):
        self.positions_in_recovery.append({
            'position_id': position_data.get('ticket', f'MOCK_{int(time.time())}'),
            'entry_price': position_data.get('price', 2000),
            'volume': position_data.get('volume', 0.01),
            'type': position_data.get('type', 'BUY'),
            'recovery_level': 0,
            'timestamp': datetime.now()
        })
        self.recovery_operations += 1
        print(f"üîÑ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Recovery: {position_data}")
    
    def get_recovery_status(self):
        return {
            'recovery_active': self.recovery_active,
            'positions_in_recovery': len(self.positions_in_recovery),
            'recovery_operations': self.recovery_operations
        }

class MockPositionTracker:
    """Mock Position Tracker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    
    def __init__(self):
        self.tracking_active = False
        self.open_positions = []
        self.closed_positions = []
        self.total_profit = 0.0
    
    def start_position_tracking(self):
        self.tracking_active = True
        print("üìä Mock Position Tracker ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
        return True
    
    def stop_position_tracking(self):
        self.tracking_active = False
        print("üõë Mock Position Tracker ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
    
    def add_position(self, position_data):
        position = {
            'ticket': position_data.get('ticket', f'POS_{int(time.time())}'),
            'symbol': position_data.get('symbol', 'XAUUSD'),
            'type': position_data.get('type', 'BUY'),
            'volume': position_data.get('volume', 0.01),
            'open_price': position_data.get('price', 2000),
            'open_time': datetime.now(),
            'profit': 0.0,
            'status': 'OPEN'
        }
        self.open_positions.append(position)
        print(f"‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà: {position['ticket']}")
        return position['ticket']
    
    def close_position(self, ticket, close_price=None, profit=0.0):
        for i, pos in enumerate(self.open_positions):
            if pos['ticket'] == ticket:
                pos['close_price'] = close_price or (pos['open_price'] + random.uniform(-5, 5))
                pos['close_time'] = datetime.now()
                pos['profit'] = profit
                pos['status'] = 'CLOSED'
                
                self.closed_positions.append(pos)
                self.open_positions.pop(i)
                self.total_profit += profit
                
                print(f"‚ûñ ‡∏õ‡∏¥‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {ticket} | ‡∏Å‡∏≥‡πÑ‡∏£: {profit}")
                return True
        return False
    
    def get_open_positions(self):
        return self.open_positions.copy()
    
    def get_position_summary(self):
        return {
            'tracking_active': self.tracking_active,
            'open_positions_count': len(self.open_positions),
            'closed_positions_count': len(self.closed_positions),
            'total_profit': self.total_profit,
            'open_volume': sum(pos['volume'] for pos in self.open_positions)
        }

class MockOrderExecutor:
    """Mock Order Executor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    
    def __init__(self):
        self.execution_active = False
        self.orders_executed = 0
        self.execution_success_rate = 0.85  # 85% success rate
    
    def start_order_execution(self):
        self.execution_active = True
        print("‚ö° Mock Order Executor ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ execute")
        return True
    
    def stop_order_execution(self):
        self.execution_active = False
        print("üõë Mock Order Executor ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£ execute")
    
    def execute_market_order(self, symbol, order_type, volume, comment=""):
        if not self.execution_active:
            return None
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£ execute
        if random.random() < self.execution_success_rate:
            order_result = {
                'ticket': f'ORDER_{int(time.time())}_{random.randint(1000, 9999)}',
                'symbol': symbol,
                'type': order_type,
                'volume': volume,
                'price': 2000 + random.uniform(-2, 2),
                'time': datetime.now(),
                'comment': comment,
                'profit': 0.0,
                'status': 'FILLED'
            }
            self.orders_executed += 1
            print(f"‚úÖ Execute ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {order_result['ticket']} | {order_type} {volume} lots")
            return order_result
        else:
            print(f"‚ùå Execute ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {order_type} {volume} lots")
            return None
    
    def get_execution_statistics(self):
        return {
            'execution_active': self.execution_active,
            'orders_executed': self.orders_executed,
            'success_rate': self.execution_success_rate
        }

class MockPerformanceTracker:
    """Mock Performance Tracker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    
    def __init__(self):
        self.tracking_active = False
        self.daily_profit = 0.0
        self.weekly_profit = 0.0
        self.monthly_profit = 0.0
        self.win_rate = 0.0
        self.total_trades = 0
        self.winning_trades = 0
    
    def start_performance_tracking(self):
        self.tracking_active = True
        print("üìà Mock Performance Tracker ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
        return True
    
    def stop_performance_tracking(self):
        self.tracking_active = False
        print("üõë Mock Performance Tracker ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
    
    def record_trade(self, profit, is_win=None):
        self.total_trades += 1
        self.daily_profit += profit
        self.weekly_profit += profit
        self.monthly_profit += profit
        
        if is_win is None:
            is_win = profit > 0
        
        if is_win:
            self.winning_trades += 1
        
        if self.total_trades > 0:
            self.win_rate = (self.winning_trades / self.total_trades) * 100
    
    def get_performance_summary(self):
        return {
            'tracking_active': self.tracking_active,
            'daily_profit': self.daily_profit,
            'weekly_profit': self.weekly_profit,
            'monthly_profit': self.monthly_profit,
            'win_rate_percent': self.win_rate,
            'total_trades': self.total_trades,
            'winning_trades': self.winning_trades
        }

class IntelligentTradingSystem:
    """üß† ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏´‡∏•‡∏±‡∏Å - ‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"""
    
    def __init__(self, settings=None, logger=None):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î"""
        # Core attributes
        self.logger = logger or setup_main_logger("IntelligentTradingSystem")
        self.settings = settings
        self.system_state = SystemState.INITIALIZING
        
        # Component management
        self.components: Dict[str, ComponentInfo] = {}
        self.component_dependencies: Dict[str, List[str]] = {}
        
        # System metrics
        self.metrics = SystemMetrics()
        
        # Threading
        self.system_thread: Optional[threading.Thread] = None
        self.monitoring_thread: Optional[threading.Thread] = None
        self.shutdown_event = threading.Event()
        
        # Trading control
        self.trading_active = False
        self.auto_trading_enabled = False
        
        # Component instances (safe initialization)
        self.market_analyzer = None
        self.signal_generator = None
        self.recovery_engine = None
        self.position_tracker = None
        self.order_executor = None
        self.performance_tracker = None
        
        # Error handling
        self.error_handler = GlobalErrorHandler(self.logger)
        
        # Statistics
        self.system_statistics = {
            'start_time': datetime.now(),
            'total_uptime': 0,
            'components_health': {},
            'last_health_check': None,
            'performance_metrics': {},
            'error_log': deque(maxlen=100)
        }
        
        self.logger.info("üß† ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Intelligent Trading System (COMPLETE)")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        self._setup_components()
    
    def _setup_components(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ components ‡πÅ‡∏•‡∏∞ dependencies"""
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î components ‡πÅ‡∏•‡∏∞ dependencies
        self.component_dependencies = {
            'settings': [],
            'error_handler': ['settings'],
            'market_analyzer': ['settings', 'error_handler'],
            'signal_generator': ['settings', 'market_analyzer', 'error_handler'],
            'recovery_engine': ['settings', 'error_handler'],
            'position_tracker': ['settings', 'error_handler'],
            'order_executor': ['settings', 'position_tracker', 'error_handler'],
            'performance_tracker': ['settings', 'position_tracker', 'error_handler']
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á ComponentInfo ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ component
        for component_name in self.component_dependencies.keys():
            self.components[component_name] = ComponentInfo(component_name)
        
        self.metrics.total_components = len(self.components)
        self.logger.info(f"üìã ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ {self.metrics.total_components} components")
    
    def initialize_components(self) -> int:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.logger.info("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components...")
        success_count = 0
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏° dependencies
        load_order = self._get_load_order()
        
        for component_name in load_order:
            try:
                self.logger.info(f"üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î {component_name}...")
                success = self._load_component(component_name)
                
                if success:
                    success_count += 1
                    self.components[component_name].status = ComponentStatus.LOADED
                    self.components[component_name].load_time = datetime.now()
                    self.components[component_name].health_status = "HEALTHY"
                    self.logger.info(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î {component_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    self.components[component_name].status = ComponentStatus.ERROR
                    self.components[component_name].health_status = "ERROR"
                    self.logger.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î {component_name} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                    
            except Exception as e:
                self.logger.error(f"üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î {component_name}: {e}")
                traceback.print_exc()
                self.components[component_name].status = ComponentStatus.ERROR
                self.components[component_name].error_message = str(e)
                self.components[component_name].health_status = "CRITICAL"
        
        self.metrics.components_loaded = success_count
        self.logger.info(f"üìä ‡πÇ‡∏´‡∏•‡∏î components ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}/{self.metrics.total_components}")
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
        if success_count >= 4:  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 components ‡∏´‡∏•‡∏±‡∏Å
            self.system_state = SystemState.READY
            self.logger.info("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        else:
            self.system_state = SystemState.ERROR
            self.logger.error("‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - components ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
        
        return success_count
    
    def _get_load_order(self) -> List[str]:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î components ‡∏ï‡∏≤‡∏° dependencies"""
        loaded = set()
        order = []
        
        def can_load(component: str) -> bool:
            dependencies = self.component_dependencies.get(component, [])
            return all(dep in loaded for dep in dependencies)
        
        while len(loaded) < len(self.component_dependencies):
            progress_made = False
            
            for component in self.component_dependencies:
                if component not in loaded and can_load(component):
                    order.append(component)
                    loaded.add(component)
                    progress_made = True
                    break
            
            if not progress_made:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ component ‡πÑ‡∏´‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                remaining = set(self.component_dependencies.keys()) - loaded
                if remaining:
                    order.extend(remaining)
                    loaded.update(remaining)
                break
        
        return order
    
    def _load_component(self, component_name: str) -> bool:
        """‡πÇ‡∏´‡∏•‡∏î component ‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        self.components[component_name].status = ComponentStatus.LOADING
        
        try:
            if component_name == 'settings':
                return self._load_settings()
            elif component_name == 'error_handler':
                return self._load_error_handler()
            elif component_name == 'market_analyzer':
                return self._load_market_analyzer()
            elif component_name == 'signal_generator':
                return self._load_signal_generator()
            elif component_name == 'recovery_engine':
                return self._load_recovery_engine()
            elif component_name == 'position_tracker':
                return self._load_position_tracker()
            elif component_name == 'order_executor':
                return self._load_order_executor()
            elif component_name == 'performance_tracker':
                return self._load_performance_tracker()
            else:
                self.logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å component: {component_name}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î {component_name}: {e}")
            traceback.print_exc()
            return False
    
    def _load_settings(self) -> bool:
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            if self.settings is None:
                # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å config
                try:
                    from config.settings import get_system_settings
                    self.settings = get_system_settings()
                    self.logger.info("üìã ‡πÇ‡∏´‡∏•‡∏î SystemSettings ‡∏à‡∏≤‡∏Å config module")
                except ImportError:
                    # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                    class DefaultSettings:
                        trading_mode = "LIVE"
                        symbol = "XAUUSD"
                        high_frequency_mode = True
                        daily_volume_target_min = 50.0
                        daily_volume_target_max = 100.0
                        recovery_mandatory = True
                        use_stop_loss = False
                    
                    self.settings = DefaultSettings()
                    self.logger.warning("‚ö†Ô∏è ‡πÉ‡∏ä‡πâ Default Settings")
            
            self.components['settings'].instance = self.settings
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: {e}")
            return False
    
    def _load_error_handler(self) -> bool:
        """‡πÇ‡∏´‡∏•‡∏î Error Handler"""
        try:
            self.error_handler.setup_global_exception_handling()
            self.components['error_handler'].instance = self.error_handler
            return True
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Error Handler: {e}")
            return False
    
    def _load_market_analyzer(self) -> bool:
        """‡πÇ‡∏´‡∏•‡∏î Market Analyzer"""
        try:
            # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å market_intelligence
            market_analyzer_module = safe_import('market_intelligence.market_analyzer')
            if market_analyzer_module and hasattr(market_analyzer_module, 'get_market_analyzer'):
                self.market_analyzer = market_analyzer_module.get_market_analyzer()
                self.components['market_analyzer'].instance = self.market_analyzer
                self.logger.info("‚úÖ ‡πÇ‡∏´‡∏•‡∏î Real Market Analyzer")
                return True
            else:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Mock Market Analyzer
                self.market_analyzer = MockMarketAnalyzer()
                self.components['market_analyzer'].instance = self.market_analyzer
                self.logger.warning("‚ö†Ô∏è ‡πÉ‡∏ä‡πâ Mock Market Analyzer")
                return True
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Market Analyzer: {e}")
            return False
    
    def _load_signal_generator(self) -> bool:
        """‡πÇ‡∏´‡∏•‡∏î Signal Generator"""
        try:
            # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å adaptive_entries
            signal_generator_module = safe_import('adaptive_entries.signal_generator')
            if signal_generator_module and hasattr(signal_generator_module, 'get_intelligent_signal_generator'):
                self.signal_generator = signal_generator_module.get_intelligent_signal_generator()
                self.components['signal_generator'].instance = self.signal_generator
                self.logger.info("‚úÖ ‡πÇ‡∏´‡∏•‡∏î Real Signal Generator")
                return True
            else:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Mock Signal Generator
                self.signal_generator = MockSignalGenerator()
                self.components['signal_generator'].instance = self.signal_generator
                self.logger.warning("‚ö†Ô∏è ‡πÉ‡∏ä‡πâ Mock Signal Generator")
                return True
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Signal Generator: {e}")
            return False
    
    def _load_recovery_engine(self) -> bool:
        """‡πÇ‡∏´‡∏•‡∏î Recovery Engine"""
        try:
            # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å intelligent_recovery
            recovery_module = safe_import('intelligent_recovery.recovery_engine')
            if recovery_module and hasattr(recovery_module, 'get_recovery_engine'):
                self.recovery_engine = recovery_module.get_recovery_engine()
                self.components['recovery_engine'].instance = self.recovery_engine
                self.logger.info("‚úÖ ‡πÇ‡∏´‡∏•‡∏î Real Recovery Engine")
                return True
            else:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Mock Recovery Engine
                self.recovery_engine = MockRecoveryEngine()
                self.components['recovery_engine'].instance = self.recovery_engine
                self.logger.warning("‚ö†Ô∏è ‡πÉ‡∏ä‡πâ Mock Recovery Engine")
                return True
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Recovery Engine: {e}")
            return False
    
    def _load_position_tracker(self) -> bool:
        """‡πÇ‡∏´‡∏•‡∏î Position Tracker"""
        try:
            # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å position_management
            position_module = safe_import('position_management.position_tracker')
            if position_module and hasattr(position_module, 'get_position_tracker'):
                self.position_tracker = position_module.get_position_tracker()
                self.components['position_tracker'].instance = self.position_tracker
                self.logger.info("‚úÖ ‡πÇ‡∏´‡∏•‡∏î Real Position Tracker")
                return True
            else:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Mock Position Tracker
                self.position_tracker = MockPositionTracker()
                self.components['position_tracker'].instance = self.position_tracker
                self.logger.warning("‚ö†Ô∏è ‡πÉ‡∏ä‡πâ Mock Position Tracker")
                return True
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Position Tracker: {e}")
            return False
    
    def _load_order_executor(self) -> bool:
        """‡πÇ‡∏´‡∏•‡∏î Order Executor"""
        try:
            # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å mt5_integration
            executor_module = safe_import('mt5_integration.order_executor')
            if executor_module and hasattr(executor_module, 'get_smart_order_executor'):
                self.order_executor = executor_module.get_smart_order_executor()
                self.components['order_executor'].instance = self.order_executor
                self.logger.info("‚úÖ ‡πÇ‡∏´‡∏•‡∏î Real Order Executor")
                return True
            else:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Mock Order Executor
                self.order_executor = MockOrderExecutor()
                self.components['order_executor'].instance = self.order_executor
                self.logger.warning("‚ö†Ô∏è ‡πÉ‡∏ä‡πâ Mock Order Executor")
                return True
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Order Executor: {e}")
            return False
    
    def _load_performance_tracker(self) -> bool:
        """‡πÇ‡∏´‡∏•‡∏î Performance Tracker"""
        try:
            # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å analytics_engine
            performance_module = safe_import('analytics_engine.performance_tracker')
            if performance_module and hasattr(performance_module, 'get_performance_tracker'):
                self.performance_tracker = performance_module.get_performance_tracker()
                self.components['performance_tracker'].instance = self.performance_tracker
                self.logger.info("‚úÖ ‡πÇ‡∏´‡∏•‡∏î Real Performance Tracker")
                return True
            else:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Mock Performance Tracker
                self.performance_tracker = MockPerformanceTracker()
                self.components['performance_tracker'].instance = self.performance_tracker
                self.logger.warning("‚ö†Ô∏è ‡πÉ‡∏ä‡πâ Mock Performance Tracker")
                return True
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Performance Tracker: {e}")
            return False
        
   
    def start_trading(self) -> bool:
        """üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        if self.system_state != SystemState.READY:
            self.logger.error("‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ")
            return False
        
        if self.trading_active:
            self.logger.warning("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return True
        
        try:
            self.logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î...")
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
            components_started = 0
            
            # 1. Market Analyzer
            if self.market_analyzer and hasattr(self.market_analyzer, 'start_analysis'):
                if self.market_analyzer.start_analysis():
                    components_started += 1
                    self.components['market_analyzer'].status = ComponentStatus.RUNNING
                    self.components['market_analyzer'].start_time = datetime.now()
            
            # 2. Position Tracker
            if self.position_tracker and hasattr(self.position_tracker, 'start_position_tracking'):
                if self.position_tracker.start_position_tracking():
                    components_started += 1
                    self.components['position_tracker'].status = ComponentStatus.RUNNING
                    self.components['position_tracker'].start_time = datetime.now()
            
            # 3. Order Executor
            if self.order_executor and hasattr(self.order_executor, 'start_order_execution'):
                if self.order_executor.start_order_execution():
                    components_started += 1
                    self.components['order_executor'].status = ComponentStatus.RUNNING
                    self.components['order_executor'].start_time = datetime.now()
            
            # 4. Recovery Engine
            if self.recovery_engine and hasattr(self.recovery_engine, 'start_recovery_system'):
                if self.recovery_engine.start_recovery_system():
                    components_started += 1
                    self.components['recovery_engine'].status = ComponentStatus.RUNNING
                    self.components['recovery_engine'].start_time = datetime.now()
            
            # 5. Performance Tracker
            if self.performance_tracker and hasattr(self.performance_tracker, 'start_performance_tracking'):
                if self.performance_tracker.start_performance_tracking():
                    components_started += 1
                    self.components['performance_tracker'].status = ComponentStatus.RUNNING
                    self.components['performance_tracker'].start_time = datetime.now()
            
            # 6. Signal Generator (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
            if self.signal_generator and hasattr(self.signal_generator, 'start_signal_generation'):
                if self.signal_generator.start_signal_generation():
                    components_started += 1
                    self.components['signal_generator'].status = ComponentStatus.RUNNING
                    self.components['signal_generator'].start_time = datetime.now()
            
            self.metrics.components_running = components_started
            
            if components_started >= 3:  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 components ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                self.trading_active = True
                self.system_state = SystemState.RUNNING
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏° system monitoring
                self._start_system_monitoring()
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏° main trading loop
                self._start_trading_loop()
                
                self.logger.info(f"‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Components ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {components_started}")
                return True
            else:
                self.logger.error(f"‚ùå Components ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {components_started}")
                return False
        
        except Exception as e:
            self.logger.error(f"üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î: {e}")
            traceback.print_exc()
            return False
    
    def stop_trading(self):
        """üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        if not self.trading_active:
            self.logger.info("‚ÑπÔ∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà")
            return
        
        try:
            self.logger.info("üõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î...")
            self.system_state = SystemState.STOPPING
            
            # ‡∏´‡∏¢‡∏∏‡∏î trading loop
            self.shutdown_event.set()
            
            # ‡∏´‡∏¢‡∏∏‡∏î components ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            components_to_stop = [
                ('signal_generator', 'stop_signal_generation'),
                ('performance_tracker', 'stop_performance_tracking'),
                ('recovery_engine', 'stop_recovery_system'),
                ('order_executor', 'stop_order_execution'),
                ('position_tracker', 'stop_position_tracking'),
                ('market_analyzer', 'stop_analysis')
            ]
            
            for component_name, stop_method in components_to_stop:
                try:
                    component = getattr(self, component_name)
                    if component and hasattr(component, stop_method):
                        getattr(component, stop_method)()
                        self.components[component_name].status = ComponentStatus.STOPPED
                        self.logger.info(f"üõë ‡∏´‡∏¢‡∏∏‡∏î {component_name}")
                except Exception as e:
                    self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î {component_name}: {e}")
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ threads ‡∏´‡∏¢‡∏∏‡∏î
            if self.system_thread and self.system_thread.is_alive():
                self.system_thread.join(timeout=10.0)
            
            if self.monitoring_thread and self.monitoring_thread.is_alive():
                self.monitoring_thread.join(timeout=5.0)
            
            self.trading_active = False
            self.system_state = SystemState.STOPPED
            self.metrics.components_running = 0
            
            self.logger.info("‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
        except Exception as e:
            self.logger.error(f"üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î: {e}")
            traceback.print_exc()
    
    def _start_system_monitoring(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö monitoring"""
        if self.monitoring_thread and self.monitoring_thread.is_alive():
            return
        
        self.monitoring_thread = threading.Thread(
            target=self._system_monitoring_loop,
            daemon=True,
            name="SystemMonitoring"
        )
        self.monitoring_thread.start()
        self.logger.info("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö monitoring")
    
    def _system_monitoring_loop(self):
        """‡∏•‡∏π‡∏õ monitoring ‡∏£‡∏∞‡∏ö‡∏ö"""
        while not self.shutdown_event.is_set() and self.trading_active:
            try:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó system metrics
                self._update_system_metrics()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö health ‡∏Ç‡∏≠‡∏á components
                self._check_components_health()
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó performance metrics
                self._update_performance_metrics()
                
                # ‡∏û‡∏±‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                self.shutdown_event.wait(30)
                
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô monitoring loop: {e}")
                self.shutdown_event.wait(60)
    
    def _start_trading_loop(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° main trading loop"""
        if self.system_thread and self.system_thread.is_alive():
            return
        
        self.system_thread = threading.Thread(
            target=self._main_trading_loop,
            daemon=True,
            name="MainTradingLoop"
        )
        self.system_thread.start()
        self.logger.info("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° main trading loop")
    
    def _main_trading_loop(self):
        """‡∏•‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å"""
        self.logger.info("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° main trading loop")
        
        while not self.shutdown_event.is_set() and self.trading_active:
            try:
                # ‡∏î‡∏∂‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏à‡∏≤‡∏Å Signal Generator
                if self.signal_generator:
                    signal = self._get_next_trading_signal()
                    
                    if signal:
                        self.logger.info(f"üìä ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {signal.get('signal_type', 'UNKNOWN')}")
                        
                        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
                        if self._should_execute_signal(signal):
                            self._execute_trading_signal(signal)
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó statistics
                    self.metrics.signals_generated += 1
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ positions
                self._manage_existing_positions()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery operations
                self._check_recovery_operations()
                
                # ‡∏û‡∏±‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
                self.shutdown_event.wait(2)
                
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô trading loop: {e}")
                traceback.print_exc()
                self.shutdown_event.wait(10)
        
        self.logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î main trading loop")
    
    def _get_next_trading_signal(self):
        """‡∏î‡∏∂‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"""
        try:
            if hasattr(self.signal_generator, 'get_next_signal'):
                return self.signal_generator.get_next_signal(timeout=1.0)
            else:
                # Mock signal generation
                return self.signal_generator.get_next_signal()
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {e}")
            return None
    
    def _should_execute_signal(self, signal) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£ execute ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        if not signal:
            return False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö confidence threshold
        confidence = signal.get('confidence', 0.0)
        if confidence < 0.5:
            self.logger.info(f"‚ö†Ô∏è Confidence ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: {confidence}")
            return False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö spread (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        max_spread = getattr(self.settings, 'max_spread', 3.0)
        current_spread = signal.get('spread', 0.0)
        if current_spread > max_spread:
            self.logger.info(f"‚ö†Ô∏è Spread ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: {current_spread}")
            return False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô positions ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if self.position_tracker:
            open_positions = self._get_open_positions_count()
            max_positions = getattr(self.settings, 'max_positions_total', 100)
            if open_positions >= max_positions:
                self.logger.info(f"‚ö†Ô∏è ‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î positions: {open_positions}")
                return False
        
        return True
    
    def _execute_trading_signal(self, signal):
        """Execute ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            if not self.order_executor:
                self.logger.error("‚ùå Order Executor ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                return
            
            symbol = signal.get('symbol', 'XAUUSD')
            order_type = signal.get('signal_type', 'BUY')
            volume = signal.get('volume', 0.01)
            comment = f"AUTO_{signal.get('signal_id', 'UNKNOWN')}"
            
            # Execute order
            if hasattr(self.order_executor, 'execute_market_order'):
                result = self.order_executor.execute_market_order(symbol, order_type, volume, comment)
            else:
                result = self.order_executor.execute_market_order(symbol, order_type, volume, comment)
            
            if result:
                self.logger.info(f"‚úÖ Execute ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {result.get('ticket', 'UNKNOWN')}")
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° position ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
                if self.position_tracker and hasattr(self.position_tracker, 'add_position'):
                    self.position_tracker.add_position(result)
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó statistics
                self.metrics.orders_executed += 1
                
                # Mark signal as executed
                if hasattr(self.signal_generator, 'mark_signal_executed'):
                    self.signal_generator.mark_signal_executed(
                        signal.get('signal_id', ''),
                        result.get('price', 0.0)
                    )
            else:
                self.logger.warning(f"‚ùå Execute ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {signal.get('signal_id', 'UNKNOWN')}")
                
        except Exception as e:
            self.logger.error(f"üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô execute signal: {e}")
            traceback.print_exc()
    
    def _manage_existing_positions(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ positions ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
        try:
            if not self.position_tracker:
                return
            
            if hasattr(self.position_tracker, 'get_open_positions'):
                open_positions = self.position_tracker.get_open_positions()
            else:
                open_positions = []
            
            for position in open_positions:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á recovery ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if self._should_add_to_recovery(position):
                    self._add_position_to_recovery(position)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î position (‡∏Å‡∏≥‡πÑ‡∏£)
                elif self._should_close_position(position):
                    self._close_position(position)
                    
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ positions: {e}")
    
    def _should_add_to_recovery(self, position) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° position ‡πÄ‡∏Ç‡πâ‡∏≤ recovery ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ position ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        current_profit = position.get('profit', 0.0)
        entry_price = position.get('open_price', 0.0)
        volume = position.get('volume', 0.01)
        
        # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤ recovery: ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50 pips ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô < -$10
        loss_threshold = -10.0  # $10
        
        if current_profit < loss_threshold:
            self.logger.info(f"üîÑ Position {position.get('ticket', 'UNKNOWN')} ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç Recovery - Loss: ${abs(current_profit)}")
            return True
        
        return False
    
    def _add_position_to_recovery(self, position):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° position ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö recovery"""
        try:
            if not self.recovery_engine:
                self.logger.error("‚ùå Recovery Engine ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                return
            
            if hasattr(self.recovery_engine, 'add_position_to_recovery'):
                self.recovery_engine.add_position_to_recovery(position)
                self.metrics.recovery_operations += 1
                self.logger.info(f"üîÑ ‡πÄ‡∏û‡∏¥‡πà‡∏° position {position.get('ticket', 'UNKNOWN')} ‡πÄ‡∏Ç‡πâ‡∏≤ Recovery")
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° position ‡πÄ‡∏Ç‡πâ‡∏≤ recovery: {e}")
    
    def _should_close_position(self, position) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î position ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        current_profit = position.get('profit', 0.0)
        
        # ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ $5
        profit_threshold = 5.0
        
        if current_profit > profit_threshold:
            return True
        
        # ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        open_time = position.get('open_time')
        if open_time and isinstance(open_time, datetime):
            time_diff = datetime.now() - open_time
            if time_diff.total_seconds() > 24 * 3600:  # 24 hours
                return True
        
        return False
    
    def _close_position(self, position):
        """‡∏õ‡∏¥‡∏î position"""
        try:
            ticket = position.get('ticket')
            current_profit = position.get('profit', 0.0)
            
            if self.position_tracker and hasattr(self.position_tracker, 'close_position'):
                success = self.position_tracker.close_position(ticket, profit=current_profit)
                
                if success:
                    self.logger.info(f"‚úÖ ‡∏õ‡∏¥‡∏î position {ticket} - ‡∏Å‡∏≥‡πÑ‡∏£: ${current_profit}")
                    
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏á‡∏≤‡∏ô
                    if self.performance_tracker and hasattr(self.performance_tracker, 'record_trade'):
                        self.performance_tracker.record_trade(current_profit)
                    
                    # Mark signal as successful ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡πÑ‡∏£
                    if current_profit > 0 and hasattr(self.signal_generator, 'mark_signal_successful'):
                        comment = position.get('comment', '')
                        if 'AUTO_' in comment:
                            signal_id = comment.replace('AUTO_', '')
                            self.signal_generator.mark_signal_successful(signal_id, current_profit)
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î position: {e}")
    
    def _check_recovery_operations(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery operations"""
        try:
            if not self.recovery_engine:
                return
            
            if hasattr(self.recovery_engine, 'get_recovery_status'):
                recovery_status = self.recovery_engine.get_recovery_status()
                
                positions_in_recovery = recovery_status.get('positions_in_recovery', 0)
                if positions_in_recovery > 0:
                    self.logger.info(f"üîÑ Recovery: {positions_in_recovery} positions ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å recover")
                    
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö recovery: {e}")
    
    def _get_open_positions_count(self) -> int:
        """‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô positions ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"""
        try:
            if self.position_tracker and hasattr(self.position_tracker, 'get_open_positions'):
                positions = self.position_tracker.get_open_positions()
                return len(positions) if positions else 0
            return 0
        except:
            return 0
    
    def _update_system_metrics(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó system metrics"""
        try:
            current_time = datetime.now()
            self.metrics.last_update = current_time
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì uptime
            uptime = current_time - self.metrics.start_time
            self.metrics.uptime_seconds = int(uptime.total_seconds())
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó component running count
            running_count = 0
            for component_info in self.components.values():
                if component_info.status == ComponentStatus.RUNNING:
                    running_count += 1
            self.metrics.components_running = running_count
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó system statistics
            self.system_statistics['total_uptime'] = self.metrics.uptime_seconds
            self.system_statistics['last_health_check'] = current_time
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó system metrics: {e}")
    
    def _check_components_health(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö health ‡∏Ç‡∏≠‡∏á components"""
        try:
            health_status = {}
            
            for name, component_info in self.components.items():
                if component_info.instance:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö health ‡πÅ‡∏ï‡πà‡∏•‡∏∞ component
                    if hasattr(component_info.instance, 'get_health_status'):
                        health = component_info.instance.get_health_status()
                    else:
                        # Default health check
                        if component_info.status == ComponentStatus.RUNNING:
                            health = "HEALTHY"
                        elif component_info.status == ComponentStatus.ERROR:
                            health = "ERROR"
                        else:
                            health = "UNKNOWN"
                    
                    health_status[name] = health
                    component_info.health_status = health
                    component_info.last_update = datetime.now()
            
            self.system_statistics['components_health'] = health_status
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö components health: {e}")
    
    def _update_performance_metrics(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó performance metrics"""
        try:
            performance_data = {}
            
            # Signal Generator metrics
            if self.signal_generator and hasattr(self.signal_generator, 'get_statistics'):
                performance_data['signal_generator'] = self.signal_generator.get_statistics()
            
            # Position Tracker metrics
            if self.position_tracker and hasattr(self.position_tracker, 'get_position_summary'):
                performance_data['position_tracker'] = self.position_tracker.get_position_summary()
            
            # Recovery Engine metrics
            if self.recovery_engine and hasattr(self.recovery_engine, 'get_recovery_status'):
                performance_data['recovery_engine'] = self.recovery_engine.get_recovery_status()
            
            # Order Executor metrics
            if self.order_executor and hasattr(self.order_executor, 'get_execution_statistics'):
                performance_data['order_executor'] = self.order_executor.get_execution_statistics()
            
            # Performance Tracker metrics
            if self.performance_tracker and hasattr(self.performance_tracker, 'get_performance_summary'):
                performance_data['performance_tracker'] = self.performance_tracker.get_performance_summary()
            
            self.system_statistics['performance_metrics'] = performance_data
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó performance metrics: {e}")
    
    def get_system_status(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            # Basic system info
            current_time = datetime.now()
            uptime = current_time - self.metrics.start_time
            
            # Component status summary
            component_status_summary = {}
            for name, info in self.components.items():
                component_status_summary[name] = {
                    'status': info.status.value,
                    'health': info.health_status,
                    'load_time': info.load_time.strftime('%H:%M:%S') if info.load_time else None,
                    'start_time': info.start_time.strftime('%H:%M:%S') if info.start_time else None,
                    'error': info.error_message
                }
            
            # Performance summary
            performance_summary = {}
            if self.system_statistics.get('performance_metrics'):
                perf_data = self.system_statistics['performance_metrics']
                
                # Signal Generator summary
                if 'signal_generator' in perf_data:
                    sg_data = perf_data['signal_generator']
                    performance_summary['signals'] = {
                        'generated_today': sg_data.get('signals_generated_today', 0),
                        'executed_today': sg_data.get('signals_executed_today', 0),
                        'success_rate': sg_data.get('success_rate_percent', 0.0),
                        'queue_size': sg_data.get('queue_size', 0)
                    }
                
                # Position summary
                if 'position_tracker' in perf_data:
                    pt_data = perf_data['position_tracker']
                    performance_summary['positions'] = {
                        'open_count': pt_data.get('open_positions_count', 0),
                        'total_profit': pt_data.get('total_profit', 0.0),
                        'open_volume': pt_data.get('open_volume', 0.0)
                    }
                
                # Recovery summary
                if 'recovery_engine' in perf_data:
                    re_data = perf_data['recovery_engine']
                    performance_summary['recovery'] = {
                        'positions_in_recovery': re_data.get('positions_in_recovery', 0),
                        'recovery_operations': re_data.get('recovery_operations', 0)
                    }
            
            return {
                # System Overview
                'system_state': self.system_state.value,
                'trading_active': self.trading_active,
                'auto_trading_enabled': self.auto_trading_enabled,
                
                # Time & Uptime
                'current_time': current_time.strftime('%Y-%m-%d %H:%M:%S'),
                'start_time': self.metrics.start_time.strftime('%Y-%m-%d %H:%M:%S'),
                'uptime_hours': round(uptime.total_seconds() / 3600, 2),
                'uptime_formatted': str(uptime).split('.')[0],  # Remove microseconds
                
                # Components
                'components_loaded': self.metrics.components_loaded,
                'components_running': self.metrics.components_running,
                'total_components': self.metrics.total_components,
                'components_status': component_status_summary,
                
                # Performance
                'performance_summary': performance_summary,
                
                # System Metrics
                'system_metrics': {
                    'signals_generated': self.metrics.signals_generated,
                    'orders_executed': self.metrics.orders_executed,
                    'recovery_operations': self.metrics.recovery_operations,
                    'errors_count': self.metrics.errors_count
                },
                
                # Health Check
                'last_health_check': self.system_statistics.get('last_health_check', '').strftime('%H:%M:%S') if self.system_statistics.get('last_health_check') else 'Never'
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö: {e}")
            return {
                'system_state': 'ERROR',
                'error_message': str(e),
                'trading_active': False
            }
    
    def get_detailed_performance(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• performance ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        try:
            detailed_performance = {}
            
            # Signal Generator Performance
            if self.signal_generator and hasattr(self.signal_generator, 'get_strategy_performance'):
                detailed_performance['signal_strategies'] = self.signal_generator.get_strategy_performance()
                
            if self.signal_generator and hasattr(self.signal_generator, 'get_session_analysis'):
                detailed_performance['session_analysis'] = self.signal_generator.get_session_analysis()
            
            # Position Performance
            if self.position_tracker and hasattr(self.position_tracker, 'get_detailed_summary'):
                detailed_performance['positions_detailed'] = self.position_tracker.get_detailed_summary()
            
            # Recovery Performance
            if self.recovery_engine and hasattr(self.recovery_engine, 'get_detailed_status'):
                detailed_performance['recovery_detailed'] = self.recovery_engine.get_detailed_status()
            
            # Overall Performance
            if self.performance_tracker and hasattr(self.performance_tracker, 'get_detailed_metrics'):
                detailed_performance['overall_metrics'] = self.performance_tracker.get_detailed_metrics()
            
            return detailed_performance
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á detailed performance: {e}")
            return {}
    
    def enable_auto_trading(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô auto trading"""
        self.auto_trading_enabled = True
        self.logger.info("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Auto Trading")
    
    def disable_auto_trading(self):
        """‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô auto trading"""
        self.auto_trading_enabled = False
        self.logger.info("‚è∏Ô∏è ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Auto Trading")
    
    def restart_component(self, component_name: str) -> bool:
        """‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó component ‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        try:
            if component_name not in self.components:
                self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö component: {component_name}")
                return False
            
            self.logger.info(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó {component_name}...")
            
            # ‡∏´‡∏¢‡∏∏‡∏î component
            component = getattr(self, component_name, None)
            if component:
                # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                stop_methods = {
                    'market_analyzer': 'stop_analysis',
                    'signal_generator': 'stop_signal_generation',
                    'recovery_engine': 'stop_recovery_system',
                    'position_tracker': 'stop_position_tracking',
                    'order_executor': 'stop_order_execution',
                    'performance_tracker': 'stop_performance_tracking'
                }
                
                stop_method = stop_methods.get(component_name)
                if stop_method and hasattr(component, stop_method):
                    getattr(component, stop_method)()
                    self.logger.info(f"üõë ‡∏´‡∏¢‡∏∏‡∏î {component_name}")
            
            # ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
            success = self._load_component(component_name)
            
            if success:
                self.components[component_name].status = ComponentStatus.LOADED
                self.components[component_name].load_time = datetime.now()
                self.logger.info(f"‚úÖ ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó {component_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                if self.trading_active:
                    start_methods = {
                        'market_analyzer': 'start_analysis',
                        'signal_generator': 'start_signal_generation',
                        'recovery_engine': 'start_recovery_system',
                        'position_tracker': 'start_position_tracking',
                        'order_executor': 'start_order_execution',
                        'performance_tracker': 'start_performance_tracking'
                    }
                    
                    start_method = start_methods.get(component_name)
                    new_component = getattr(self, component_name, None)
                    if start_method and new_component and hasattr(new_component, start_method):
                        if getattr(new_component, start_method)():
                            self.components[component_name].status = ComponentStatus.RUNNING
                            self.components[component_name].start_time = datetime.now()
                            self.logger.info(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° {component_name} ‡πÉ‡∏´‡∏°‡πà")
                
                return True
            else:
                self.logger.error(f"‚ùå ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó {component_name} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                return False
                
        except Exception as e:
            self.logger.error(f"üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó {component_name}: {e}")
            traceback.print_exc()
            return False

    def force_close_all_positions(self):
        """‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î positions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            self.logger.warning("‚ö†Ô∏è ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î positions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
            
            if not self.position_tracker:
                self.logger.error("‚ùå Position Tracker ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                return
            
            if hasattr(self.position_tracker, 'get_open_positions'):
                open_positions = self.position_tracker.get_open_positions()
                
                if not open_positions:
                    self.logger.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ positions ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà")
                    return
                
                closed_count = 0
                for position in open_positions:
                    try:
                        ticket = position.get('ticket')
                        current_profit = position.get('profit', 0.0)
                        
                        if hasattr(self.position_tracker, 'close_position'):
                            success = self.position_tracker.close_position(ticket, profit=current_profit)
                            if success:
                                closed_count += 1
                                self.logger.info(f"‚úÖ ‡∏õ‡∏¥‡∏î position {ticket} (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
                    
                    except Exception as e:
                        self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î position {position.get('ticket', 'UNKNOWN')}: {e}")
                
                self.logger.info(f"‚úÖ ‡∏õ‡∏¥‡∏î positions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {closed_count}/{len(open_positions)}")
            
        except Exception as e:
            self.logger.error(f"üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î positions: {e}")
            traceback.print_exc()
    
    def emergency_stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô"""
        try:
            self.logger.critical("üö® EMERGENCY STOP - ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô!")
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            self.trading_active = False
            self.auto_trading_enabled = False
            self.system_state = SystemState.ERROR
            
            # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏¢‡∏∏‡∏î
            self.shutdown_event.set()
            
            # ‡∏´‡∏¢‡∏∏‡∏î Signal Generator ‡∏Å‡πà‡∏≠‡∏ô
            if self.signal_generator and hasattr(self.signal_generator, 'stop_signal_generation'):
                self.signal_generator.stop_signal_generation()
                self.logger.critical("üõë ‡∏´‡∏¢‡∏∏‡∏î Signal Generator ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô")
            
            # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î positions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            self.force_close_all_positions()
            
            # ‡∏´‡∏¢‡∏∏‡∏î components ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            components_to_stop = [
                'order_executor', 'recovery_engine', 'position_tracker', 
                'performance_tracker', 'market_analyzer'
            ]
            
            for component_name in components_to_stop:
                try:
                    component = getattr(self, component_name, None)
                    if component:
                        stop_methods = {
                            'market_analyzer': 'stop_analysis',
                            'recovery_engine': 'stop_recovery_system',
                            'position_tracker': 'stop_position_tracking',
                            'order_executor': 'stop_order_execution',
                            'performance_tracker': 'stop_performance_tracking'
                        }
                        
                        stop_method = stop_methods.get(component_name)
                        if stop_method and hasattr(component, stop_method):
                            getattr(component, stop_method)()
                            self.components[component_name].status = ComponentStatus.STOPPED
                
                except Exception as e:
                    self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î {component_name} ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô: {e}")
            
            self.logger.critical("üö® EMERGENCY STOP ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
        except Exception as e:
            self.logger.critical(f"üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Emergency Stop: {e}")
            traceback.print_exc()
    
    def reset_system(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            self.logger.info("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö...")
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô
            if self.trading_active:
                self.stop_trading()
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
            time.sleep(2)
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï metrics
            self.metrics = SystemMetrics()
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï statistics
            self.system_statistics = {
                'start_time': datetime.now(),
                'total_uptime': 0,
                'components_health': {},
                'last_health_check': None,
                'performance_metrics': {},
                'error_log': deque(maxlen=100)
            }
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï component status
            for component_info in self.components.values():
                component_info.status = ComponentStatus.NOT_LOADED
                component_info.error_message = None
                component_info.load_time = None
                component_info.start_time = None
                component_info.health_status = "UNKNOWN"
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
            self.system_state = SystemState.INITIALIZING
            self.trading_active = False
            self.auto_trading_enabled = False
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï shutdown event
            self.shutdown_event.clear()
            
            self.logger.info("‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
        except Exception as e:
            self.logger.error(f"üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö: {e}")
            traceback.print_exc()
    
    def export_system_logs(self, filename: Optional[str] = None) -> str:
        """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å system logs"""
        try:
            if filename is None:
                filename = f"system_logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            export_data = {
                'export_timestamp': datetime.now().isoformat(),
                'system_status': self.get_system_status(),
                'detailed_performance': self.get_detailed_performance(),
                'system_statistics': {
                    'start_time': self.system_statistics['start_time'].isoformat() if isinstance(self.system_statistics['start_time'], datetime) else str(self.system_statistics['start_time']),
                    'total_uptime': self.system_statistics['total_uptime'],
                    'components_health': self.system_statistics['components_health'],
                    'last_health_check': self.system_statistics['last_health_check'].isoformat() if isinstance(self.system_statistics['last_health_check'], datetime) else str(self.system_statistics['last_health_check']),
                    'error_log': list(self.system_statistics['error_log'])
                },
                'components_info': {}
            }
            
            # Component details
            for name, info in self.components.items():
                export_data['components_info'][name] = {
                    'status': info.status.value,
                    'health_status': info.health_status,
                    'error_message': info.error_message,
                    'load_time': info.load_time.isoformat() if info.load_time else None,
                    'start_time': info.start_time.isoformat() if info.start_time else None,
                    'last_update': info.last_update.isoformat() if info.last_update else None
                }
            
            # Individual component exports
            if self.signal_generator and hasattr(self.signal_generator, 'export_signal_history'):
                signal_history_file = self.signal_generator.export_signal_history()
                if signal_history_file:
                    export_data['signal_history_file'] = signal_history_file
            
            # Write main export file
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False, default=str)
            
            self.logger.info(f"üìÅ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å system logs: {filename}")
            return filename
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å system logs: {e}")
            return ""
    
    def get_component_instance(self, component_name: str):
        """‡∏î‡∏∂‡∏á instance ‡∏Ç‡∏≠‡∏á component"""
        return getattr(self, component_name, None)
    
    def is_trading_active(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.trading_active
    
    def is_system_ready(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.system_state == SystemState.READY or self.system_state == SystemState.RUNNING
    
    def get_uptime(self) -> timedelta:
        """‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        return datetime.now() - self.metrics.start_time
    
    def get_system_health(self) -> str:
        """‡∏î‡∏∂‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°"""
        if self.system_state == SystemState.ERROR:
            return "ERROR"
        elif self.system_state == SystemState.RUNNING and self.trading_active:
            return "HEALTHY"
        elif self.system_state == SystemState.READY:
            return "READY"
        elif self.system_state == SystemState.INITIALIZING:
            return "INITIALIZING"
        else:
            return "UNKNOWN"
    
    def __del__(self):
        """Destructor - ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ object ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö"""
        try:
            if self.trading_active:
                self.stop_trading()
        except:
            pass

# ===============================
# GLOBAL INSTANCE MANAGEMENT
# ===============================

_trading_system_instance: Optional[IntelligentTradingSystem] = None

def get_intelligent_trading_system(settings=None, logger=None) -> IntelligentTradingSystem:
    """‡∏î‡∏∂‡∏á Trading System instance (Singleton pattern)"""
    global _trading_system_instance
    if _trading_system_instance is None:
        _trading_system_instance = IntelligentTradingSystem(settings, logger)
    return _trading_system_instance

def reset_trading_system():
    """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Trading System instance"""
    global _trading_system_instance
    if _trading_system_instance:
        _trading_system_instance.emergency_stop()
        time.sleep(2)
    _trading_system_instance = None

# ===============================
# UTILITY FUNCTIONS
# ===============================

def create_trading_system_report(trading_system: IntelligentTradingSystem) -> Dict[str, Any]:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î"""
    try:
        system_status = trading_system.get_system_status()
        detailed_performance = trading_system.get_detailed_performance()
        
        # Component health summary
        components_health = system_status.get('components_status', {})
        healthy_components = sum(1 for comp in components_health.values() if comp.get('health') == 'HEALTHY')
        total_components = len(components_health)
        
        # Performance summary
        performance_summary = system_status.get('performance_summary', {})
        
        report = {
            'report_timestamp': datetime.now().isoformat(),
            'system_overview': {
                'system_state': system_status.get('system_state'),
                'trading_active': system_status.get('trading_active'),
                'uptime_formatted': system_status.get('uptime_formatted'),
                'health_score': f"{healthy_components}/{total_components}",
                'overall_health': trading_system.get_system_health()
            },
            'trading_performance': {
                'signals_today': performance_summary.get('signals', {}).get('generated_today', 0),
                'execution_rate': performance_summary.get('signals', {}).get('success_rate', 0),
                'open_positions': performance_summary.get('positions', {}).get('open_count', 0),
                'total_profit': performance_summary.get('positions', {}).get('total_profit', 0.0),
                'recovery_operations': performance_summary.get('recovery', {}).get('recovery_operations', 0)
            },
            'system_metrics': system_status.get('system_metrics', {}),
            'components_status': components_health,
            'detailed_performance': detailed_performance
        }
        
        return report
        
    except Exception as e:
        return {
            'report_timestamp': datetime.now().isoformat(),
            'error': f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {e}",
            'system_overview': {'overall_health': 'ERROR'}
        }

# ===============================
# TEST FUNCTIONS
# ===============================

def test_trading_system():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Trading System ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
    print("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Intelligent Trading System...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Trading System
    trading_system = IntelligentTradingSystem()
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô components
        print("\nüì¶ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Components...")
        components_loaded = trading_system.initialize_components()
        print(f"   Components ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {components_loaded}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
        print("\nüìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö...")
        system_status = trading_system.get_system_status()
        print(f"   System State: {system_status.get('system_state')}")
        print(f"   Components Running: {system_status.get('components_running')}")
        print(f"   System Health: {trading_system.get_system_health()}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        if trading_system.is_system_ready():
            print("\nüöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î...")
            success = trading_system.start_trading()
            print(f"   ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î: {'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if success else '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}")
            
            if success:
                # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                print("   ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                time.sleep(10)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏î
                updated_status = trading_system.get_system_status()
                print(f"   Trading Active: {updated_status.get('trading_active')}")
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
                print("\nüìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...")
                report = create_trading_system_report(trading_system)
                print(f"   ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {report['system_overview']['overall_health']}")
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î
                print("\nüõë ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î...")
                trading_system.stop_trading()
                print("   ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        
        print("\n‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Trading System ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        
    except Exception as e:
        print(f"\n‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")
        traceback.print_exc()
    
    finally:
        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
        if trading_system.trading_active:
            trading_system.emergency_stop()

def benchmark_trading_system():
   """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û Trading System"""
   print("‚ö° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û Trading System...")
   
   trading_system = IntelligentTradingSystem()
   
   try:
       # ‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î components
       start_time = time.time()
       components_loaded = trading_system.initialize_components()
       load_time = time.time() - start_time
       
       print(f"üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
       print(f"   ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏´‡∏•‡∏î Components: {load_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
       print(f"   Components ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {components_loaded}")
       
       # ‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
       start_time = time.time()
       for i in range(10):
           trading_system.get_system_status()
       status_time = (time.time() - start_time) / 10
       
       print(f"   ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {status_time*1000:.2f} ms")
       
       # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö memory usage (‡∏ñ‡πâ‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ)
       try:
           import psutil
           process = psutil.Process()
           memory_mb = process.memory_info().rss / 1024 / 1024
           print(f"   Memory Usage: {memory_mb:.1f} MB")
       except ImportError:
           print("   Memory Usage: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á psutil)")
       
   except Exception as e:
       print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {e}")

if __name__ == "__main__":
   test_trading_system()
   print("\n" + "="*60)
   benchmark_trading_system()

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MT5 CONNECTION MANAGER - ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MetaTrader 5
====================================================
‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MT5 ‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ MT5 ‡∏ó‡∏µ‡πà Login ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö auto-detect ‡πÅ‡∏•‡∏∞ reconnect

‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á:
- config/settings.py (‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MT5)
- utilities/professional_logger.py (logging)
- utilities/error_handler.py (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)
"""

import MetaTrader5 as mt5
import threading
import time
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, Tuple, List
from dataclasses import dataclass
from enum import Enum

class ConnectionStatus(Enum):
   """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
   DISCONNECTED = "DISCONNECTED"
   CONNECTING = "CONNECTING"
   CONNECTED = "CONNECTED"
   RECONNECTING = "RECONNECTING"
   ERROR = "ERROR"

class MT5ConnectionError(Exception):
   """Exception ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
   pass

@dataclass
class MT5AccountInfo:
   """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ MT5"""
   login: int
   name: str
   server: str
   currency: str
   balance: float
   equity: float
   margin: float
   margin_free: float
   margin_level: float
   profit: float
   company: str
   trade_allowed: bool
   trade_expert: bool
   leverage: int
   limit_orders: int
   margin_so_mode: int
   margin_so_call: float
   margin_so_so: float

@dataclass
class ConnectionMetrics:
   """‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
   connect_time: datetime
   last_ping: Optional[datetime] = None
   ping_count: int = 0
   reconnect_count: int = 0
   error_count: int = 0
   uptime_seconds: float = 0.0
   avg_response_time_ms: float = 0.0

class MT5Connector:
   """
   ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏´‡∏•‡∏±‡∏Å
   ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô MT5 ‡∏ó‡∏µ‡πà Login ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞ auto-reconnect
   """
   
   def __init__(self):
       # Setup basic properties
       self.status = ConnectionStatus.DISCONNECTED
       self.account_info: Optional[MT5AccountInfo] = None
       self.metrics = ConnectionMetrics(connect_time=datetime.now())
       
       # Threading
       self.connection_lock = threading.Lock()
       self.monitor_thread: Optional[threading.Thread] = None
       self.monitoring_active = False
       
       # Settings
       self.connection_timeout = 30
       self.reconnect_attempts = 5
       self.reconnect_delay = 5.0
       
       # Error tracking
       self.last_error: Optional[str] = None
       self.connection_callbacks: List[callable] = []
       
       print("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MT5 Connector (Auto-detect mode)")
   
   def connect(self, login: Optional[int] = None, 
               password: Optional[str] = None, 
               server: Optional[str] = None,
               path: Optional[str] = None) -> bool:
       """
       ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MT5 - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ MT5 ‡∏ó‡∏µ‡πà Login ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£ Login ‡πÉ‡∏´‡∏°‡πà
       """
       with self.connection_lock:
           try:
               self.status = ConnectionStatus.CONNECTING
               print("üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5...")
               
               # ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MT5 ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πà‡∏≠‡∏ô
               if self._try_existing_connection():
                   return True
               
               # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MT5 ‡πÉ‡∏´‡∏°‡πà
               print("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MT5 ‡πÉ‡∏´‡∏°‡πà...")
               return self._initialize_new_connection(login, password, server, path)
               
           except Exception as e:
               self.status = ConnectionStatus.ERROR
               self.last_error = str(e)
               print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
               return False
   
   def _try_existing_connection(self) -> bool:
       """‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"""
       try:
           # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ MT5 ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
           if not mt5.initialize():
               print("‚ö†Ô∏è MT5 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ initialize")
               return False
           
           # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
           terminal_info = mt5.terminal_info()
           if terminal_info is None:
               print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Terminal ‡πÑ‡∏î‡πâ")
               return False
           
           if not terminal_info.connected:
               print("‚ö†Ô∏è MT5 Terminal ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Server")
               return False
           
           # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
           account_info = mt5.account_info()
           if account_info is None:
               print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ")
               return False
           
           # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
           self.account_info = MT5AccountInfo(
               login=account_info.login,
               name=account_info.name,
               server=account_info.server,
               currency=account_info.currency,
               balance=account_info.balance,
               equity=account_info.equity,
               margin=account_info.margin,
               margin_free=account_info.margin_free,
               margin_level=account_info.margin_level,
               profit=account_info.profit,
               company=account_info.company,
               trade_allowed=account_info.trade_allowed,
               trade_expert=account_info.trade_expert,
               leverage=account_info.leverage,
               limit_orders=account_info.limit_orders,
               margin_so_mode=account_info.margin_so_mode,
               margin_so_call=account_info.margin_so_call,
               margin_so_so=account_info.margin_so_so
           )
           
           # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
           self.status = ConnectionStatus.CONNECTED
           self.metrics.connect_time = datetime.now()
           self.metrics.reconnect_count = 0
           
           # ‡πÄ‡∏£‡∏¥‡πà‡∏° monitoring thread
           self._start_connection_monitor()
           
           # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô callbacks
           self._notify_connection_callbacks(True)
           
           print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)")
           print(f"üìä Account: {self.account_info.login} Server: {self.account_info.server}")
           print(f"üí∞ Balance: {self.account_info.balance:.2f} {self.account_info.currency}")
           print(f"üèõÔ∏è Company: {self.account_info.company}")
           
           return True
           
       except Exception as e:
           print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ: {e}")
           return False
   
   def _initialize_new_connection(self, login: Optional[int], password: Optional[str], 
                                server: Optional[str], path: Optional[str]) -> bool:
       """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÉ‡∏´‡∏°‡πà"""
       try:
           # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
           if not all([login, password, server]):
               raise MT5ConnectionError(
                   "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î MT5 ‡πÅ‡∏•‡∏∞ Login ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏ login/password/server)"
               )
           
           # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MT5
           if path:
               if not mt5.initialize(path=path):
                   raise MT5ConnectionError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MT5 ‡πÑ‡∏î‡πâ: {mt5.last_error()}")
           else:
               if not mt5.initialize():
                   raise MT5ConnectionError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MT5 ‡πÑ‡∏î‡πâ: {mt5.last_error()}")
           
           # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
           if not mt5.login(login, password=password, server=server):
               error_code, error_desc = mt5.last_error()
               raise MT5ConnectionError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ: {error_desc} (Code: {error_code})")
           
           # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
           account_info = mt5.account_info()
           if account_info is None:
               raise MT5ConnectionError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ")
           
           # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (same as above)
           self.account_info = MT5AccountInfo(
               login=account_info.login,
               name=account_info.name,
               server=account_info.server,
               currency=account_info.currency,
               balance=account_info.balance,
               equity=account_info.equity,
               margin=account_info.margin,
               margin_free=account_info.margin_free,
               margin_level=account_info.margin_level,
               profit=account_info.profit,
               company=account_info.company,
               trade_allowed=account_info.trade_allowed,
               trade_expert=account_info.trade_expert,
               leverage=account_info.leverage,
               limit_orders=account_info.limit_orders,
               margin_so_mode=account_info.margin_so_mode,
               margin_so_call=account_info.margin_so_call,
               margin_so_so=account_info.margin_so_so
           )
           
           # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
           self.status = ConnectionStatus.CONNECTED
           self.metrics.connect_time = datetime.now()
           self.metrics.reconnect_count = 0
           
           # ‡πÄ‡∏£‡∏¥‡πà‡∏° monitoring thread
           self._start_connection_monitor()
           
           # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô callbacks
           self._notify_connection_callbacks(True)
           
           print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Login ‡πÉ‡∏´‡∏°‡πà)")
           print(f"üìä Account: {self.account_info.login} Server: {self.account_info.server}")
           print(f"üí∞ Balance: {self.account_info.balance:.2f} {self.account_info.currency}")
           
           return True
           
       except Exception as e:
           raise e
   
   def disconnect(self) -> bool:
       """‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
       with self.connection_lock:
           try:
               print("üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5...")
               
               # ‡∏´‡∏¢‡∏∏‡∏î monitoring
               self._stop_connection_monitor()
               
               # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
               mt5.shutdown()
               
               # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
               self.status = ConnectionStatus.DISCONNECTED
               self.account_info = None
               
               # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô callbacks
               self._notify_connection_callbacks(False)
               
               print("‚úÖ ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
               return True
               
           except Exception as e:
               print(f"‚ùå ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
               return False
   
   def is_connected(self) -> bool:
       """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
       if self.status != ConnectionStatus.CONNECTED:
           return False
       
       try:
           # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö terminal info
           terminal_info = mt5.terminal_info()
           return terminal_info is not None and terminal_info.connected
       except:
           return False
   
   def ping(self) -> Tuple[bool, float]:
       """
       ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
       Returns: (success, response_time_ms)
       """
       start_time = time.time()
       
       try:
           # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• terminal
           terminal_info = mt5.terminal_info()
           
           if terminal_info is not None and terminal_info.connected:
               response_time = (time.time() - start_time) * 1000  # convert to ms
               
               # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å
               self.metrics.last_ping = datetime.now()
               self.metrics.ping_count += 1
               
               # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average response time
               if self.metrics.ping_count == 1:
                   self.metrics.avg_response_time_ms = response_time
               else:
                   self.metrics.avg_response_time_ms = (
                       (self.metrics.avg_response_time_ms * (self.metrics.ping_count - 1) + response_time) 
                       / self.metrics.ping_count
                   )
               
               return True, response_time
           else:
               return False, 0.0
               
       except Exception as e:
           print(f"‚ö†Ô∏è Ping MT5 ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
           return False, 0.0
   
   def get_account_info(self, refresh: bool = False) -> Optional[MT5AccountInfo]:
       """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"""
       if not self.is_connected():
           return None
       
       if refresh or self.account_info is None:
           try:
               account_info = mt5.account_info()
               if account_info:
                   self.account_info = MT5AccountInfo(
                       login=account_info.login,
                       name=account_info.name,
                       server=account_info.server,
                       currency=account_info.currency,
                       balance=account_info.balance,
                       equity=account_info.equity,
                       margin=account_info.margin,
                       margin_free=account_info.margin_free,
                       margin_level=account_info.margin_level,
                       profit=account_info.profit,
                       company=account_info.company,
                       trade_allowed=account_info.trade_allowed,
                       trade_expert=account_info.trade_expert,
                       leverage=account_info.leverage,
                       limit_orders=account_info.limit_orders,
                       margin_so_mode=account_info.margin_so_mode,
                       margin_so_call=account_info.margin_so_call,
                       margin_so_so=account_info.margin_so_so
                   )
           except Exception as e:
               print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ: {e}")
               return None
       
       return self.account_info
   
   def get_connection_metrics(self) -> ConnectionMetrics:
       """‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
       if self.status == ConnectionStatus.CONNECTED:
           self.metrics.uptime_seconds = (datetime.now() - self.metrics.connect_time).total_seconds()
       
       return self.metrics
   
   def _start_connection_monitor(self):
       """‡πÄ‡∏£‡∏¥‡πà‡∏° monitoring thread"""
       if self.monitoring_active:
           return
       
       self.monitoring_active = True
       self.monitor_thread = threading.Thread(target=self._connection_monitor_loop, daemon=True)
       self.monitor_thread.start()
       print("üì° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Connection Monitor")
   
   def _stop_connection_monitor(self):
       """‡∏´‡∏¢‡∏∏‡∏î monitoring thread"""
       self.monitoring_active = False
       if self.monitor_thread and self.monitor_thread.is_alive():
           self.monitor_thread.join(timeout=2)
       print("üõë ‡∏´‡∏¢‡∏∏‡∏î Connection Monitor")
   
   def _connection_monitor_loop(self):
       """Loop ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monitor ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
       while self.monitoring_active:
           try:
               time.sleep(5)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
               
               if not self.monitoring_active:
                   break
               
               is_connected, response_time = self.ping()
               
               if not is_connected and self.status == ConnectionStatus.CONNECTED:
                   print("‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏∏‡∏î ‡∏Å‡∏≥‡∏•‡∏±‡∏á Reconnect...")
                   self.status = ConnectionStatus.ERROR
                   
                   # ‡∏•‡∏≠‡∏á reconnect
                   if self.reconnect():
                       print("‚úÖ Auto Reconnect ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                   else:
                       print("‚ùå Auto Reconnect ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                       self.metrics.error_count += 1
               
               elif is_connected and response_time > 5000:  # 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                   print(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ä‡πâ‡∏≤: {response_time:.2f} ms")
               
           except Exception as e:
               print(f"‚ùå Error in connection monitor: {e}")
               self.metrics.error_count += 1
   
   def reconnect(self) -> bool:
       """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
       print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Reconnect MT5...")
       self.status = ConnectionStatus.RECONNECTING
       
       for attempt in range(self.reconnect_attempts):
           print(f"üîÑ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà {attempt + 1}/{self.reconnect_attempts}")
           
           # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô reconnect
           if attempt > 0:
               time.sleep(self.reconnect_delay * attempt)  # Exponential backoff
           
           # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Å‡πà‡∏≤
           try:
               mt5.shutdown()
           except:
               pass
           
           # ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
           if self.connect():
               self.metrics.reconnect_count += 1
               print(f"‚úÖ Reconnect ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà {attempt + 1}")
               return True
       
       print(f"‚ùå Reconnect ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° {self.reconnect_attempts} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
       self.status = ConnectionStatus.ERROR
       return False
   
   def _notify_connection_callbacks(self, connected: bool):
       """‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô callbacks ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
       for callback in self.connection_callbacks:
           try:
               callback(connected)
           except Exception as e:
               print(f"‚ö†Ô∏è Callback error: {e}")
   
   def add_connection_callback(self, callback: callable):
       """‡πÄ‡∏û‡∏¥‡πà‡∏° callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
       self.connection_callbacks.append(callback)

# === GLOBAL MT5 CONNECTOR INSTANCE ===
_global_mt5_connector: Optional[MT5Connector] = None

def get_mt5_connector() -> MT5Connector:
   """‡∏î‡∏∂‡∏á MT5 Connector ‡πÅ‡∏ö‡∏ö Singleton"""
   global _global_mt5_connector
   if _global_mt5_connector is None:
       _global_mt5_connector = MT5Connector()
   return _global_mt5_connector

def ensure_mt5_connection() -> bool:
   """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
   connector = get_mt5_connector()
   
   if connector.is_connected():
       return True
   
   # ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
   return connector.connect()

def get_account_balance() -> Optional[float]:
   """‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"""
   connector = get_mt5_connector()
   account_info = connector.get_account_info(refresh=True)
   
   return account_info.balance if account_info else None

def get_account_equity() -> Optional[float]:
   """‡∏î‡∏∂‡∏á Equity ‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"""
   connector = get_mt5_connector()
   account_info = connector.get_account_info(refresh=True)
   
   return account_info.equity if account_info else None

def is_trading_allowed() -> bool:
   """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
   connector = get_mt5_connector()
   
   if not connector.is_connected():
       return False
   
   account_info = connector.get_account_info()
   if not account_info:
       return False
   
   return account_info.trade_allowed and account_info.trade_expert
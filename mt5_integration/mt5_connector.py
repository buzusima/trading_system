#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MT5 CONNECTION MANAGER - ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MetaTrader 5
====================================================
‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MT5 ‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö auto-reconnect
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠

‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á:
- config/settings.py (‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MT5)
- utilities/professional_logger.py (logging)
- utilities/error_handler.py (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)
- mt5_integration/connection_manager.py (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠)
- mt5_integration/account_monitor.py (‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)
"""

import MetaTrader5 as mt5
import threading
import time
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, Tuple, List
from dataclasses import dataclass
from enum import Enum

from config.settings import get_system_settings
from utilities.professional_logger import setup_mt5_logger
from utilities.error_handler import handle_connection_errors, MT5ConnectionError, report_error, ErrorCategory, ErrorSeverity

class ConnectionStatus(Enum):
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
    DISCONNECTED = "DISCONNECTED"
    CONNECTING = "CONNECTING"
    CONNECTED = "CONNECTED"
    RECONNECTING = "RECONNECTING"
    ERROR = "ERROR"

@dataclass
class MT5AccountInfo:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ MT5"""
    login: int
    name: str
    server: str
    currency: str
    balance: float
    equity: float
    margin: float
    margin_free: float
    margin_level: float
    profit: float
    company: str
    trade_allowed: bool
    trade_expert: bool
    leverage: int
    limit_orders: int
    margin_so_mode: int
    margin_so_call: float
    margin_so_so: float

@dataclass
class ConnectionMetrics:
    """‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
    connect_time: datetime
    last_ping: Optional[datetime] = None
    ping_count: int = 0
    reconnect_count: int = 0
    error_count: int = 0
    uptime_seconds: float = 0.0
    avg_response_time_ms: float = 0.0

class MT5Connector:
    """
    ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏´‡∏•‡∏±‡∏Å
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡πÅ‡∏•‡∏∞ auto-reconnect
    """
    
    def __init__(self):
        self.logger = setup_mt5_logger()
        self.settings = get_system_settings()
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        self.status = ConnectionStatus.DISCONNECTED
        self.account_info: Optional[MT5AccountInfo] = None
        self.metrics = ConnectionMetrics(connect_time=datetime.now())
        
        # Threading
        self.connection_lock = threading.Lock()
        self.monitor_thread: Optional[threading.Thread] = None
        self.monitoring_active = False
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        self.connection_timeout = self.settings.connection_timeout
        self.reconnect_attempts = self.settings.reconnect_attempts
        self.reconnect_delay = 5.0  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        self.last_error: Optional[str] = None
        self.connection_callbacks: List[callable] = []
        
        self.logger.info("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MT5 Connector")
    
    @handle_connection_errors(max_retries=3, retry_delay=2.0)
    def connect(self, login: Optional[int] = None, 
                password: Optional[str] = None, 
                server: Optional[str] = None,
                path: Optional[str] = None) -> bool:
        """
        ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MT5
        """
        with self.connection_lock:
            try:
                self.status = ConnectionStatus.CONNECTING
                self.logger.info("üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5...")
                
                # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å settings ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
                login = login or self.settings.mt5_login
                password = password or self.settings.mt5_password
                server = server or self.settings.mt5_server
                path = path or self.settings.mt5_path
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                if not all([login, password, server]):
                    raise MT5ConnectionError("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MT5
                if path:
                    if not mt5.initialize(path=path):
                        raise MT5ConnectionError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MT5 ‡πÑ‡∏î‡πâ: {mt5.last_error()}")
                else:
                    if not mt5.initialize():
                        raise MT5ConnectionError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MT5 ‡πÑ‡∏î‡πâ: {mt5.last_error()}")
                
                # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
                if not mt5.login(login, password=password, server=server):
                    error_code, error_desc = mt5.last_error()
                    raise MT5ConnectionError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ: {error_desc} (Code: {error_code})")
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
                account_info = mt5.account_info()
                if account_info is None:
                    raise MT5ConnectionError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ")
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
                self.account_info = MT5AccountInfo(
                    login=account_info.login,
                    name=account_info.name,
                    server=account_info.server,
                    currency=account_info.currency,
                    balance=account_info.balance,
                    equity=account_info.equity,
                    margin=account_info.margin,
                    margin_free=account_info.margin_free,
                    margin_level=account_info.margin_level,
                    profit=account_info.profit,
                    company=account_info.company,
                    trade_allowed=account_info.trade_allowed,
                    trade_expert=account_info.trade_expert,
                    leverage=account_info.leverage,
                    limit_orders=account_info.limit_orders,
                    margin_so_mode=account_info.margin_so_mode,
                    margin_so_call=account_info.margin_so_call,
                    margin_so_so=account_info.margin_so_so
                )
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                self.status = ConnectionStatus.CONNECTED
                self.metrics.connect_time = datetime.now()
                self.metrics.reconnect_count = 0
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏° monitoring thread
                self._start_connection_monitor()
                
                # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô callbacks
                self._notify_connection_callbacks(True)
                
                self.logger.info(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Account: {self.account_info.login} "
                               f"Server: {self.account_info.server} Balance: {self.account_info.balance:.2f} "
                               f"{self.account_info.currency}")
                
                return True
                
            except Exception as e:
                self.status = ConnectionStatus.ERROR
                self.last_error = str(e)
                self.logger.error(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                
                # ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                report_error(e, ErrorCategory.CONNECTION, ErrorSeverity.HIGH)
                
                return False
    
    def disconnect(self) -> bool:
        """
        ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
        """
        with self.connection_lock:
            try:
                self.logger.info("üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5...")
                
                # ‡∏´‡∏¢‡∏∏‡∏î monitoring
                self._stop_connection_monitor()
                
                # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                mt5.shutdown()
                
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                self.status = ConnectionStatus.DISCONNECTED
                self.account_info = None
                
                # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô callbacks
                self._notify_connection_callbacks(False)
                
                self.logger.info("‚úÖ ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return True
                
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                return False
    
    def is_connected(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        return self.status == ConnectionStatus.CONNECTED and mt5.terminal_info() is not None
    
    def ping(self) -> Tuple[bool, float]:
        """
        ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
        Returns: (success, response_time_ms)
        """
        start_time = time.time()
        
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• terminal
            terminal_info = mt5.terminal_info()
            
            if terminal_info is not None:
                response_time = (time.time() - start_time) * 1000  # convert to ms
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å
                self.metrics.last_ping = datetime.now()
                self.metrics.ping_count += 1
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average response time
                if self.metrics.ping_count == 1:
                    self.metrics.avg_response_time_ms = response_time
                else:
                    self.metrics.avg_response_time_ms = (
                        (self.metrics.avg_response_time_ms * (self.metrics.ping_count - 1) + response_time) 
                        / self.metrics.ping_count
                    )
                
                return True, response_time
            else:
                return False, 0.0
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Ping MT5 ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            return False, 0.0
    
    def reconnect(self) -> bool:
        """
        ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        """
        self.logger.info("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Reconnect MT5...")
        self.status = ConnectionStatus.RECONNECTING
        
        for attempt in range(self.reconnect_attempts):
            self.logger.info(f"üîÑ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà {attempt + 1}/{self.reconnect_attempts}")
            
            # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô reconnect
            if attempt > 0:
                time.sleep(self.reconnect_delay * attempt)  # Exponential backoff
            
            # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Å‡πà‡∏≤
            try:
                mt5.shutdown()
            except:
                pass
            
            # ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
            if self.connect():
                self.metrics.reconnect_count += 1
                self.logger.info(f"‚úÖ Reconnect ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà {attempt + 1}")
                return True
        
        self.logger.error(f"‚ùå Reconnect ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° {self.reconnect_attempts} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        self.status = ConnectionStatus.ERROR
        return False
    
    def get_account_info(self, refresh: bool = False) -> Optional[MT5AccountInfo]:
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        """
        if not self.is_connected():
            return None
        
        if refresh or self.account_info is None:
            try:
                account_info = mt5.account_info()
                if account_info:
                    self.account_info = MT5AccountInfo(
                        login=account_info.login,
                        name=account_info.name,
                        server=account_info.server,
                        currency=account_info.currency,
                        balance=account_info.balance,
                        equity=account_info.equity,
                        margin=account_info.margin,
                        margin_free=account_info.margin_free,
                        margin_level=account_info.margin_level,
                        profit=account_info.profit,
                        company=account_info.company,
                        trade_allowed=account_info.trade_allowed,
                        trade_expert=account_info.trade_expert,
                        leverage=account_info.leverage,
                        limit_orders=account_info.limit_orders,
                        margin_so_mode=account_info.margin_so_mode,
                        margin_so_call=account_info.margin_so_call,
                        margin_so_so=account_info.margin_so_so
                    )
            except Exception as e:
                self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ: {e}")
                return None
        
        return self.account_info
    
    def get_connection_metrics(self) -> ConnectionMetrics:
        """‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        if self.status == ConnectionStatus.CONNECTED:
            self.metrics.uptime_seconds = (datetime.now() - self.metrics.connect_time).total_seconds()
        
        return self.metrics
    
    def get_terminal_info(self) -> Optional[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Terminal MT5"""
        if not self.is_connected():
            return None
        
        try:
            terminal_info = mt5.terminal_info()
            if terminal_info:
                return {
                    "name": terminal_info.name,
                    "path": terminal_info.path,
                    "data_path": terminal_info.data_path,
                    "commondata_path": terminal_info.commondata_path,
                    "language": terminal_info.language,
                    "company": terminal_info.company,
                    "build": terminal_info.build,
                    "connected": terminal_info.connected,
                    "dlls_allowed": terminal_info.dlls_allowed,
                    "trade_allowed": terminal_info.trade_allowed,
                    "tradeapi_disabled": terminal_info.tradeapi_disabled,
                    "email_enabled": terminal_info.email_enabled,
                    "ftp_enabled": terminal_info.ftp_enabled,
                    "notifications_enabled": terminal_info.notifications_enabled,
                    "mqid": terminal_info.mqid,
                    "retransmission": terminal_info.retransmission,
                    "ping_last": terminal_info.ping_last,
                    "community_account": terminal_info.community_account,
                    "community_connection": terminal_info.community_connection
                }
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Terminal ‡πÑ‡∏î‡πâ: {e}")
            return None
    
    def add_connection_callback(self, callback: callable):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        self.connection_callbacks.append(callback)
    
    def _notify_connection_callbacks(self, connected: bool):
        """‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô callbacks ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
        for callback in self.connection_callbacks:
            try:
                callback(connected, self.account_info)
            except Exception as e:
                self.logger.error(f"‚ùå Error in connection callback: {e}")
    
    def _start_connection_monitor(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        if self.monitor_thread and self.monitor_thread.is_alive():
            return
        
        self.monitoring_active = True
        self.monitor_thread = threading.Thread(
            target=self._connection_monitor_loop,
            daemon=True,
            name="MT5ConnectionMonitor"
        )
        self.monitor_thread.start()
        self.logger.info("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Connection Monitor")
    
    def _stop_connection_monitor(self):
        """‡∏´‡∏¢‡∏∏‡∏î connection monitor"""
        self.monitoring_active = False
        if self.monitor_thread and self.monitor_thread.is_alive():
            self.monitor_thread.join(timeout=5.0)
        self.logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î Connection Monitor")
    
    def _connection_monitor_loop(self):
        """‡∏•‡∏π‡∏õ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        while self.monitoring_active:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                time.sleep(30)
                
                if not self.monitoring_active:
                    break
                
                # Ping ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                is_connected, response_time = self.ping()
                
                if not is_connected and self.status == ConnectionStatus.CONNECTED:
                    self.logger.warning("‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢ - ‡πÄ‡∏£‡∏¥‡πà‡∏° Auto Reconnect")
                    self.status = ConnectionStatus.ERROR
                    
                    # ‡∏•‡∏≠‡∏á reconnect
                    if self.reconnect():
                        self.logger.info("‚úÖ Auto Reconnect ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    else:
                        self.logger.error("‚ùå Auto Reconnect ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        self.metrics.error_count += 1
                
                elif is_connected and response_time > 5000:  # 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    self.logger.warning(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ä‡πâ‡∏≤: {response_time:.2f} ms")
                
            except Exception as e:
                self.logger.error(f"‚ùå Error in connection monitor: {e}")
                self.metrics.error_count += 1

# === GLOBAL MT5 CONNECTOR INSTANCE ===
_global_mt5_connector: Optional[MT5Connector] = None

def get_mt5_connector() -> MT5Connector:
    """‡∏î‡∏∂‡∏á MT5 Connector ‡πÅ‡∏ö‡∏ö Singleton"""
    global _global_mt5_connector
    if _global_mt5_connector is None:
        _global_mt5_connector = MT5Connector()
    return _global_mt5_connector

def ensure_mt5_connection() -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
    connector = get_mt5_connector()
    
    if connector.is_connected():
        return True
    
    # ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
    return connector.connect()

def get_account_balance() -> Optional[float]:
    """‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"""
    connector = get_mt5_connector()
    account_info = connector.get_account_info(refresh=True)
    
    return account_info.balance if account_info else None

def get_account_equity() -> Optional[float]:
    """‡∏î‡∏∂‡∏á Equity ‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"""
    connector = get_mt5_connector()
    account_info = connector.get_account_info(refresh=True)
    
    return account_info.equity if account_info else None

def get_margin_level() -> Optional[float]:
    """‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö Margin"""
    connector = get_mt5_connector()
    account_info = connector.get_account_info(refresh=True)
    
    return account_info.margin_level if account_info else None

def is_trading_allowed() -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    connector = get_mt5_connector()
    
    if not connector.is_connected():
        return False
    
    account_info = connector.get_account_info()
    if not account_info:
        return False
    
    return account_info.trade_allowed and account_info.trade_expert
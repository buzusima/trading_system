#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
XAUUSD SYMBOL DETECTOR & FIXER - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Symbol Loading
========================================================
‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Symbol XAUUSD ‡∏ó‡∏µ‡πà‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Symbol ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

üéØ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:
- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbol ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏°‡∏µ
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î  
- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Symbol ‡∏ó‡∏µ‡πà‡∏°‡∏µ Spread ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
- Auto-enable Symbol ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà visible
"""

import MetaTrader5 as mt5
import re
import time
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

class SymbolQuality(Enum):
    """‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û Symbol"""
    EXCELLENT = "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
    GOOD = "‡∏î‡∏µ" 
    FAIR = "‡∏û‡∏≠‡πÉ‡∏ä‡πâ"
    POOR = "‡πÅ‡∏¢‡πà"

@dataclass
class GoldSymbolInfo:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gold Symbol"""
    name: str
    description: str
    visible: bool = False
    tradeable: bool = False
    digits: int = 0
    point: float = 0.0
    spread: float = 0.0
    bid: float = 0.0
    ask: float = 0.0
    quality: SymbolQuality = SymbolQuality.FAIR
    broker_suffix: str = ""

class XAUUSDSymbolFixer:
    """‡∏ï‡∏±‡∏ß‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ XAUUSD Symbol"""
    
    def __init__(self):
        # Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbol ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö
        self.gold_patterns = [
            r'^XAUUSD$',           # Standard
            r'^XAUUSD\..*$',       # With suffix  
            r'^GOLD$',             # Simple Gold
            r'^GOLDUSD$',          # Gold USD
            r'^GOLD\.USD$',        # Gold.USD
            r'^XAU\.USD$',         # XAU.USD
            r'^.*XAUUSD.*$',       # Contains XAUUSD
            r'^.*GOLD.*USD.*$',    # Contains GOLD and USD
            r'^GOLD.*$',           # Starts with GOLD
            r'^XAU.*$',            # Starts with XAU
            r'^AU.*USD$',          # AU...USD
        ]
        
        self.found_symbols: List[GoldSymbolInfo] = []
        self.best_symbol: Optional[GoldSymbolInfo] = None
        
    def initialize_mt5(self) -> bool:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MT5 Connection"""
        try:
            if not mt5.initialize():
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ")
                print("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
                print("   - MT5 ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
                print("   - ‡∏°‡∏µ EA ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ DLL imports ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
                print("   - Firewall/Antivirus block MT5 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
                return False
                
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
            account_info = mt5.account_info()
            if account_info:
                print(f"üìä ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {account_info.login}")
                print(f"üí∞ Balance: ${account_info.balance:,.2f}")
                print(f"üè¶ ‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå: {account_info.company}")
                print(f"üåê Server: {account_info.server}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô MT5 Initialize: {e}")
            return False
    
    def search_all_gold_symbols(self) -> List[GoldSymbolInfo]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbol ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("\nüîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbols ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
        
        found_symbols = []
        all_symbols = mt5.symbols_get()
        
        if not all_symbols:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Symbol ‡πÑ‡∏î‡πâ")
            return found_symbols
            
        print(f"üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å {len(all_symbols)} symbols...")
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° pattern
        for symbol_info in all_symbols:
            symbol_name = symbol_info.name
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å pattern
            for pattern in self.gold_patterns:
                if re.match(pattern, symbol_name, re.IGNORECASE):
                    print(f"üéØ ‡∏û‡∏ö Gold Symbol: {symbol_name}")
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• symbol
                    gold_symbol = GoldSymbolInfo(
                        name=symbol_name,
                        description=symbol_info.description,
                        visible=symbol_info.visible,
                        tradeable=symbol_info.visible,
                        digits=symbol_info.digits,
                        point=symbol_info.point
                    )
                    
                    found_symbols.append(gold_symbol)
                    break
        
        self.found_symbols = found_symbols
        print(f"‚úÖ ‡∏û‡∏ö Gold Symbols ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(found_symbols)} symbols")
        
        return found_symbols
    
    def analyze_symbol_quality(self, symbol: GoldSymbolInfo) -> GoldSymbolInfo:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û Symbol"""
        try:
            # Enable symbol ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà visible
            if not symbol.visible:
                print(f"üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á Enable Symbol: {symbol.name}")
                if mt5.symbol_select(symbol.name, True):
                    symbol.visible = True
                    symbol.tradeable = True
                    print(f"‚úÖ Enable {symbol.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Enable {symbol.name}")
                    return symbol
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            tick = mt5.symbol_info_tick(symbol.name)
            if tick:
                symbol.bid = tick.bid
                symbol.ask = tick.ask
                symbol.spread = tick.ask - tick.bid
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì spread ‡πÉ‡∏ô points
                spread_points = symbol.spread / symbol.point if symbol.point > 0 else 0
                
                # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏° spread
                if spread_points <= 10:
                    symbol.quality = SymbolQuality.EXCELLENT
                elif spread_points <= 20:
                    symbol.quality = SymbolQuality.GOOD
                elif spread_points <= 50:
                    symbol.quality = SymbolQuality.FAIR
                else:
                    symbol.quality = SymbolQuality.POOR
                
                print(f"üìä {symbol.name}:")
                print(f"   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {symbol.bid:.2f} / {symbol.ask:.2f}")
                print(f"   üìà Spread: {spread_points:.1f} points")
                print(f"   ‚≠ê ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {symbol.quality.value}")
                
            return symbol
            
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {symbol.name}: {e}")
            return symbol
    
    def select_best_symbol(self) -> Optional[GoldSymbolInfo]:
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Symbol ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
        if not self.found_symbols:
            return None
        
        print("\nüèÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Symbol ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ó‡∏∏‡∏Å symbol
        analyzed_symbols = []
        for symbol in self.found_symbols:
            analyzed_symbol = self.analyze_symbol_quality(symbol)
            if analyzed_symbol.tradeable:
                analyzed_symbols.append(analyzed_symbol)
        
        if not analyzed_symbols:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Symbol ‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ")
            return None
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞ spread
        quality_order = {
            SymbolQuality.EXCELLENT: 4,
            SymbolQuality.GOOD: 3,
            SymbolQuality.FAIR: 2,
            SymbolQuality.POOR: 1
        }
        
        best_symbol = max(analyzed_symbols, 
                         key=lambda s: (quality_order[s.quality], -s.spread))
        
        self.best_symbol = best_symbol
        
        print(f"\nüéØ Symbol ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {best_symbol.name}")
        print(f"‚≠ê ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {best_symbol.quality.value}")
        print(f"üìà Spread: {best_symbol.spread / best_symbol.point:.1f} points")
        
        return best_symbol
    
    def test_symbol_trading(self, symbol_name: str) -> bool:
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î Symbol"""
        try:
            print(f"\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î {symbol_name}...")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• symbol
            symbol_info = mt5.symbol_info(symbol_name)
            if not symbol_info:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Symbol {symbol_name}")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ
            if not symbol_info.visible:
                print(f"‚ùå Symbol {symbol_name} ‡πÑ‡∏°‡πà visible")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö market open
            tick = mt5.symbol_info_tick(symbol_name)
            if not tick:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ {symbol_name}")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö trading session
            current_time = datetime.now()
            
            print(f"‚úÖ {symbol_name} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ó‡∏£‡∏î")
            print(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {tick.bid:.2f} / {tick.ask:.2f}")
            print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {current_time.strftime('%Y-%m-%d %H:%M:%S')}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")
            return False
    
    def save_symbol_config(self, symbol_name: str) -> bool:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Symbol"""
        try:
            config = {
                "selected_symbol": symbol_name,
                "detection_time": datetime.now().isoformat(),
                "all_found_symbols": [s.name for s in self.found_symbols],
                "broker_info": {
                    "company": mt5.account_info().company if mt5.account_info() else "Unknown",
                    "server": mt5.account_info().server if mt5.account_info() else "Unknown"
                }
            }
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
            print(f"üìÑ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Symbol: {symbol_name}")
            return True
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: {e}")
            return False
    
    def run_full_detection(self) -> Optional[str]:
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ XAUUSD Symbol ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        print("=" * 50)
        
        # 1. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
        if not self.initialize_mt5():
            return None
        
        # 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbols
        found_symbols = self.search_all_gold_symbols()
        if not found_symbols:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Gold Symbol ‡πÉ‡∏î‡πÜ")
            print("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
            print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏°‡∏µ Gold ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
            print("   - ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô GOLD, XAUUSD.xxx")
            return None
        
        # 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Symbol ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        best_symbol = self.select_best_symbol()
        if not best_symbol:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Symbol ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
            return None
        
        # 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        if not self.test_symbol_trading(best_symbol.name):
            print("‚ùå Symbol ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ")
            return None
        
        # 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.save_symbol_config(best_symbol.name)
        
        print("\n" + "=" * 50)
        print("üéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ XAUUSD Symbol ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        print(f"‚úÖ Symbol ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {best_symbol.name}")
        print(f"‚≠ê ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {best_symbol.quality.value}")
        print("=" * 50)
        
        return best_symbol.name

    def show_all_symbols_info(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å Symbol ‡∏ó‡∏µ‡πà‡∏û‡∏ö"""
        if not self.found_symbols:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Symbol")
            return
        
        print("\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Gold Symbols ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
        print("-" * 60)
        
        for i, symbol in enumerate(self.found_symbols, 1):
            print(f"{i}. {symbol.name}")
            print(f"   üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {symbol.description}")
            print(f"   üëÅÔ∏è  Visible: {'‚úÖ' if symbol.visible else '‚ùå'}")
            print(f"   üíπ ‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ: {'‚úÖ' if symbol.tradeable else '‚ùå'}")
            if symbol.bid > 0:
                print(f"   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {symbol.bid:.2f} / {symbol.ask:.2f}")
                print(f"   üìä Spread: {symbol.spread / symbol.point:.1f} points")
            print(f"   ‚≠ê ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {symbol.quality.value}")
            print()

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á detector
        detector = XAUUSDSymbolFixer()
        
        # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        result = detector.run_full_detection()
        
        if result:
            print(f"\nüéØ ‡πÉ‡∏ä‡πâ Symbol ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î: {result}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å symbol (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
            show_details = input("\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏∏‡∏Å Symbol ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ")
            if show_details.lower() == 'y':
                detector.show_all_symbols_info()
        else:
            print("\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ")
            print("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MT5")
        
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {e}")
    
    finally:
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
        mt5.shutdown()
        print("üëã ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5")

if __name__ == "__main__":
    main()
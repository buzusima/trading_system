#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GOLD SYMBOL AUTO-DETECTOR - ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≤‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ó‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
======================================================
‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ó‡∏≠‡∏á (Gold Symbol) ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÉ‡∏ä‡πâ
‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô XAUUSD, GOLD, GOLD.USD, etc.

üéØ ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
- ‡∏´‡∏≤‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ó‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå
- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Spread ‡πÅ‡∏•‡∏∞ Trading Conditions
- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏î
"""

import MetaTrader5 as mt5
import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, field
from enum import Enum
import json
import re
from collections import defaultdict

# Internal imports
from utilities.professional_logger import setup_component_logger
from utilities.error_handler import handle_trading_errors, ErrorCategory, ErrorSeverity

class GoldSymbolQuality(Enum):
    """‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á Gold Symbol"""
    EXCELLENT = "EXCELLENT"     # Spread ‡∏ï‡πà‡∏≥, Volume ‡∏™‡∏π‡∏á, ‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ‡∏î‡∏µ
    GOOD = "GOOD"              # ‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥
    FAIR = "FAIR"              # ‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏π‡∏á
    POOR = "POOR"              # ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡∏£‡∏î

@dataclass
class GoldSymbolInfo:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gold Symbol"""
    symbol: str
    description: str
    
    # Trading availability
    is_visible: bool = False
    is_tradable: bool = False
    market_open: bool = False
    trade_allowed: bool = False
    
    # Volume settings
    volume_min: float = 0.0
    volume_max: float = 0.0
    volume_step: float = 0.0
    
    # Price settings
    digits: int = 0
    point: float = 0.0
    
    # Current market data
    current_bid: float = 0.0
    current_ask: float = 0.0
    spread_points: float = 0.0
    spread_percent: float = 0.0
    
    # Trading costs
    commission: float = 0.0
    swap_long: float = 0.0
    swap_short: float = 0.0
    
    # Quality assessment
    quality: GoldSymbolQuality = GoldSymbolQuality.FAIR
    quality_score: float = 0.0
    
    # Additional info
    server_time: datetime = field(default_factory=datetime.now)
    last_update: datetime = field(default_factory=datetime.now)
    notes: str = ""

class GoldSymbolDetector:
    """‡∏ï‡∏±‡∏ß‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbol ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    
    def __init__(self):
        self.logger = setup_component_logger("GoldSymbolDetector")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MT5 connection
        if not mt5.initialize():
            raise RuntimeError("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ")
        
        self.logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gold Symbol Detection")
        
        # Gold symbol patterns ‡∏ó‡∏µ‡πà‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ä‡πâ
        self.gold_patterns = [
            # Standard patterns
            r'^XAUUSD$',
            r'^GOLD$',
            r'^GOLDUSD$',
            r'^GOLD\.USD$',
            r'^XAU\.USD$',
            r'^XAUUSD\..*$',
            
            # Broker-specific patterns
            r'^.*XAUUSD.*$',
            r'^.*GOLD.*USD.*$',
            r'^AU.*USD$',
            r'^GOLD.*$',
            
            # Alternative formats
            r'^XAU/USD$',
            r'^GOLD/USD$',
            r'^XAU_USD$',
            r'^GOLD_USD$'
        ]
        
        # Results
        self.found_symbols: List[GoldSymbolInfo] = []
        self.best_symbol: Optional[GoldSymbolInfo] = None
        self.recommended_symbol: str = ""
        
    @handle_trading_errors(ErrorCategory.MARKET_DATA, ErrorSeverity.MEDIUM)
    def detect_gold_symbols(self) -> bool:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbols ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            self.logger.info("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbols...")
            
            # ‡∏î‡∏∂‡∏á symbols ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            all_symbols = mt5.symbols_get()
            if not all_symbols:
                self.logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á symbols ‡πÑ‡∏î‡πâ")
                return False
            
            self.logger.info(f"üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å {len(all_symbols)} symbols")
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ symbols ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö gold patterns
            potential_gold_symbols = []
            
            for symbol_info in all_symbols:
                symbol_name = symbol_info.name
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö patterns
                for pattern in self.gold_patterns:
                    if re.match(pattern, symbol_name, re.IGNORECASE):
                        potential_gold_symbols.append(symbol_info)
                        break
            
            self.logger.info(f"üéØ ‡∏û‡∏ö Potential Gold Symbols: {len(potential_gold_symbols)}")
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞ symbol
            for symbol_info in potential_gold_symbols:
                gold_info = self._analyze_gold_symbol(symbol_info)
                if gold_info:
                    self.found_symbols.append(gold_info)
                    self.logger.info(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {symbol_info.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
            self.found_symbols.sort(key=lambda x: x.quality_score, reverse=True)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å symbol ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            if self.found_symbols:
                self.best_symbol = self.found_symbols[0]
                self.recommended_symbol = self.best_symbol.symbol
                
                self.logger.info(f"üèÜ Gold Symbol ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {self.recommended_symbol}")
                self.logger.info(f"üìä Quality Score: {self.best_symbol.quality_score:.2f}")
                self.logger.info(f"üí∞ Spread: {self.best_symbol.spread_points:.1f} points")
                
                return True
            else:
                self.logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Gold Symbol ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbols: {e}")
            return False
    
    @handle_trading_errors(ErrorCategory.MARKET_DATA, ErrorSeverity.LOW)
    def _analyze_gold_symbol(self, symbol_info) -> Optional[GoldSymbolInfo]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Gold Symbol ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"""
        try:
            symbol_name = symbol_info.name
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• symbol detail
            if not symbol_info.visible:
                # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° select symbol
                if not mt5.symbol_select(symbol_name, True):
                    self.logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ select {symbol_name}")
                    return None
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tick
            tick = mt5.symbol_info_tick(symbol_name)
            if not tick:
                self.logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ tick data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {symbol_name}")
                return None
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏≠‡∏á)
            if not self._verify_gold_price_range(tick.bid, tick.ask):
                self.logger.warning(f"‚ö†Ô∏è {symbol_name} ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ó‡∏≠‡∏á")
                return None
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì spread
            spread_points = tick.ask - tick.bid
            spread_percent = (spread_points / tick.bid) * 100 if tick.bid > 0 else 0
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á GoldSymbolInfo
            gold_info = GoldSymbolInfo(
                symbol=symbol_name,
                description=symbol_info.description or symbol_name,
                is_visible=symbol_info.visible,
                is_tradable=symbol_info.trade_mode != 0,
                market_open=True,  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ tick ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏õ‡∏¥‡∏î
                trade_allowed=symbol_info.trade_mode in [1, 2, 3, 4],  # Trade modes ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
                volume_min=symbol_info.volume_min,
                volume_max=symbol_info.volume_max,
                volume_step=symbol_info.volume_step,
                digits=symbol_info.digits,
                point=symbol_info.point,
                current_bid=tick.bid,
                current_ask=tick.ask,
                spread_points=spread_points,
                spread_percent=spread_percent,
                server_time=datetime.now(),
                last_update=datetime.now()
            )
            
            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
            self._assess_symbol_quality(gold_info)
            
            return gold_info
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {symbol_info.name}: {e}")
            return None
    
    def _verify_gold_price_range(self, bid: float, ask: float) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏≠‡∏á"""
        try:
            # ‡∏ó‡∏≠‡∏á‡∏°‡∏±‡∏Å‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1000-3000 USD
            avg_price = (bid + ask) / 2
            
            # ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
            if 1000 <= avg_price <= 5000:
                return True
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô pips (‡∏ö‡∏≤‡∏á‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏≠‡∏≤‡∏à‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
            if 100000 <= avg_price <= 500000:  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö pips
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á: {e}")
            return False
    
    def _assess_symbol_quality(self, gold_info: GoldSymbolInfo):
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á Gold Symbol"""
        try:
            score = 0.0
            notes = []
            
            # Trading availability (40 points)
            if gold_info.is_tradable and gold_info.trade_allowed:
                score += 40
                notes.append("‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ")
            else:
                notes.append("‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
            
            # Market status (20 points)
            if gold_info.market_open:
                score += 20
                notes.append("‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏õ‡∏¥‡∏î")
            else:
                notes.append("‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏¥‡∏î")
            
            # Spread quality (30 points)
            if gold_info.spread_points <= 0.3:
                score += 30
                notes.append("Spread ‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å")
            elif gold_info.spread_points <= 0.5:
                score += 25
                notes.append("Spread ‡∏ï‡πà‡∏≥")
            elif gold_info.spread_points <= 1.0:
                score += 20
                notes.append("Spread ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á")
            elif gold_info.spread_points <= 2.0:
                score += 15
                notes.append("Spread ‡∏™‡∏π‡∏á")
            else:
                score += 5
                notes.append("Spread ‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å")
            
            # Volume settings (10 points)
            if gold_info.volume_min <= 0.01 and gold_info.volume_max >= 1.0:
                score += 10
                notes.append("Volume ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô")
            elif gold_info.volume_min <= 0.1:
                score += 5
                notes.append("Volume ‡∏û‡∏≠‡πÉ‡∏ä‡πâ")
            else:
                notes.append("Volume ‡∏à‡∏≥‡∏Å‡∏±‡∏î")
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
            if score >= 90:
                gold_info.quality = GoldSymbolQuality.EXCELLENT
            elif score >= 75:
                gold_info.quality = GoldSymbolQuality.GOOD
            elif score >= 50:
                gold_info.quality = GoldSymbolQuality.FAIR
            else:
                gold_info.quality = GoldSymbolQuality.POOR
            
            gold_info.quality_score = score
            gold_info.notes = "; ".join(notes)
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {e}")
            gold_info.quality = GoldSymbolQuality.POOR
            gold_info.quality_score = 0.0
    
    def get_best_gold_symbol(self) -> Optional[str]:
        """‡∏î‡∏∂‡∏á Gold Symbol ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
        return self.recommended_symbol if self.recommended_symbol else None
    
    def get_all_gold_symbols(self) -> List[GoldSymbolInfo]:
        """‡∏î‡∏∂‡∏á Gold Symbols ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö"""
        return self.found_symbols.copy()
    
    def get_symbol_details(self, symbol: str) -> Optional[GoldSymbolInfo]:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á Symbol ‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        for gold_info in self.found_symbols:
            if gold_info.symbol == symbol:
                return gold_info
        return None
    
    def verify_symbol_trading(self, symbol: str) -> Dict[str, Any]:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏≠‡∏á Symbol"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• symbol
            symbol_info = mt5.symbol_info(symbol)
            if not symbol_info:
                return {
                    'available': False,
                    'error': 'Symbol not found'
                }
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tick
            tick = mt5.symbol_info_tick(symbol)
            if not tick:
                return {
                    'available': False,
                    'error': 'No tick data'
                }
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö account
            account_info = mt5.account_info()
            if not account_info or not account_info.trade_allowed:
                return {
                    'available': False,
                    'error': 'Account not allowed to trade'
                }
            
            return {
                'available': True,
                'symbol': symbol,
                'bid': tick.bid,
                'ask': tick.ask,
                'spread': tick.ask - tick.bid,
                'volume_min': symbol_info.volume_min,
                'volume_max': symbol_info.volume_max,
                'digits': symbol_info.digits,
                'trade_mode': symbol_info.trade_mode,
                'market_open': True,
                'account_currency': account_info.currency,
                'account_balance': account_info.balance
            }
            
        except Exception as e:
            return {
                'available': False,
                'error': str(e)
            }
    
    def auto_select_best_symbol(self) -> Optional[str]:
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Symbol ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        try:
            if not self.detect_gold_symbols():
                return None
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ symbols ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            if self.found_symbols:
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å symbol ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                best = self.found_symbols[0]
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                verification = self.verify_symbol_trading(best.symbol)
                if verification['available']:
                    self.logger.info(f"üèÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Gold Symbol: {best.symbol}")
                    self.logger.info(f"üí∞ Spread: {best.spread_points:.1f} points")
                    self.logger.info(f"üìä Quality: {best.quality.value}")
                    return best.symbol
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Symbol ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: {e}")
            return None
    
    def get_detection_report(self) -> Dict[str, Any]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
        try:
            report = {
                'detection_time': datetime.now(),
                'symbols_found': len(self.found_symbols),
                'recommended_symbol': self.recommended_symbol,
                'symbols_detail': []
            }
            
            for gold_info in self.found_symbols:
                symbol_detail = {
                    'symbol': gold_info.symbol,
                    'description': gold_info.description,
                    'quality': gold_info.quality.value,
                    'quality_score': gold_info.quality_score,
                    'spread_points': gold_info.spread_points,
                    'spread_percent': gold_info.spread_percent,
                    'is_tradable': gold_info.is_tradable,
                    'volume_min': gold_info.volume_min,
                    'volume_max': gold_info.volume_max,
                    'current_price': gold_info.current_bid,
                    'notes': gold_info.notes
                }
                report['symbols_detail'].append(symbol_detail)
            
            return report
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {e}")
            return {'error': str(e)}
    
    def print_detection_summary(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
        print("\n" + "üèÜ" * 50)
        print("ü•á GOLD SYMBOL DETECTION SUMMARY")
        print("üèÜ" * 50)
        
        if not self.found_symbols:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Gold Symbol ‡πÉ‡∏î‡πÜ")
            return
        
        print(f"üìä ‡∏û‡∏ö Gold Symbols: {len(self.found_symbols)} symbols")
        print(f"üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {self.recommended_symbol}")
        
        print("\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Gold Symbols:")
        print("-" * 80)
        print(f"{'Symbol':<15} {'Quality':<12} {'Spread':<10} {'Tradable':<10} {'Price':<10}")
        print("-" * 80)
        
        for gold_info in self.found_symbols:
            tradable = "‚úÖ" if gold_info.is_tradable else "‚ùå"
            print(f"{gold_info.symbol:<15} {gold_info.quality.value:<12} "
                  f"{gold_info.spread_points:<10.1f} {tradable:<10} {gold_info.current_bid:<10.2f}")
        
        print("-" * 80)
        
        if self.best_symbol:
            print(f"\nüèÜ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ: {self.best_symbol.symbol}")
            print(f"üìä ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {self.best_symbol.quality.value} ({self.best_symbol.quality_score:.1f}/100)")
            print(f"üí∞ Spread: {self.best_symbol.spread_points:.1f} points ({self.best_symbol.spread_percent:.3f}%)")
            print(f"üìà ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {self.best_symbol.current_bid:.2f} / {self.best_symbol.current_ask:.2f}")
            print(f"üì¶ Volume: {self.best_symbol.volume_min} - {self.best_symbol.volume_max}")
            print(f"üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {self.best_symbol.notes}")

# ===== FACTORY FUNCTION =====

def get_gold_symbol_detector() -> GoldSymbolDetector:
    """Factory function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Gold Symbol Detector"""
    return GoldSymbolDetector()

def auto_detect_gold_symbol() -> Optional[str]:
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤ Gold Symbol ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    try:
        detector = GoldSymbolDetector()
        return detector.auto_select_best_symbol()
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤ Gold Symbol ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: {e}")
        return None

# ===== MAIN TESTING =====

if __name__ == "__main__":
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gold Symbol Detection"""
    
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gold Symbol Detection")
    print("=" * 50)
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á detector
        detector = GoldSymbolDetector()
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Gold Symbol Detector ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ symbols
        if detector.detect_gold_symbols():
            print("‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbols ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            detector.print_detection_summary()
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            auto_symbol = detector.auto_select_best_symbol()
            if auto_symbol:
                print(f"\nüéØ Auto-selected Symbol: {auto_symbol}")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
                verification = detector.verify_symbol_trading(auto_symbol)
                if verification['available']:
                    print("‚úÖ Symbol ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
                    print(f"üí∞ Current Spread: {verification['spread']:.1f}")
                    print(f"üì¶ Volume Range: {verification['volume_min']} - {verification['volume_max']}")
                else:
                    print(f"‚ùå Symbol ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ó‡∏£‡∏î: {verification['error']}")
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Symbol ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Gold Symbols ‡πÑ‡∏î‡πâ")
            
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
    
    print("\nüéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
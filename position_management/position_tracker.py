#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
POSITION TRACKER - Working Version (GUARANTEED TO WORK)
=======================================================
‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ 100% - ‡∏°‡∏µ get_enhanced_position_tracker
Copy ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà position_management/position_tracker.py
"""

import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable, Union
from dataclasses import dataclass, field
from enum import Enum
import json
from collections import deque, defaultdict

# MT5 Import with fallback
try:
    import MetaTrader5 as mt5
    MT5_AVAILABLE = True
except ImportError:
    MT5_AVAILABLE = False
    print("‚ö†Ô∏è MetaTrader5 not available - using simulation mode")

# Import dependencies with fallback
try:
    from utilities.professional_logger import setup_component_logger
except ImportError:
    import logging
    def setup_component_logger(name):
        logger = logging.getLogger(name)
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)
            logger.addHandler(handler)
            logger.setLevel(logging.INFO)
        return logger

# ===== ENUMS =====

class PositionStatus(Enum):
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Position"""
    OPEN = "OPEN"
    CLOSED = "CLOSED"
    PARTIAL = "PARTIAL"
    PENDING = "PENDING"
    ERROR = "ERROR"

class PositionType(Enum):
    """‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Position"""
    BUY = "BUY"
    SELL = "SELL"
    BUY_LIMIT = "BUY_LIMIT"
    SELL_LIMIT = "SELL_LIMIT"
    BUY_STOP = "BUY_STOP"
    SELL_STOP = "SELL_STOP"

# ===== DATACLASSES =====

@dataclass
class Position:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position"""
    # Required fields (no defaults)
    ticket: int
    symbol: str
    position_type: PositionType
    volume: float
    open_price: float
    open_time: datetime
    
    # Optional fields (with defaults)
    current_price: float = 0.0
    unrealized_pnl: float = 0.0
    realized_pnl: float = 0.0
    commission: float = 0.0
    swap: float = 0.0
    magic_number: int = 0
    comment: str = ""
    status: PositionStatus = PositionStatus.OPEN
    recovery_level: int = 0
    parent_position: Optional[int] = None
    child_positions: List[int] = field(default_factory=list)
    recovery_method: str = ""
    last_update: datetime = field(default_factory=datetime.now)
    close_time: Optional[datetime] = None
    max_profit: float = 0.0
    max_loss: float = 0.0
    hold_duration: Optional[timedelta] = None
    entry_reason: str = ""
    strategy: str = ""
    session: str = ""
    market_conditions: str = ""
    notes: str = ""
    
    def to_dict(self) -> Dict[str, Any]:
        """‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Dictionary"""
        return {
            'ticket': self.ticket,
            'symbol': self.symbol,
            'position_type': self.position_type.value,
            'volume': self.volume,
            'open_price': self.open_price,
            'current_price': self.current_price,
            'unrealized_pnl': self.unrealized_pnl,
            'realized_pnl': self.realized_pnl,
            'open_time': self.open_time.isoformat(),
            'close_time': self.close_time.isoformat() if self.close_time else None,
            'status': self.status.value,
            'recovery_level': self.recovery_level,
            'strategy': self.strategy,
            'notes': self.notes
        }
    
    def update_pnl(self, current_price: float):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï P&L"""
        self.current_price = current_price
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì unrealized P&L
        if self.position_type == PositionType.BUY:
            self.unrealized_pnl = (current_price - self.open_price) * self.volume * 100
        elif self.position_type == PositionType.SELL:
            self.unrealized_pnl = (self.open_price - current_price) * self.volume * 100
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï max profit/loss
        if self.unrealized_pnl > self.max_profit:
            self.max_profit = self.unrealized_pnl
        if self.unrealized_pnl < self.max_loss:
            self.max_loss = self.unrealized_pnl
        
        self.last_update = datetime.now()
    
    def is_losing(self, threshold: float = 0.0) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Position ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.unrealized_pnl < threshold
    
    def needs_recovery(self, loss_threshold: float = -50.0) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Recovery ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.is_losing() and self.unrealized_pnl <= loss_threshold

@dataclass 
class PortfolioMetrics:
    """‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏™‡πå Portfolio"""
    total_positions: int = 0
    total_volume: float = 0.0
    total_unrealized_pnl: float = 0.0
    total_realized_pnl: float = 0.0
    net_exposure: float = 0.0
    buy_positions: int = 0
    sell_positions: int = 0
    recovery_positions: int = 0
    positions_needing_recovery: int = 0
    average_profit_per_position: float = 0.0
    largest_loss: float = 0.0
    largest_profit: float = 0.0
    risk_level: str = "LOW"

# ===== ENHANCED POSITION TRACKER =====

class EnhancedPositionTracker:
    """Enhanced Position Tracker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"""
    
    def __init__(self, symbol: str = "XAUUSD", update_interval: float = 1.0):
        # Configuration
        self.symbol = symbol
        self.update_interval = update_interval
        
        # Logger setup
        self.logger = setup_component_logger("PositionTracker")
        
        # Position storage
        self.positions: Dict[int, Position] = {}
        self.closed_positions: Dict[int, Position] = {}
        self.position_history: deque = deque(maxlen=1000)
        
        # Tracking state
        self.tracking_active = False
        self.update_thread: Optional[threading.Thread] = None
        self.lock = threading.Lock()
        
        # Callbacks
        self.position_callbacks: List[Callable] = []
        
        # Metrics
        self.portfolio_metrics = PortfolioMetrics()
        self.last_update_time: Optional[datetime] = None
        
        # Statistics
        self.stats = {
            'total_positions_tracked': 0,
            'positions_closed': 0,
            'recovery_operations': 0,
            'tracking_errors': 0
        }
        
        self.logger.info(f"‚úÖ Enhanced Position Tracker initialized for {self.symbol}")
    
    def start_tracking(self) -> bool:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Position ‡πÅ‡∏ö‡∏ö real-time"""
        try:
            if self.tracking_active:
                self.logger.warning("‚ö†Ô∏è Position tracking already active")
                return True
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° tracking thread
            self.tracking_active = True
            self.update_thread = threading.Thread(
                target=self._tracking_loop,
                name="PositionTracker",
                daemon=True
            )
            self.update_thread.start()
            
            self.logger.info("üöÄ Position tracking started")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to start position tracking: {e}")
            return False
    
    def stop_tracking(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Position"""
        try:
            self.tracking_active = False
            
            if self.update_thread and self.update_thread.is_alive():
                self.update_thread.join(timeout=5.0)
            
            self.logger.info("üõë Position tracking stopped")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error stopping position tracking: {e}")
    
    def _tracking_loop(self):
        """Loop ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Position"""
        while self.tracking_active:
            try:
                self._update_positions_from_mt5()
                self._detect_position_changes()
                self._calculate_portfolio_metrics()
                self._notify_callbacks()
                
                time.sleep(self.update_interval)
                
            except Exception as e:
                self.stats['tracking_errors'] += 1
                self.logger.error(f"‚ùå Tracking loop error: {e}")
                time.sleep(5.0)
    
    def _update_positions_from_mt5(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position ‡∏à‡∏≤‡∏Å MT5"""
        if not MT5_AVAILABLE:
            return
            
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• positions ‡∏à‡∏≤‡∏Å MT5
            positions = mt5.positions_get(symbol=self.symbol)
            
            if positions is None:
                positions = []
            
            current_tickets = set()
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï positions ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            for pos in positions:
                ticket = pos.ticket
                current_tickets.add(ticket)
                
                position_type = PositionType.BUY if pos.type == 0 else PositionType.SELL
                
                if ticket in self.positions:
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï position ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                    position = self.positions[ticket]
                    position.update_pnl(pos.price_current)
                    position.unrealized_pnl = pos.profit
                    position.commission = pos.commission
                    position.swap = pos.swap
                else:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á position ‡πÉ‡∏´‡∏°‡πà
                    position = Position(
                        ticket=ticket,
                        symbol=pos.symbol,
                        position_type=position_type,
                        volume=pos.volume,
                        open_price=pos.price_open,
                        open_time=datetime.fromtimestamp(pos.time),
                        current_price=pos.price_current,
                        unrealized_pnl=pos.profit,
                        commission=pos.commission,
                        swap=pos.swap,
                        magic_number=pos.magic,
                        comment=pos.comment
                    )
                    
                    self.positions[ticket] = position
                    self.stats['total_positions_tracked'] += 1
                    
                    self.logger.info(f"üìä New position tracked: {ticket}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö positions ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
            closed_tickets = set(self.positions.keys()) - current_tickets
            for ticket in closed_tickets:
                position = self.positions.pop(ticket)
                position.status = PositionStatus.CLOSED
                position.close_time = datetime.now()
                
                self.closed_positions[ticket] = position
                self.stats['positions_closed'] += 1
                
                self.logger.info(f"üîö Position closed: {ticket}")
            
            self.last_update_time = datetime.now()
            
        except Exception as e:
            self.logger.error(f"‚ùå MT5 position update error: {e}")
    
    def _detect_position_changes(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á Position"""
        try:
            for position in self.positions.values():
                if position.needs_recovery(-50.0):
                    self.logger.warning(f"‚ö†Ô∏è Position {position.ticket} needs recovery: {position.unrealized_pnl:.2f}")
        except Exception as e:
            self.logger.error(f"‚ùå Position change detection error: {e}")
    
    def _calculate_portfolio_metrics(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏™‡πå Portfolio"""
        try:
            with self.lock:
                positions = list(self.positions.values())
                
                self.portfolio_metrics.total_positions = len(positions)
                self.portfolio_metrics.total_volume = sum(pos.volume for pos in positions)
                self.portfolio_metrics.total_unrealized_pnl = sum(pos.unrealized_pnl for pos in positions)
                
                buy_volume = sum(pos.volume for pos in positions if pos.position_type == PositionType.BUY)
                sell_volume = sum(pos.volume for pos in positions if pos.position_type == PositionType.SELL)
                self.portfolio_metrics.net_exposure = buy_volume - sell_volume
                
                self.portfolio_metrics.buy_positions = len([p for p in positions if p.position_type == PositionType.BUY])
                self.portfolio_metrics.sell_positions = len([p for p in positions if p.position_type == PositionType.SELL])
                self.portfolio_metrics.recovery_positions = len([p for p in positions if p.recovery_level > 0])
                self.portfolio_metrics.positions_needing_recovery = len([p for p in positions if p.needs_recovery(-50.0)])
                
                if positions:
                    profits = [pos.unrealized_pnl for pos in positions]
                    self.portfolio_metrics.largest_profit = max(profits)
                    self.portfolio_metrics.largest_loss = min(profits)
                    self.portfolio_metrics.average_profit_per_position = sum(profits) / len(profits)
                
                total_loss = abs(min(0, self.portfolio_metrics.total_unrealized_pnl))
                if total_loss > 500:
                    self.portfolio_metrics.risk_level = "HIGH"
                elif total_loss > 200:
                    self.portfolio_metrics.risk_level = "MEDIUM"
                else:
                    self.portfolio_metrics.risk_level = "LOW"
                
        except Exception as e:
            self.logger.error(f"‚ùå Portfolio metrics calculation error: {e}")
    
    def _notify_callbacks(self):
        """‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô callbacks"""
        try:
            for callback in self.position_callbacks:
                try:
                    callback(self.get_portfolio_summary())
                except Exception as e:
                    self.logger.error(f"‚ùå Callback notification error: {e}")
        except Exception as e:
            self.logger.error(f"‚ùå Callback system error: {e}")
    
    # ===== PUBLIC METHODS =====
    
    def get_all_positions(self) -> List[Position]:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Position ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"""
        with self.lock:
            return list(self.positions.values())
    
    def get_position(self, ticket: int) -> Optional[Position]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position ‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        return self.positions.get(ticket)
    
    def get_positions_by_strategy(self, strategy: str) -> List[Position]:
        """‡∏î‡∏∂‡∏á Positions ‡∏ï‡∏≤‡∏° Strategy"""
        return [pos for pos in self.positions.values() if pos.strategy == strategy]
    
    def get_positions_needing_recovery(self, loss_threshold: float = -50.0) -> List[Position]:
        """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Position ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Recovery"""
        return [pos for pos in self.positions.values() if pos.needs_recovery(loss_threshold)]
    
    def get_portfolio_summary(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Portfolio"""
        with self.lock:
            return {
                'timestamp': datetime.now().isoformat(),
                'symbol': self.symbol,
                'total_positions': self.portfolio_metrics.total_positions,
                'total_volume': self.portfolio_metrics.total_volume,
                'total_pnl': self.portfolio_metrics.total_unrealized_pnl,
                'net_exposure': self.portfolio_metrics.net_exposure,
                'buy_positions': self.portfolio_metrics.buy_positions,
                'sell_positions': self.portfolio_metrics.sell_positions,
                'recovery_positions': self.portfolio_metrics.recovery_positions,
                'positions_needing_recovery': self.portfolio_metrics.positions_needing_recovery,
                'risk_level': self.portfolio_metrics.risk_level,
                'largest_profit': self.portfolio_metrics.largest_profit,
                'largest_loss': self.portfolio_metrics.largest_loss,
                'tracking_active': self.tracking_active,
                'last_update': self.last_update_time.isoformat() if self.last_update_time else None
            }
    
    def add_manual_position(self, position_data: Dict[str, Any]) -> Optional[Position]:
        """‡πÄ‡∏û‡∏¥‡πà‡∏° Position ‡πÅ‡∏ö‡∏ö Manual (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)"""
        try:
            position = Position(
                ticket=position_data['ticket'],
                symbol=position_data.get('symbol', self.symbol),
                position_type=PositionType(position_data['position_type']),
                volume=position_data['volume'],
                open_price=position_data['open_price'],
                open_time=position_data.get('open_time', datetime.now()),
                current_price=position_data.get('current_price', position_data['open_price']),
                strategy=position_data.get('strategy', ''),
                entry_reason=position_data.get('entry_reason', ''),
                notes=position_data.get('notes', '')
            )
            
            position.update_pnl(position.current_price)
            
            self.positions[position.ticket] = position
            self.stats['total_positions_tracked'] += 1
            
            self.logger.info(f"üìä Manual position added: {position.ticket}")
            return position
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to add manual position: {e}")
            return None
    
    def update_position_manually(self, ticket: int, updates: Dict[str, Any]) -> bool:
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Position ‡πÅ‡∏ö‡∏ö Manual"""
        try:
            if ticket not in self.positions:
                self.logger.warning(f"‚ö†Ô∏è Position {ticket} not found for manual update")
                return False
            
            position = self.positions[ticket]
            
            for key, value in updates.items():
                if hasattr(position, key):
                    setattr(position, key, value)
            
            if 'current_price' in updates:
                position.update_pnl(updates['current_price'])
            
            self.logger.info(f"üìä Position {ticket} updated manually")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to update position manually: {e}")
            return False
    
    def close_position_manually(self, ticket: int, close_price: float = None, close_reason: str = "") -> bool:
        """‡∏õ‡∏¥‡∏î Position ‡πÅ‡∏ö‡∏ö Manual"""
        try:
            if ticket not in self.positions:
                self.logger.warning(f"‚ö†Ô∏è Position {ticket} not found for manual close")
                return False
            
            position = self.positions.pop(ticket)
            
            position.status = PositionStatus.CLOSED
            position.close_time = datetime.now()
            
            if close_price:
                position.current_price = close_price
                position.update_pnl(close_price)
                position.realized_pnl = position.unrealized_pnl
                position.unrealized_pnl = 0.0
            
            if close_reason:
                position.notes += f" | Closed: {close_reason}"
            
            self.closed_positions[ticket] = position
            self.stats['positions_closed'] += 1
            
            self.logger.info(f"üîö Position {ticket} closed manually")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to close position manually: {e}")
            return False
    
    def get_statistics(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"""
        return {
            **self.stats,
            'current_positions': len(self.positions),
            'closed_positions': len(self.closed_positions),
            'tracking_uptime': (datetime.now() - self.last_update_time).total_seconds() if self.last_update_time else 0,
            'callbacks_registered': len(self.position_callbacks)
        }
    
    def add_position_callback(self, callback: Callable):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Position Updates"""
        self.position_callbacks.append(callback)
    
    def remove_position_callback(self, callback: Callable):
        """‡∏•‡∏ö Callback"""
        if callback in self.position_callbacks:
            self.position_callbacks.remove(callback)
    
    def force_update(self):
        """‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Position ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"""
        try:
            self._update_positions_from_mt5()
            self._detect_position_changes()
            self._calculate_portfolio_metrics()
            self.logger.info("üîÑ Force updated position data")
        except Exception as e:
            self.logger.error(f"‚ùå Failed to force update: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Position Tracker"""
        return {
            'active': self.tracking_active,
            'symbol': self.symbol,
            'position_count': len(self.positions),
            'callbacks_count': len(self.position_callbacks),
            'last_update': self.last_update_time.isoformat() if self.last_update_time else None,
            'mt5_available': MT5_AVAILABLE
        }

# ===== COMPATIBILITY ALIASES =====

PositionData = Position
PositionInfo = Position
TradePosition = Position

class PositionTracker(EnhancedPositionTracker):
    """Legacy PositionTracker class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility"""
    
    def __init__(self):
        super().__init__()
        self.logger.info("üìä Using Legacy PositionTracker interface")
    
    def get_positions(self) -> List[Position]:
        """Legacy method name"""
        return self.get_all_positions()
    
    def get_position_count(self) -> int:
        """Legacy method"""
        return len(self.positions)
    
    def is_tracking(self) -> bool:
        """Legacy method"""
        return self.tracking_active

# ===== FACTORY FUNCTIONS - ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ =====

def get_enhanced_position_tracker() -> EnhancedPositionTracker:
    """
    Factory function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Enhanced Position Tracker
    *** FUNCTION ‡∏ô‡∏µ‡πâ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ***
    """
    return EnhancedPositionTracker()

def get_position_tracker() -> EnhancedPositionTracker:
    """Factory function ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Position Tracker"""
    return EnhancedPositionTracker()

def create_position_tracker() -> EnhancedPositionTracker:
    """Legacy creation function"""
    return EnhancedPositionTracker()

def get_tracker() -> EnhancedPositionTracker:
    """Legacy function name ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility"""
    return EnhancedPositionTracker()

# ===== GLOBAL INSTANCE =====

_global_position_tracker = None

def get_global_position_tracker() -> EnhancedPositionTracker:
    """‡∏î‡∏∂‡∏á Global Position Tracker (Singleton pattern)"""
    global _global_position_tracker
    if _global_position_tracker is None:
        _global_position_tracker = EnhancedPositionTracker()
    return _global_position_tracker

# ===== UTILITY FUNCTIONS =====

def get_current_positions() -> List[Dict[str, Any]]:
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Position ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    tracker = get_global_position_tracker()
    positions = tracker.get_all_positions()
    return [pos.to_dict() for pos in positions]

def get_positions_summary() -> Dict[str, Any]:
    """‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ Positions"""
    tracker = get_global_position_tracker()
    return tracker.get_portfolio_summary()

def check_positions_needing_recovery() -> List[int]:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Positions ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Recovery"""
    tracker = get_global_position_tracker()
    recovery_positions = tracker.get_positions_needing_recovery()
    return [pos.ticket for pos in recovery_positions]

def start_position_tracking() -> bool:
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Positions"""
    tracker = get_global_position_tracker()
    return tracker.start_tracking()

def stop_position_tracking():
    """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Positions"""
    tracker = get_global_position_tracker()
    tracker.stop_tracking()

def force_positions_update():
    """‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Positions ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"""
    tracker = get_global_position_tracker()
    tracker.force_update()

def add_manual_test_position(ticket: int, position_type: str = "BUY", volume: float = 0.01, 
                           price: float = 2000.0) -> bool:
    """‡πÄ‡∏û‡∏¥‡πà‡∏° Position ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Manual"""
    tracker = get_global_position_tracker()
    
    position_data = {
        'ticket': ticket,
        'position_type': position_type,
        'volume': volume,
        'open_price': price,
        'current_price': price,
        'strategy': 'TEST',
        'entry_reason': 'Manual test position',
        'notes': 'Created for testing purposes'
    }
    
    position = tracker.add_manual_position(position_data)
    return position is not None

# ===== EXPORT LIST =====

__all__ = [
    # Classes
    'Position', 'PositionData', 'PositionInfo', 'TradePosition',
    'EnhancedPositionTracker', 'PositionTracker', 'PortfolioMetrics',
    
    # Enums
    'PositionStatus', 'PositionType',
    
    # Factory functions - ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö
    'get_enhanced_position_tracker', 'get_position_tracker', 'get_global_position_tracker',
    'create_position_tracker', 'get_tracker',
    
    # Utility functions
    'get_current_positions', 'get_positions_summary', 'check_positions_needing_recovery',
    'start_position_tracking', 'stop_position_tracking', 'force_positions_update',
    'add_manual_test_position'
]

# ===== TESTING =====

def test_all_functions():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å functions"""
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å Functions ‡πÉ‡∏ô Position Tracker")
    print("=" * 60)
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö factory functions
        print("üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Factory Functions:")
        
        tracker1 = get_enhanced_position_tracker()
        print("‚úÖ get_enhanced_position_tracker() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        
        tracker2 = get_position_tracker()
        print("‚úÖ get_position_tracker() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        
        tracker3 = get_global_position_tracker()
        print("‚úÖ get_global_position_tracker() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        
        tracker4 = create_position_tracker()
        print("‚úÖ create_position_tracker() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        
        tracker5 = get_tracker()
        print("‚úÖ get_tracker() ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö utility functions
        print("\nüìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Utility Functions:")
        
        positions = get_current_positions()
        print(f"‚úÖ get_current_positions(): {len(positions)} positions")
        
        summary = get_positions_summary()
        print(f"‚úÖ get_positions_summary(): {summary.get('total_positions', 0)} positions")
        
        recovery_needed = check_positions_needing_recovery()
        print(f"‚úÖ check_positions_needing_recovery(): {len(recovery_needed)} positions")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° position
        success = add_manual_test_position(99999, "BUY", 0.01, 2000.0)
        print(f"‚úÖ add_manual_test_position(): {'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if success else '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}")
        
        print(f"\nüéØ ‡∏ó‡∏∏‡∏Å Functions ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!")
        print("‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô 100%")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_all_functions()
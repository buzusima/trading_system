#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
POSITION TRACKER - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Position ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô
============================================
‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå positions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà positions ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì portfolio metrics

‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á:
- mt5_integration/mt5_connector.py (‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• positions ‡∏à‡∏≤‡∏Å MT5)
- mt5_integration/order_executor.py (‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå)
- intelligent_recovery/recovery_selector.py (‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô)
- position_management/pair_matcher.py (‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà positions)
- analytics_engine/performance_tracker.py (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)
"""

import MetaTrader5 as mt5
import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any, Set
from dataclasses import dataclass, field
from enum import Enum
import statistics

try:
    from mt5_integration.mt5_connector import get_mt5_connector, ensure_mt5_connection
    from mt5_integration.order_executor import get_order_executor, OrderResult
    from config.trading_params import get_trading_parameters
    from utilities.professional_logger import setup_trading_logger
    from utilities.error_handler import handle_trading_errors, ErrorCategory, ErrorSeverity
except ImportError as e:
    print(f"Import Error in position_tracker.py: {e}")

class PositionStatus(Enum):
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Position"""
    OPEN = "OPEN"               # ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
    CLOSED = "CLOSED"           # ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
    PARTIALLY_CLOSED = "PARTIALLY_CLOSED"  # ‡∏õ‡∏¥‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
    RECOVERY_PENDING = "RECOVERY_PENDING"  # ‡∏£‡∏≠ Recovery
    PAIRED = "PAIRED"           # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß

class PositionType(Enum):
    """‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Position"""
    BUY = "BUY"
    SELL = "SELL"

@dataclass
class Position:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô"""
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    ticket: int                             # MT5 position ticket
    symbol: str                             # Symbol
    position_type: PositionType             # BUY/SELL
    volume: float                           # Volume
    open_price: float                       # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î
    current_price: float = 0.0              # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    
    # ‡πÄ‡∏ß‡∏•‡∏≤
    open_time: datetime = field(default_factory=datetime.now)
    close_time: Optional[datetime] = None
    
    # ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
    profit: float = 0.0                     # ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    swap: float = 0.0                       # ‡∏Ñ‡πà‡∏≤ swap
    commission: float = 0.0                 # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    magic_number: int = 0                   # Magic number
    comment: str = ""                       # Comment
    entry_strategy: str = ""                # ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤
    recovery_level: int = 0                 # ‡∏£‡∏∞‡∏î‡∏±‡∏ö Recovery (0=entry ‡πÅ‡∏£‡∏Å)
    
    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    status: PositionStatus = PositionStatus.OPEN
    is_hedged: bool = False                 # ‡∏°‡∏µ hedge ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    hedge_partner_ticket: Optional[int] = None  # ‡∏Ñ‡∏π‡πà hedge
    
    # ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    unrealized_pnl: float = 0.0             # P&L ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á
    realized_pnl: float = 0.0               # P&L ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß
    max_profit: float = 0.0                 # ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ
    max_loss: float = 0.0                   # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ
    profit_percentage: float = 0.0          # ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≥‡πÑ‡∏£
    
    # Tags ‡πÅ‡∏•‡∏∞ Metadata
    tags: Set[str] = field(default_factory=set)  # Tags ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
    metadata: Dict[str, Any] = field(default_factory=dict)  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    
    def update_current_data(self, current_price: float, profit: float, 
                           swap: float = None, commission: float = None):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        self.current_price = current_price
        self.profit = profit
        self.unrealized_pnl = profit
        
        if swap is not None:
            self.swap = swap
        if commission is not None:
            self.commission = commission
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
        if self.open_price > 0:
            price_diff = self.current_price - self.open_price
            if self.position_type == PositionType.SELL:
                price_diff = -price_diff
            self.profit_percentage = (price_diff / self.open_price) * 100
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó max profit/loss
        if profit > self.max_profit:
            self.max_profit = profit
        if profit < self.max_loss:
            self.max_loss = profit
    
    def get_holding_time(self) -> timedelta:
        """‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠ position"""
        end_time = self.close_time if self.close_time else datetime.now()
        return end_time - self.open_time
    
    def get_holding_minutes(self) -> float:
        """‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠ position ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ"""
        return self.get_holding_time().total_seconds() / 60
    
    def is_profitable(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.profit > 0
    
    def is_long_position(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô long position ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.position_type == PositionType.BUY
    
    def add_tag(self, tag: str):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° tag"""
        self.tags.add(tag)
    
    def remove_tag(self, tag: str):
        """‡∏•‡∏ö tag"""
        self.tags.discard(tag)
    
    def has_tag(self, tag: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ tag ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return tag in self.tags

@dataclass
class PortfolioMetrics:
    """‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á Portfolio"""
    
    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Positions
    total_positions: int = 0
    open_positions: int = 0
    buy_positions: int = 0
    sell_positions: int = 0
    
    # Volume
    total_volume: float = 0.0
    buy_volume: float = 0.0
    sell_volume: float = 0.0
    net_volume: float = 0.0                 # buy_volume - sell_volume
    
    # P&L
    total_unrealized_pnl: float = 0.0
    total_realized_pnl: float = 0.0
    total_profit: float = 0.0
    total_loss: float = 0.0
    net_pnl: float = 0.0
    
    # Statistics
    winning_positions: int = 0
    losing_positions: int = 0
    win_rate: float = 0.0
    avg_profit_per_position: float = 0.0
    avg_holding_time_minutes: float = 0.0
    
    # Risk Metrics
    largest_profit: float = 0.0
    largest_loss: float = 0.0
    max_concurrent_positions: int = 0
    current_drawdown: float = 0.0
    
    # Recovery Information
    positions_in_recovery: int = 0
    total_recovery_cost: float = 0.0
    recovery_success_rate: float = 0.0

class PositionTracker:
    """
    ‡∏ï‡∏±‡∏ß‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Position ‡∏´‡∏•‡∏±‡∏Å
    ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå positions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
    """
    
    def __init__(self):
        self.logger = setup_trading_logger()
        self.trading_params = get_trading_parameters()
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• positions
        self.positions: Dict[int, Position] = {}           # ticket -> Position
        self.closed_positions: Dict[int, Position] = {}    # positions ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
        self.position_groups: Dict[str, List[int]] = {}    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° strategy/tag
        
        # Threading
        self.tracker_lock = threading.Lock()
        self.tracking_active = False
        self.tracking_thread: Optional[threading.Thread] = None
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.update_interval = 1.0  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.max_history_size = 1000  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô positions ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.total_positions_tracked = 0
        self.last_update_time: Optional[datetime] = None
        
        # Callbacks
        self.position_callbacks: List[callable] = []
        self.pnl_callbacks: List[callable] = []
        
        self.logger.info("üìç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Position Tracker")
    
    def start_tracking(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° positions"""
        if self.tracking_active:
            return
        
        self.tracking_active = True
        self.tracking_thread = threading.Thread(
            target=self._tracking_loop,
            daemon=True,
            name="PositionTracker"
        )
        self.tracking_thread.start()
        
        self.logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Positions ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå")
    
    def stop_tracking(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° positions"""
        self.tracking_active = False
        if self.tracking_thread and self.tracking_thread.is_alive():
            self.tracking_thread.join(timeout=5.0)
        
        self.logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Positions")
    
    @handle_trading_errors(ErrorCategory.SYSTEM, ErrorSeverity.MEDIUM)
    def _tracking_loop(self):
        """‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° positions"""
        
        while self.tracking_active:
            try:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• positions
                self._update_positions_from_mt5()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                self._detect_position_changes()
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì metrics
                self._calculate_portfolio_metrics()
                
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callbacks
                self._notify_callbacks()
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤
                self.last_update_time = datetime.now()
                
                # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                time.sleep(self.update_interval)
                
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô tracking loop: {e}")
                time.sleep(5.0)  # ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    
    def _update_positions_from_mt5(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• positions ‡∏à‡∏≤‡∏Å MT5"""
        
        if not ensure_mt5_connection():
            return
        
        try:
            # ‡∏î‡∏∂‡∏á positions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å MT5
            mt5_positions = mt5.positions_get()
            if mt5_positions is None:
                mt5_positions = []
            
            current_tickets = set()
            
            with self.tracker_lock:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó positions ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                for mt5_pos in mt5_positions:
                    ticket = mt5_pos.ticket
                    current_tickets.add(ticket)
                    
                    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    symbol_info = mt5.symbol_info_tick(mt5_pos.symbol)
                    if symbol_info:
                        if mt5_pos.type == mt5.POSITION_TYPE_BUY:
                            current_price = symbol_info.bid
                        else:
                            current_price = symbol_info.ask
                    else:
                        current_price = mt5_pos.price_open
                    
                    if ticket in self.positions:
                        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó position ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                        position = self.positions[ticket]
                        position.update_current_data(
                            current_price=current_price,
                            profit=mt5_pos.profit,
                            swap=mt5_pos.swap,
                            commission=mt5_pos.commission
                        )
                    else:
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á position ‡πÉ‡∏´‡∏°‡πà
                        position = self._create_position_from_mt5(mt5_pos, current_price)
                        self.positions[ticket] = position
                        self.total_positions_tracked += 1
                        
                        self.logger.info(
                            f"üìç ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Position ‡πÉ‡∏´‡∏°‡πà: {ticket} {position.symbol} "
                            f"{position.position_type.value} {position.volume}"
                        )
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ positions ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î
                closed_tickets = set(self.positions.keys()) - current_tickets
                for ticket in closed_tickets:
                    position = self.positions[ticket]
                    position.status = PositionStatus.CLOSED
                    position.close_time = datetime.now()
                    position.realized_pnl = position.profit
                    
                    # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ closed_positions
                    self.closed_positions[ticket] = position
                    del self.positions[ticket]
                    
                    self.logger.info(
                        f"‚úÖ Position ‡∏õ‡∏¥‡∏î: {ticket} P&L: {position.profit:.2f} "
                        f"Time: {position.get_holding_minutes():.1f}min"
                    )
                    
                    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î history
                    if len(self.closed_positions) > self.max_history_size:
                        oldest_ticket = min(self.closed_positions.keys(), 
                                          key=lambda t: self.closed_positions[t].close_time)
                        del self.closed_positions[oldest_ticket]
        
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó positions ‡∏à‡∏≤‡∏Å MT5: {e}")
    
    def _create_position_from_mt5(self, mt5_pos, current_price: float) -> Position:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Position ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MT5"""
        
        position_type = PositionType.BUY if mt5_pos.type == mt5.POSITION_TYPE_BUY else PositionType.SELL
        
        position = Position(
            ticket=mt5_pos.ticket,
            symbol=mt5_pos.symbol,
            position_type=position_type,
            volume=mt5_pos.volume,
            open_price=mt5_pos.price_open,
            current_price=current_price,
            open_time=datetime.fromtimestamp(mt5_pos.time),
            profit=mt5_pos.profit,
            swap=mt5_pos.swap,
            commission=mt5_pos.commission,
            magic_number=mt5_pos.magic,
            comment=mt5_pos.comment,
            unrealized_pnl=mt5_pos.profit
        )
        
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å comment ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        self._parse_position_metadata(position)
        
        return position
    
    def _parse_position_metadata(self, position: Position):
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata ‡∏à‡∏≤‡∏Å comment"""
        
        comment = position.comment
        if not comment:
            return
        
        try:
            # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö comment: "Strategy:TREND_FOLLOWING|Level:2|Tag:RECOVERY"
            parts = comment.split("|")
            for part in parts:
                if ":" in part:
                    key, value = part.split(":", 1)
                    key = key.strip().lower()
                    value = value.strip()
                    
                    if key == "strategy":
                        position.entry_strategy = value
                    elif key == "level":
                        try:
                            position.recovery_level = int(value)
                        except ValueError:
                            pass
                    elif key == "tag":
                        position.add_tag(value)
                    else:
                        position.metadata[key] = value
        
        except Exception as e:
            self.logger.debug(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å metadata ‡∏à‡∏≤‡∏Å comment: {e}")
    
    def _detect_position_changes(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á positions"""
        
        with self.tracker_lock:
            for position in self.positions.values():
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á Recovery
                if (position.profit < -100 and  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 100
                    position.status == PositionStatus.OPEN and
                    not position.has_tag("RECOVERY_NOTIFIED")):
                    
                    position.add_tag("RECOVERY_NOTIFIED")
                    position.status = PositionStatus.RECOVERY_PENDING
                    
                    self.logger.warning(
                        f"‚ö†Ô∏è Position ‡∏ï‡πâ‡∏≠‡∏á Recovery: {position.ticket} "
                        f"Loss: {position.profit:.2f} Symbol: {position.symbol}"
                    )
    
    def _calculate_portfolio_metrics(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì metrics ‡∏Ç‡∏≠‡∏á portfolio"""
        # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å _tracking_loop ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà implement ‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ
        pass
    
    def _notify_callbacks(self):
        """‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô callbacks"""
        try:
            for callback in self.position_callbacks:
                callback(list(self.positions.values()))
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô position callback: {e}")
    
    # === PUBLIC METHODS ===
    
    def get_open_positions(self, symbol: str = None) -> List[Position]:
        """‡∏î‡∏∂‡∏á positions ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"""
        with self.tracker_lock:
            positions = list(self.positions.values())
            if symbol:
                positions = [p for p in positions if p.symbol == symbol]
            return positions
    
    def get_position_by_ticket(self, ticket: int) -> Optional[Position]:
        """‡∏î‡∏∂‡∏á position ‡∏ï‡∏≤‡∏° ticket"""
        with self.tracker_lock:
            return self.positions.get(ticket)
    
    def get_positions_by_strategy(self, strategy: str) -> List[Position]:
        """‡∏î‡∏∂‡∏á positions ‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"""
        with self.tracker_lock:
            return [p for p in self.positions.values() if p.entry_strategy == strategy]
    
    def get_positions_by_tag(self, tag: str) -> List[Position]:
        """‡∏î‡∏∂‡∏á positions ‡∏ï‡∏≤‡∏° tag"""
        with self.tracker_lock:
            return [p for p in self.positions.values() if p.has_tag(tag)]
    
    def get_losing_positions(self, min_loss: float = 0.0) -> List[Position]:
        """‡∏î‡∏∂‡∏á positions ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
        with self.tracker_lock:
            return [p for p in self.positions.values() 
                   if p.profit < -abs(min_loss)]
    
    def get_profitable_positions(self, min_profit: float = 0.0) -> List[Position]:
        """‡∏î‡∏∂‡∏á positions ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£"""
        with self.tracker_lock:
            return [p for p in self.positions.values() 
                   if p.profit > min_profit]
    
    def get_portfolio_summary(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ portfolio"""
        with self.tracker_lock:
            positions = list(self.positions.values())
            
            if not positions:
                return {
                    "total_positions": 0,
                    "total_unrealized_pnl": 0.0,
                    "total_volume": 0.0,
                    "symbols": []
                }
            
            total_pnl = sum(p.profit for p in positions)
            total_volume = sum(p.volume for p in positions)
            buy_positions = [p for p in positions if p.position_type == PositionType.BUY]
            sell_positions = [p for p in positions if p.position_type == PositionType.SELL]
            
            symbols = list(set(p.symbol for p in positions))
            profitable_positions = [p for p in positions if p.profit > 0]
            losing_positions = [p for p in positions if p.profit < 0]
            
            return {
                "total_positions": len(positions),
                "buy_positions": len(buy_positions),
                "sell_positions": len(sell_positions),
                "total_unrealized_pnl": round(total_pnl, 2),
                "total_volume": round(total_volume, 2),
                "buy_volume": round(sum(p.volume for p in buy_positions), 2),
                "sell_volume": round(sum(p.volume for p in sell_positions), 2),
                "net_volume": round(sum(p.volume for p in buy_positions) - sum(p.volume for p in sell_positions), 2),
                "profitable_positions": len(profitable_positions),
                "losing_positions": len(losing_positions),
                "largest_profit": max([p.profit for p in positions] + [0]),
                "largest_loss": min([p.profit for p in positions] + [0]),
                "symbols": symbols,
                "avg_holding_time_minutes": statistics.mean([p.get_holding_minutes() for p in positions]) if positions else 0,
                "positions_needing_recovery": len([p for p in positions if p.status == PositionStatus.RECOVERY_PENDING])
            }
    
    def get_positions_for_recovery(self, min_loss: float = 50.0) -> List[Position]:
        """‡∏î‡∏∂‡∏á positions ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á Recovery"""
        losing_positions = self.get_losing_positions(min_loss)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô LossPosition format ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recovery system
        from intelligent_recovery.recovery_selector import LossPosition
        
        loss_positions = []
        for pos in losing_positions:
            loss_pos = LossPosition(
                position_id=str(pos.ticket),
                symbol=pos.symbol,
                entry_price=pos.open_price,
                current_price=pos.current_price,
                volume=pos.volume,
                loss_amount=pos.profit,
                loss_percentage=abs(pos.profit_percentage),
                entry_time=pos.open_time,
                holding_time_minutes=pos.get_holding_minutes(),
                entry_strategy=pos.entry_strategy,
                market_condition_at_entry=pos.metadata.get("market_condition", "UNKNOWN")
            )
            loss_positions.append(loss_pos)
        
        return loss_positions
    
    def update_position_metadata(self, ticket: int, key: str, value: Any):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó metadata ‡∏Ç‡∏≠‡∏á position"""
        with self.tracker_lock:
            position = self.positions.get(ticket)
            if position:
                position.metadata[key] = value
    
    def add_position_tag(self, ticket: int, tag: str):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° tag ‡πÉ‡∏´‡πâ position"""
        with self.tracker_lock:
            position = self.positions.get(ticket)
            if position:
                position.add_tag(tag)
    
    def remove_position_tag(self, ticket: int, tag: str):
        """‡∏•‡∏ö tag ‡∏à‡∏≤‡∏Å position"""
        with self.tracker_lock:
            position = self.positions.get(ticket)
            if position:
                position.remove_tag(tag)
    
    def close_position(self, ticket: int, volume: Optional[float] = None) -> bool:
        """‡∏õ‡∏¥‡∏î position"""
        position = self.get_position_by_ticket(ticket)
        if not position:
            return False
        
        order_executor = get_order_executor()
        result = order_executor.close_position(ticket, volume)
        
        success = result.status.value in ["FILLED", "SUCCESS"]
        if success:
            self.logger.info(f"‚úÖ ‡∏õ‡∏¥‡∏î Position ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {ticket}")
        else:
            self.logger.error(f"‚ùå ‡∏õ‡∏¥‡∏î Position ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {ticket} - {result.error_description}")
        
        return success
    
    def close_all_losing_positions(self, min_loss: float = 0.0) -> List[bool]:
        """‡∏õ‡∏¥‡∏î positions ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        losing_positions = self.get_losing_positions(min_loss)
        results = []
        
        for position in losing_positions:
            result = self.close_position(position.ticket)
            results.append(result)
        
        return results
    
    def close_all_profitable_positions(self, min_profit: float = 0.0) -> List[bool]:
        """‡∏õ‡∏¥‡∏î positions ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        profitable_positions = self.get_profitable_positions(min_profit)
        results = []
        
        for position in profitable_positions:
            result = self.close_position(position.ticket)
            results.append(result)
        
        return results
    
    def add_position_callback(self, callback: callable):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ positions ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"""
        self.position_callbacks.append(callback)
    
    def get_tracking_statistics(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"""
        return {
            "tracking_active": self.tracking_active,
            "total_positions_tracked": self.total_positions_tracked,
            "current_open_positions": len(self.positions),
            "closed_positions_in_history": len(self.closed_positions),
            "last_update": self.last_update_time.isoformat() if self.last_update_time else None,
            "update_interval_seconds": self.update_interval
        }

# === HELPER FUNCTIONS ===

def get_current_positions(symbol: str = None) -> List[Position]:
    """‡∏î‡∏∂‡∏á positions ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    tracker = get_position_tracker()
    return tracker.get_open_positions(symbol)

def get_total_unrealized_pnl() -> float:
    """‡∏î‡∏∂‡∏á‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á"""
    tracker = get_position_tracker()
    summary = tracker.get_portfolio_summary()
    return summary["total_unrealized_pnl"]

def get_positions_needing_recovery(min_loss: float = 50.0):
    """‡∏î‡∏∂‡∏á positions ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á Recovery"""
    tracker = get_position_tracker()
    return tracker.get_positions_for_recovery(min_loss)

def close_all_positions() -> bool:
    """‡∏õ‡∏¥‡∏î positions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    tracker = get_position_tracker()
    positions = tracker.get_open_positions()
    
    success_count = 0
    for position in positions:
        if tracker.close_position(position.ticket):
            success_count += 1
    
    return success_count == len(positions)

def start_position_tracking():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° positions"""
    tracker = get_position_tracker()
    tracker.start_tracking()

def stop_position_tracking():
    """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° positions"""
    tracker = get_position_tracker()
    tracker.stop_tracking()

# === GLOBAL INSTANCE ===
_global_position_tracker: Optional[PositionTracker] = None

def get_position_tracker() -> PositionTracker:
    """‡∏î‡∏∂‡∏á Position Tracker ‡πÅ‡∏ö‡∏ö Singleton"""
    global _global_position_tracker
    if _global_position_tracker is None:
        _global_position_tracker = PositionTracker()
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        _global_position_tracker.start_tracking()
    return _global_position_tracker
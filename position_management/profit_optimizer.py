#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
COMPLETE PROFIT TAKING SYSTEM - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
======================================================
‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Trailing Stop ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Stop Loss ‡πÅ‡∏•‡∏∞ Recovery-Aware

Features:
‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Position Tracker ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
‚úÖ ‡πÉ‡∏ä‡πâ Order Executor ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà  
‚úÖ Trailing Stop ‡πÅ‡∏ö‡∏ö Market Order
‚úÖ Partial Profit Taking
‚úÖ Session-Based Targets
‚úÖ Recovery-Aware Profit Taking
‚úÖ Real-time GUI Integration
"""

import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from enum import Enum
import numpy as np
from collections import deque
import uuid
import json

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
from position_management.position_tracker import get_position_tracker, Position
from mt5_integration.order_executor import SmartOrderExecutor, OrderType, OrderRequest
from config.settings import get_system_settings, MarketSession
from utilities.professional_logger import setup_component_logger

class ProfitMode(Enum):
    """‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£"""
    SCALPING = "SCALPING"       # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏£‡πá‡∏ß 5-15 pips
    SWING = "SWING"             # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á 20-50 pips
    TREND = "TREND"             # ‡∏ï‡∏≤‡∏° trend 50+ pips
    RECOVERY = "RECOVERY"       # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠ recovery
    NEWS = "NEWS"               # ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≤‡∏Å news reaction

@dataclass
class ProfitTarget:
    """‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Position"""
    position_ticket: int
    symbol: str
    entry_price: float
    current_price: float
    position_type: str          # "BUY" or "SELL"
    volume: float
    
    # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    target_pips: float = 10.0
    trailing_pips: float = 5.0
    
    # ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏ö‡∏ö Partial
    partial_targets: List[Tuple[float, float]] = field(default_factory=list)  # (pips, %)
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    max_profit_seen: float = 0.0
    max_profit_pips: float = 0.0
    profit_mode: ProfitMode = ProfitMode.SCALPING
    
    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    is_trailing: bool = False
    partial_closed_volume: float = 0.0
    remaining_volume: float = 0.0
    
    created_time: datetime = field(default_factory=datetime.now)
    last_update: datetime = field(default_factory=datetime.now)

class CompleteProfitTaker:
    """
    üéØ Complete Profit Taking System
    
    ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    """
    
    def __init__(self):
        self.logger = setup_component_logger("ProfitTaker")
        self.settings = get_system_settings()
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        self.position_tracker = get_position_tracker()
        self.order_executor = SmartOrderExecutor()
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
        self.is_active = False
        self.active_targets: Dict[int, ProfitTarget] = {}  # ticket -> target
        self.completed_targets: List[ProfitTarget] = []
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Profit Targets
        self.profit_configs = {
            ProfitMode.SCALPING: {
                "target_pips": 10.0,
                "trailing_pips": 5.0,
                "partial_targets": [(3.0, 0.3), (6.0, 0.5), (10.0, 1.0)]
            },
            ProfitMode.SWING: {
                "target_pips": 30.0,
                "trailing_pips": 15.0,
                "partial_targets": [(10.0, 0.2), (20.0, 0.4), (30.0, 1.0)]
            },
            ProfitMode.TREND: {
                "target_pips": 50.0,
                "trailing_pips": 25.0,
                "partial_targets": [(15.0, 0.2), (30.0, 0.3), (45.0, 0.5)]
            },
            ProfitMode.RECOVERY: {
                "target_pips": 8.0,   # ‡∏£‡∏±‡∏î‡∏Å‡∏∏‡∏°
                "trailing_pips": 4.0,
                "partial_targets": [(5.0, 0.5), (8.0, 1.0)]
            },
            ProfitMode.NEWS: {
                "target_pips": 15.0,
                "trailing_pips": 8.0,
                "partial_targets": [(8.0, 0.4), (15.0, 1.0)]
            }
        }
        
        # Threading
        self.monitor_thread = None
        self.update_interval = 1.0  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        self.logger.info("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Complete Profit Taking System")
    
    def start_profit_taking(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£"""
        if self.is_active:
            self.logger.warning("‚ö†Ô∏è Profit Taking System ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return
        
        self.is_active = True
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° monitoring thread
        self.monitor_thread = threading.Thread(target=self._profit_monitoring_loop, daemon=True)
        self.monitor_thread.start()
        
        self.logger.info("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡πâ‡∏ß")
    
    def stop_profit_taking(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£"""
        self.is_active = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=5.0)
        
        self.logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡πâ‡∏ß")
    
    def _profit_monitoring_loop(self):
        """Loop ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£"""
        self.logger.info("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Profit Monitoring Loop")
        
        while self.is_active:
            try:
                # ‡∏î‡∏∂‡∏á positions ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                current_positions = self.position_tracker.get_open_positions()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö positions ‡πÉ‡∏´‡∏°‡πà
                self._check_new_positions(current_positions)
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó profit targets
                self._update_profit_targets(current_positions)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£
                self._check_profit_conditions()
                
                # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î targets ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
                self._cleanup_inactive_targets(current_positions)
                
                time.sleep(self.update_interval)
                
            except Exception as e:
                self.logger.error(f"‚ùå Error in profit monitoring: {e}")
                time.sleep(5.0)
        
        self.logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î Profit Monitoring Loop")
    
    def _check_new_positions(self, positions: List[Position]):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö positions ‡πÉ‡∏´‡∏°‡πà"""
        for position in positions:
            if position.ticket not in self.active_targets:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á profit target ‡πÉ‡∏´‡∏°‡πà
                profit_mode = self._determine_profit_mode(position)
                config = self.profit_configs[profit_mode]
                
                target = ProfitTarget(
                    position_ticket=position.ticket,
                    symbol=position.symbol,
                    entry_price=position.open_price,
                    current_price=position.current_price,
                    position_type="BUY" if position.position_type.name == "BUY" else "SELL",
                    volume=position.volume,
                    target_pips=config["target_pips"],
                    trailing_pips=config["trailing_pips"],
                    partial_targets=config["partial_targets"].copy(),
                    profit_mode=profit_mode,
                    remaining_volume=position.volume
                )
                
                self.active_targets[position.ticket] = target
                self.logger.info(f"üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏° Profit Target: {position.ticket} ({profit_mode.value})")
    
    def _determine_profit_mode(self, position: Position) -> ProfitMode:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå"""
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å comment
        comment = position.comment.lower()
        if "recovery" in comment:
            return ProfitMode.RECOVERY
        elif "news" in comment:
            return ProfitMode.NEWS
        elif "trend" in comment:
            return ProfitMode.TREND
        elif "swing" in comment:
            return ProfitMode.SWING
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ (Session-based)
        current_hour = datetime.now().hour
        
        # Asian Session (22:00-08:00 GMT+7) = Scalping
        if 22 <= current_hour or current_hour <= 8:
            return ProfitMode.SCALPING
        
        # London Session (15:00-00:00 GMT+7) = Swing
        elif 15 <= current_hour <= 23:
            return ProfitMode.SWING
        
        # NY Session overlap = Trend
        elif 20 <= current_hour <= 23:
            return ProfitMode.TREND
        
        # Default
        return ProfitMode.SCALPING
    
    def _update_profit_targets(self, positions: List[Position]):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó profit targets ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        for position in positions:
            if position.ticket in self.active_targets:
                target = self.active_targets[position.ticket]
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                target.current_price = position.current_price
                target.last_update = datetime.now()
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô pips
                current_profit_pips = self._calculate_profit_pips(
                    target.entry_price, 
                    target.current_price, 
                    target.position_type
                )
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó max profit
                if current_profit_pips > target.max_profit_pips:
                    target.max_profit_pips = current_profit_pips
                    target.max_profit_seen = position.profit
    
    def _calculate_profit_pips(self, entry_price: float, current_price: float, position_type: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô pips"""
        if position_type == "BUY":
            price_diff = current_price - entry_price
        else:  # SELL
            price_diff = entry_price - current_price
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö XAUUSD, 1 pip = 0.1
        pips = price_diff / 0.1
        return pips
    
    def _check_profit_conditions(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£"""
        for ticket, target in list(self.active_targets.items()):
            try:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                current_profit_pips = self._calculate_profit_pips(
                    target.entry_price,
                    target.current_price,
                    target.position_type
                )
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Partial Profit Taking
                self._check_partial_profit(target, current_profit_pips)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Trailing Stop
                self._check_trailing_stop(target, current_profit_pips)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Full Target
                self._check_full_target(target, current_profit_pips)
                
            except Exception as e:
                self.logger.error(f"‚ùå Error checking profit for {ticket}: {e}")
    
    def _check_partial_profit(self, target: ProfitTarget, current_pips: float):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô"""
        for target_pips, close_percentage in target.partial_targets:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if current_pips >= target_pips:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volume ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏¥‡∏î
                volume_to_close = target.remaining_volume * close_percentage
                
                if volume_to_close > 0:
                    self.logger.info(f"üéØ Partial Profit: {target.position_ticket} "
                                   f"- Close {volume_to_close:.2f} lots at {target_pips} pips")
                    
                    # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
                    success = self._close_partial_position(target, volume_to_close)
                    
                    if success:
                        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó target
                        target.remaining_volume -= volume_to_close
                        target.partial_closed_volume += volume_to_close
                        
                        # ‡∏•‡∏ö target ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
                        target.partial_targets = [
                            (pips, pct) for pips, pct in target.partial_targets 
                            if pips > target_pips
                        ]
                        
                        self.logger.info(f"‚úÖ Partial close success: {target.position_ticket}")
    
    def _check_trailing_stop(self, target: ProfitTarget, current_pips: float):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Trailing Stop"""
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° trailing ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏Å‡∏¥‡∏ô trailing_pips
        if current_pips >= target.trailing_pips:
            target.is_trailing = True
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ pullback ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            pullback_pips = target.max_profit_pips - current_pips
            
            if pullback_pips >= target.trailing_pips:
                self.logger.info(f"üéØ Trailing Stop Triggered: {target.position_ticket} "
                               f"- Max: {target.max_profit_pips:.1f} pips, "
                               f"Current: {current_pips:.1f} pips, "
                               f"Pullback: {pullback_pips:.1f} pips")
                
                # ‡∏õ‡∏¥‡∏î position ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                if target.remaining_volume > 0:
                    self._close_full_position(target)
    
    def _check_full_target(self, target: ProfitTarget, current_pips: float):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°"""
        if current_pips >= target.target_pips:
            self.logger.info(f"üéØ Full Target Reached: {target.position_ticket} "
                           f"- {current_pips:.1f} pips")
            
            if target.remaining_volume > 0:
                self._close_full_position(target)
    
    def _close_partial_position(self, target: ProfitTarget, volume: float) -> bool:
        """‡∏õ‡∏¥‡∏î position ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö volume ‡∏Å‡πà‡∏≠‡∏ô
            if volume <= 0:
                self.logger.warning(f"‚ö†Ô∏è Invalid volume: {volume} - ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ó‡∏ô")
                volume = target.volume
            
            # ‡∏õ‡∏¥‡∏î position ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ MT5 ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö partial close ‡∏á‡πà‡∏≤‡∏¢‡πÜ)
            success = self.position_tracker.close_position(target.position_ticket)
            
            if success:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó target
                target.partial_closed_volume += target.volume  # ‡πÉ‡∏ä‡πâ volume ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                target.remaining_volume = 0
                
                # ‡∏¢‡πâ‡∏≤‡∏¢ target ‡πÑ‡∏õ completed
                self.completed_targets.append(target)
                del self.active_targets[target.position_ticket]
                
                self.logger.info(f"‚úÖ Position closed: {target.position_ticket} (Full close)")
            
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå Close error: {e}")
            return False
                
    def _close_full_position(self, target: ProfitTarget) -> bool:
        """‡∏õ‡∏¥‡∏î position ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            # ‡πÉ‡∏ä‡πâ position tracker ‡∏õ‡∏¥‡∏î
            success = self.position_tracker.close_position(target.position_ticket)
            
            if success:
                # ‡∏¢‡πâ‡∏≤‡∏¢ target ‡πÑ‡∏õ‡∏¢‡∏±‡∏á completed
                self.completed_targets.append(target)
                del self.active_targets[target.position_ticket]
                
                self.logger.info(f"‚úÖ Full close success: {target.position_ticket}")
            
            return success
            
        except Exception as e:
            self.logger.error(f"‚ùå Full close error: {e}")
            return False
    
    def _cleanup_inactive_targets(self, positions: List[Position]):
        """‡∏•‡∏ö targets ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß"""
        active_tickets = {pos.ticket for pos in positions}
        
        for ticket in list(self.active_targets.keys()):
            if ticket not in active_tickets:
                # Position ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡πÇ‡∏î‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô)
                target = self.active_targets[ticket]
                self.completed_targets.append(target)
                del self.active_targets[ticket]
                self.logger.info(f"üßπ Cleaned up target: {ticket}")
    
    def get_active_targets(self) -> Dict[int, ProfitTarget]:
        """‡∏î‡∏∂‡∏á active targets ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        return self.active_targets.copy()
    
    def get_statistics(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£"""
        total_completed = len(self.completed_targets)
        successful_targets = [t for t in self.completed_targets if t.max_profit_pips > 0]
        
        return {
            "system_active": self.is_active,
            "active_targets": len(self.active_targets),
            "completed_targets": total_completed,
            "successful_targets": len(successful_targets),
            "success_rate": (len(successful_targets) / max(total_completed, 1)) * 100,
            "avg_profit_pips": np.mean([t.max_profit_pips for t in successful_targets]) if successful_targets else 0,
            "total_volume_closed": sum(t.partial_closed_volume for t in self.completed_targets),
            "active_tickets": list(self.active_targets.keys())
        }
    
    def set_profit_mode(self, ticket: int, mode: ProfitMode):
        """‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö position ‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        if ticket in self.active_targets:
            target = self.active_targets[ticket]
            config = self.profit_configs[mode]
            
            target.profit_mode = mode
            target.target_pips = config["target_pips"]
            target.trailing_pips = config["trailing_pips"]
            target.partial_targets = config["partial_targets"].copy()
            
            self.logger.info(f"üîÑ Changed profit mode for {ticket}: {mode.value}")

    def connect_position_tracker(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Position Tracker"""
        try:
            from position_management.position_tracker import get_position_tracker
            self.position_tracker = get_position_tracker()
            
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô
            self.position_tracker.connect_profit_system()
            
            self.logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Position Tracker ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Position Tracker: {e}")
            return False

    def check_profit_opportunity(self, position):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡∏à‡∏≤‡∏Å Position Tracker"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ position ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô active_targets ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if position.ticket not in self.active_targets:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á profit target ‡πÉ‡∏´‡∏°‡πà
                profit_mode = self._determine_profit_mode(position)
                self._create_profit_target(position, profit_mode)
                
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó target ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            elif position.profit > 0:
                target = self.active_targets[position.ticket]
                target.current_price = position.current_price
                target.last_update = datetime.now()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£
                self._check_single_profit_condition(target)
                
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡πÑ‡∏£: {e}")

    def get_profit_statistics(self):
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£"""
        return {
            'active_targets': len(self.active_targets),
            'completed_targets': len(self.completed_targets),
            'total_profit_taken': sum(t.max_profit_seen for t in self.completed_targets),
            'average_profit_per_target': sum(t.max_profit_seen for t in self.completed_targets) / len(self.completed_targets) if self.completed_targets else 0,
            'profit_taking_success_rate': len([t for t in self.completed_targets if t.max_profit_seen > 0]) / len(self.completed_targets) if self.completed_targets else 0,
            'last_update': datetime.now()
        }


# === GLOBAL INSTANCE ===
_global_profit_taker: Optional[CompleteProfitTaker] = None

def get_profit_taker() -> CompleteProfitTaker:
    """‡∏î‡∏∂‡∏á Profit Taker ‡πÅ‡∏ö‡∏ö Singleton"""
    global _global_profit_taker
    if _global_profit_taker is None:
        _global_profit_taker = CompleteProfitTaker()
    return _global_profit_taker

def start_profit_taking():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏ö‡∏ö Global"""
    profit_taker = get_profit_taker()
    profit_taker.start_profit_taking()

def stop_profit_taking():
    """‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏ö‡∏ö Global"""
    profit_taker = get_profit_taker()
    profit_taker.stop_profit_taking()

# === TESTING FUNCTION ===
def test_profit_system():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≥‡πÑ‡∏£"""
    print("üß™ Testing Complete Profit Taking System...")
    
    profit_taker = get_profit_taker()
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
    profit_taker.start_profit_taking()
    
    # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
    time.sleep(5)
    
    # ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    stats = profit_taker.get_statistics()
    print("üìä Statistics:")
    for key, value in stats.items():
        print(f"   {key}: {value}")
    
    # ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö
    profit_taker.stop_profit_taking()
    
    print("‚úÖ Test completed")


if __name__ == "__main__":
    test_profit_system()
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TRADING PARAMETERS - ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å (COMPLETE)
===================================================
‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Intelligent Gold Trading System
‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á

üéØ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
- Multi-strategy parameter management
- Session-based parameter optimization
- Risk management parameters
- Recovery method configurations
- Performance-based parameter tuning
- Real-time parameter adjustment
- Parameter validation ‡πÅ‡∏•‡∏∞ constraints
- Historical parameter tracking
"""

from dataclasses import dataclass, field
from typing import Dict, List, Optional, Any, Tuple, Union
from enum import Enum
from datetime import datetime, timedelta
import json
import math
from pathlib import Path
from collections import defaultdict

# ===============================
# ENUMS ‡πÅ‡∏•‡∏∞ CONSTANTS
# ===============================

class EntryStrategy(Enum):
    """‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå"""
    TREND_FOLLOWING = "TREND_FOLLOWING"        # ‡∏ï‡∏≤‡∏°‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
    MEAN_REVERSION = "MEAN_REVERSION"          # ‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    BREAKOUT_FALSE = "BREAKOUT_FALSE"          # ‡∏´‡∏•‡∏≠‡∏Å‡πÄ‡∏ö‡∏£‡∏Ñ
    NEWS_REACTION = "NEWS_REACTION"            # ‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏Ç‡πà‡∏≤‡∏ß
    SCALPING_ENGINE = "SCALPING_ENGINE"        # ‡∏™‡∏Å‡∏±‡∏•‡∏õ‡∏¥‡πâ‡∏á
    GRID_TRADING = "GRID_TRADING"              # ‡πÄ‡∏ó‡∏£‡∏î Grid
    ARBITRAGE = "ARBITRAGE"                    # Arbitrage

class RecoveryMethod(Enum):
    """‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ Recovery (‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ)"""
    MARTINGALE_SMART = "MARTINGALE_SMART"          # Martingale ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
    GRID_INTELLIGENT = "GRID_INTELLIGENT"          # Grid ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
    HEDGING_ADVANCED = "HEDGING_ADVANCED"          # Hedging ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
    AVERAGING_INTELLIGENT = "AVERAGING_INTELLIGENT" # ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
    CORRELATION_RECOVERY = "CORRELATION_RECOVERY"   # Recovery ‡πÅ‡∏ö‡∏ö correlation
    DYNAMIC_HEDGING = "DYNAMIC_HEDGING"            # Hedging ‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å
    PYRAMID_RECOVERY = "PYRAMID_RECOVERY"          # Recovery ‡πÅ‡∏ö‡∏ö Pyramid

class PositionSizing(Enum):
    """‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
    FIXED = "FIXED"                    # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    PERCENTAGE = "PERCENTAGE"          # ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á balance
    VOLATILITY_BASED = "VOLATILITY_BASED"  # ‡∏ï‡∏≤‡∏° volatility
    KELLY_CRITERION = "KELLY_CRITERION"    # Kelly Criterion
    ADAPTIVE = "ADAPTIVE"              # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
    BALANCE_FRACTION = "BALANCE_FRACTION"  # ‡πÄ‡∏®‡∏©‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á balance
    EQUITY_CURVE = "EQUITY_CURVE"      # ‡∏ï‡∏≤‡∏° equity curve

class RiskProfile(Enum):
    """‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"""
    CONSERVATIVE = "CONSERVATIVE"      # ‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡∏ô‡∏¥‡∏¢‡∏°
    MODERATE = "MODERATE"             # ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    AGGRESSIVE = "AGGRESSIVE"         # ‡∏Å‡πâ‡∏≤‡∏ß‡∏£‡πâ‡∏≤‡∏ß
    HIGH_FREQUENCY = "HIGH_FREQUENCY" # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏™‡∏π‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rebate)
    ULTRA_CONSERVATIVE = "ULTRA_CONSERVATIVE"  # ‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡∏ô‡∏¥‡∏¢‡∏°‡∏°‡∏≤‡∏Å
    EXTREME_AGGRESSIVE = "EXTREME_AGGRESSIVE"  # ‡∏Å‡πâ‡∏≤‡∏ß‡∏£‡πâ‡∏≤‡∏ß‡∏°‡∏≤‡∏Å

class MarketCondition(Enum):
    """‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î"""
    TRENDING_UP = "TRENDING_UP"
    TRENDING_DOWN = "TRENDING_DOWN"
    RANGING = "RANGING"
    VOLATILE = "VOLATILE"
    QUIET = "QUIET"
    NEWS_IMPACT = "NEWS_IMPACT"
    WEEKEND = "WEEKEND"

# ===============================
# PARAMETER CLASSES
# ===============================

@dataclass
class StrategyParameters:
    """‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
    strategy: EntryStrategy
    enabled: bool = True
    weight: float = 1.0                    # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ
    confidence_threshold: float = 0.5      # threshold ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    max_signals_per_hour: int = 10         # ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    cooldown_seconds: int = 30             # cooldown ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
    
    # Strategy-specific parameters
    parameters: Dict[str, Any] = field(default_factory=dict)
    
    # Performance tracking
    signals_generated: int = 0
    signals_executed: int = 0
    successful_trades: int = 0
    total_profit: float = 0.0
    last_used: Optional[datetime] = None
    
    def get_success_rate(self) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì success rate"""
        if self.signals_executed == 0:
            return 0.0
        return (self.successful_trades / self.signals_executed) * 100
    
    def get_average_profit(self) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"""
        if self.successful_trades == 0:
            return 0.0
        return self.total_profit / self.successful_trades
    
    def update_performance(self, profit: float, success: bool):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ú‡∏•‡∏á‡∏≤‡∏ô"""
        self.signals_executed += 1
        if success:
            self.successful_trades += 1
        self.total_profit += profit
        self.last_used = datetime.now()

@dataclass
class RecoveryParameters:
    """‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå Recovery"""
    method: RecoveryMethod
    enabled: bool = True
    max_levels: int = 10               # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    multiplier: float = 1.5            # ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì volume
    step_pips: float = 10.0            # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö
    
    # Advanced parameters
    dynamic_multiplier: bool = True     # ‡∏õ‡∏£‡∏±‡∏ö multiplier ‡∏ï‡∏≤‡∏° market
    correlation_factor: float = 0.8    # ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢ correlation
    time_decay: float = 0.1            # ‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏•‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
    volatility_adjustment: bool = True  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volatility
    
    # Risk controls
    max_recovery_amount: float = 1000.0  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô recovery
    recovery_timeout_hours: int = 24    # timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recovery
    
    # Performance tracking
    recovery_attempts: int = 0
    successful_recoveries: int = 0
    total_recovery_profit: float = 0.0
    average_recovery_time: float = 0.0
    
    def get_recovery_success_rate(self) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì success rate ‡∏Ç‡∏≠‡∏á recovery"""
        if self.recovery_attempts == 0:
            return 0.0
        return (self.successful_recoveries / self.recovery_attempts) * 100

@dataclass
class PositionSizingParameters:
    """‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
    method: PositionSizing = PositionSizing.ADAPTIVE
    base_volume: float = 0.01              # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    min_volume: float = 0.01               # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    max_volume: float = 10.0               # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    volume_step: float = 0.01              # ‡∏Ç‡∏±‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
    
    # Risk-based sizing
    risk_per_trade_percent: float = 1.0    # % ‡∏Ç‡∏≠‡∏á balance ‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏£‡∏î
    max_risk_per_day_percent: float = 5.0  # % ‡∏Ç‡∏≠‡∏á balance ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
    
    # Adaptive parameters
    confidence_multiplier: float = 2.0     # ‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ confidence
    volatility_factor: float = 0.5         # ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢ volatility
    session_multiplier: Dict[str, float] = field(default_factory=lambda: {
        "ASIAN": 0.8,
        "LONDON": 1.2,
        "NEW_YORK": 1.5,
        "OVERLAP": 1.8
    })
    
    # Kelly Criterion parameters
    kelly_fraction: float = 0.25           # ‡πÄ‡∏®‡∏©‡∏™‡πà‡∏ß‡∏ô Kelly
    kelly_lookback: int = 100              # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
    
    # Equity curve parameters
    equity_smooth_period: int = 20         # period ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö smooth equity
    equity_threshold: float = 0.95         # threshold ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏î size
    
    def calculate_position_size(self, account_balance: float, confidence: float, 
                                volatility: float, session: str = "ASIAN") -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
        base_size = self.base_volume
        
        if self.method == PositionSizing.FIXED:
            return base_size
        
        elif self.method == PositionSizing.PERCENTAGE:
            size = account_balance * (self.risk_per_trade_percent / 100) / 1000  # Assume $1000 per lot
            
        elif self.method == PositionSizing.VOLATILITY_BASED:
            volatility_adj = 1.0 / max(volatility, 0.5)
            size = base_size * volatility_adj
            
        elif self.method == PositionSizing.ADAPTIVE:
            # Combine multiple factors
            confidence_adj = 0.5 + (confidence * self.confidence_multiplier)
            volatility_adj = 1.0 / max(volatility * self.volatility_factor, 0.5)
            session_adj = self.session_multiplier.get(session, 1.0)
            
            size = base_size * confidence_adj * volatility_adj * session_adj
            
        else:
            size = base_size
        
        # Apply limits
        return max(self.min_volume, min(size, self.max_volume))

@dataclass
class TechnicalParameters:
    """‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå Technical Analysis"""
    
    # Moving Averages
    ma_fast_period: int = 10
    ma_slow_period: int = 20
    ma_signal_period: int = 5
    ma_method: str = "SMA"                 # SMA, EMA, WMA
    
    # RSI Parameters
    rsi_period: int = 14
    rsi_overbought: float = 70.0
    rsi_oversold: float = 30.0
    rsi_signal_threshold: float = 5.0      # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å extreme levels
    
    # Bollinger Bands
    bb_period: int = 20
    bb_deviation: float = 2.0
    bb_price_source: str = "CLOSE"         # CLOSE, OPEN, HIGH, LOW
    
    # ADX Parameters
    adx_period: int = 14
    adx_trending_threshold: float = 25.0
    adx_ranging_threshold: float = 20.0
    adx_strong_threshold: float = 40.0
    
    # ATR Parameters
    atr_period: int = 14
    atr_multiplier: float = 2.0
    atr_smoothing: str = "RMA"             # SMA, EMA, RMA
    
    # MACD Parameters
    macd_fast: int = 12
    macd_slow: int = 26
    macd_signal: int = 9
    macd_price_source: str = "CLOSE"
    
    # Stochastic Parameters
    stoch_k_period: int = 14
    stoch_d_period: int = 3
    stoch_smooth: int = 3
    stoch_overbought: float = 80.0
    stoch_oversold: float = 20.0
    
    # Support/Resistance
    sr_lookback: int = 100                 # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô bars ‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
    sr_touch_tolerance: float = 0.1        # tolerance ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡∏∞ level
    sr_strength_threshold: int = 3         # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    
    # Volume Analysis
    volume_sma_period: int = 20
    volume_spike_threshold: float = 2.0    # ‡πÄ‡∏ó‡πà‡∏≤‡∏Ç‡∏≠‡∏á volume average
    
    # Pattern Recognition
    pattern_recognition_enabled: bool = True
    pattern_lookback: int = 50
    pattern_tolerance: float = 0.05

@dataclass
class SessionParameters:
    """‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Session"""
    session_name: str
    
    # Timing
    start_hour: int = 0
    start_minute: int = 0
    end_hour: int = 23
    end_minute: int = 59
    
    # Market characteristics
    expected_volatility: str = "MEDIUM"     # LOW, MEDIUM, HIGH, EXTREME
    typical_spread: float = 2.0
    volume_profile: str = "NORMAL"         # LOW, NORMAL, HIGH
    
    # Strategy preferences
    preferred_strategies: List[EntryStrategy] = field(default_factory=list)
    avoided_strategies: List[EntryStrategy] = field(default_factory=list)
    strategy_weights: Dict[EntryStrategy, float] = field(default_factory=dict)
    
    # Risk adjustments
    max_spread: float = 3.0
    position_sizing_multiplier: float = 1.0
    max_positions: int = 10
    risk_multiplier: float = 1.0
    
    # Recovery settings
    preferred_recovery_method: RecoveryMethod = RecoveryMethod.AVERAGING_INTELLIGENT
    recovery_aggressiveness: float = 1.0
    
    # Performance targets
    target_signals_per_hour: int = 5
    target_success_rate: float = 60.0
    
    # News handling
    news_sensitivity: float = 1.0          # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡∏ï‡πà‡∏≠‡∏Ç‡πà‡∏≤‡∏ß
    pre_news_stop_minutes: int = 5         # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏Å‡∏µ‡πà‡∏ô‡∏≤‡∏ó‡∏µ
    post_news_wait_minutes: int = 5        # ‡∏£‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏Å‡∏µ‡πà‡∏ô‡∏≤‡∏ó‡∏µ

@dataclass
class TradingParameters:
    """
    ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î - ‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    """
    
    # === BASIC TRADING SETTINGS ===
    symbol: str = "XAUUSD"
    base_volume: float = 0.01               # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    min_volume: float = 0.01                # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    max_volume: float = 10.0                # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    max_spread: float = 3.0                 # Spread ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (pips)
    
    # === ENTRY PARAMETERS ===
    signal_cooldown: int = 15               # ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    min_confidence: float = 0.5             # Confidence ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå
    max_daily_entries: int = 200            # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
    entry_slippage_tolerance: float = 0.5   # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö
    
    # === STRATEGY MANAGEMENT ===
    strategies: Dict[EntryStrategy, StrategyParameters] = field(default_factory=dict)
    strategy_selection_method: str = "WEIGHTED"  # WEIGHTED, PERFORMANCE, ADAPTIVE
    
    # === RECOVERY MANAGEMENT ===
    recovery_methods: Dict[RecoveryMethod, RecoveryParameters] = field(default_factory=dict)
    recovery_selection_method: str = "MARKET_CONDITION"  # MARKET_CONDITION, PERFORMANCE, FIXED
    
    # === POSITION SIZING ===
    position_sizing: PositionSizingParameters = field(default_factory=PositionSizingParameters)
    
    # === TECHNICAL ANALYSIS ===
    technical_params: TechnicalParameters = field(default_factory=TechnicalParameters)
    
    # === SESSION MANAGEMENT ===
    sessions: Dict[str, SessionParameters] = field(default_factory=dict)
    
    # === VOLUME TARGET SETTINGS ===
    volume_targets: Dict[str, float] = field(default_factory=lambda: {
        "daily_minimum": 50.0,              # lots/‡∏ß‡∏±‡∏ô ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        "daily_target": 75.0,               # lots/‡∏ß‡∏±‡∏ô ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
        "daily_maximum": 100.0,             # lots/‡∏ß‡∏±‡∏ô ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        "hourly_target": 4.0,               # lots/‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        "rebate_optimization": True         # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û rebate
    })
    
    # === RISK MANAGEMENT (‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î - ‡πÄ‡∏ô‡πâ‡∏ô Recovery) ===
    risk_management: Dict[str, Any] = field(default_factory=lambda: {
        "use_stop_loss": False,             # ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ Stop Loss
        "use_take_profit": False,           # ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ Take Profit ‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°
        "recovery_mandatory": True,         # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ Recovery
        "max_drawdown_warning": 30.0,      # ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ Drawdown > 30%
        "max_positions_total": 100,        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏ß‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        "emergency_stop_enabled": True,     # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        "correlation_limit": 0.8,           # ‡∏à‡∏≥‡∏Å‡∏±‡∏î correlation ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        "max_daily_loss": 500.0,           # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô ($)
        "max_single_loss": 100.0           # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠ position ($)
    })
    
    # === PERFORMANCE OPTIMIZATION ===
    performance_settings: Dict[str, Any] = field(default_factory=lambda: {
        "execution_speed": "FAST",          # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ execute
        "price_improvement": True,          # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
        "partial_fills": True,              # ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ fill ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
        "requote_handling": "AUTOMATIC",    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ requote ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        "slippage_tolerance": 0.5,          # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö
        "latency_threshold": 100,           # threshold ‡∏Ç‡∏≠‡∏á latency (ms)
        "retry_attempts": 3,                # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        "timeout_seconds": 30               # timeout ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ execute
    })
    
    # === ADVANCED FEATURES ===
    advanced_features: Dict[str, Any] = field(default_factory=lambda: {
        "machine_learning_enabled": False,   # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ ML
        "sentiment_analysis": False,         # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå sentiment
        "news_impact_scoring": True,         # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡πà‡∏≤‡∏ß
        "correlation_trading": False,        # ‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏° correlation
        "arbitrage_detection": False,        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö arbitrage
        "market_microstructure": False,     # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå microstructure
        "order_flow_analysis": False        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå order flow
    })
    
    # === METADATA ===
    version: str = "2.0.0"
    created_at: datetime = field(default_factory=datetime.now)
    updated_at: datetime = field(default_factory=datetime.now)
    profile_name: str = "default"
    
    def __post_init__(self):
        """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å initialization"""
        self._validate_parameters()
        self._setup_default_strategies()
        self._setup_default_recovery_methods()
        self._setup_default_sessions()
        self.updated_at = datetime.now()
    
    def _validate_parameters(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö volume
        if self.min_volume > self.max_volume:
            self.min_volume = 0.01
            self.max_volume = 10.0
        
        if self.base_volume < self.min_volume:
            self.base_volume = self.min_volume
        elif self.base_volume > self.max_volume:
            self.base_volume = self.max_volume
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö spread
        if self.max_spread <= 0:
            self.max_spread = 3.0
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö confidence
        if not 0.0 <= self.min_confidence <= 1.0:
            self.min_confidence = 0.5
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö volume targets
        volume_targets = self.volume_targets
        if volume_targets["daily_minimum"] > volume_targets["daily_target"]:
            volume_targets["daily_minimum"] = volume_targets["daily_target"] * 0.7
    
    def _setup_default_strategies(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ strategies ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        if not self.strategies:
            default_strategies = {
                EntryStrategy.SCALPING_ENGINE: StrategyParameters(
                    strategy=EntryStrategy.SCALPING_ENGINE,
                    weight=0.4,
                    confidence_threshold=0.6,
                    max_signals_per_hour=20,
                    cooldown_seconds=15,
                    parameters={
                        "bb_touch_threshold": 0.8,
                        "rsi_neutral_range": [45, 55],
                        "max_spread": 2.0
                    }
                ),
                EntryStrategy.TREND_FOLLOWING: StrategyParameters(
                    strategy=EntryStrategy.TREND_FOLLOWING,
                    weight=0.3,
                    confidence_threshold=0.7,
                    max_signals_per_hour=10,
                    cooldown_seconds=30,
                    parameters={
                        "adx_min_strength": 25,
                        "ma_alignment_required": True,
                        "trend_confirmation_bars": 3
                    }
                ),
                EntryStrategy.MEAN_REVERSION: StrategyParameters(
                    strategy=EntryStrategy.MEAN_REVERSION,
                    weight=0.2,
                    confidence_threshold=0.65,
                    max_signals_per_hour=15,
                    cooldown_seconds=20,
                    parameters={
                        "rsi_extreme_threshold": 20,
                        "bb_breakout_reversion": True,
                        "mean_reversion_distance": 0.5
                    }
                ),
                EntryStrategy.BREAKOUT_FALSE: StrategyParameters(
                    strategy=EntryStrategy.BREAKOUT_FALSE,
                    weight=0.07,
                    confidence_threshold=0.75,
                    max_signals_per_hour=5,
                    cooldown_seconds=60,
                    parameters={
                        "volume_confirmation": True,
                        "false_breakout_pips": 5,
                        "reversal_confirmation_time": 300
                    }
                ),
                EntryStrategy.NEWS_REACTION: StrategyParameters(
                    strategy=EntryStrategy.NEWS_REACTION,
                    weight=0.03,
                    confidence_threshold=0.8,
                    max_signals_per_hour=3,
                    cooldown_seconds=120,
                    parameters={
                        "news_impact_threshold": 7,
                        "reaction_delay_seconds": 30,
                        "volatility_spike_required": True
                    }
                )
            }
            self.strategies = default_strategies
    
    def _setup_default_recovery_methods(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ recovery methods ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        if not self.recovery_methods:
            default_recovery = {
                RecoveryMethod.MARTINGALE_SMART: RecoveryParameters(
                    method=RecoveryMethod.MARTINGALE_SMART,
                    max_levels=8,
                    multiplier=1.5,
                    step_pips=10.0,
                    dynamic_multiplier=True,
                    volatility_adjustment=True
                ),
                RecoveryMethod.GRID_INTELLIGENT: RecoveryParameters(
                    method=RecoveryMethod.GRID_INTELLIGENT,
                    max_levels=12,
                    multiplier=1.0,
                    step_pips=15.0,
                    dynamic_multiplier=False,
                    correlation_factor=0.6
                ),
                RecoveryMethod.HEDGING_ADVANCED: RecoveryParameters(
                    method=RecoveryMethod.HEDGING_ADVANCED,
                    max_levels=6,
                    multiplier=1.2,
                    step_pips=20.0,
                    correlation_factor=0.9,
                    time_decay=0.05
                ),
                RecoveryMethod.AVERAGING_INTELLIGENT: RecoveryParameters(
                    method=RecoveryMethod.AVERAGING_INTELLIGENT,
                    max_levels=10,
                    multiplier=1.3,
                    step_pips=12.0,
                    dynamic_multiplier=True,
                    volatility_adjustment=True
                )
            }
            self.recovery_methods = default_recovery
    
    def _setup_default_sessions(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ sessions ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        if not self.sessions:
            default_sessions = {
                "ASIAN": SessionParameters(
                    session_name="ASIAN",
                    start_hour=22, end_hour=8,
                    expected_volatility="LOW",
                    typical_spread=2.0,
                    preferred_strategies=[EntryStrategy.MEAN_REVERSION, EntryStrategy.SCALPING_ENGINE],
                    max_spread=2.5,
                    position_sizing_multiplier=0.8,
                    max_positions=8,
                    target_signals_per_hour=3
                ),
                "LONDON": SessionParameters(
                    session_name="LONDON",
                    start_hour=15, end_hour=20,
                    expected_volatility="HIGH",
                    typical_spread=2.5,
                    preferred_strategies=[EntryStrategy.TREND_FOLLOWING, EntryStrategy.BREAKOUT_FALSE],
                    max_spread=3.0,
                    position_sizing_multiplier=1.2,
                    max_positions=12,
                    target_signals_per_hour=8
                ),
                "NEW_YORK": SessionParameters(
                    session_name="NEW_YORK",
                    start_hour=20, start_minute=30, end_hour=5, end_minute=30,
                    expected_volatility="VERY_HIGH",
                    typical_spread=3.0,
                    preferred_strategies=[EntryStrategy.NEWS_REACTION, EntryStrategy.TREND_FOLLOWING],
                    max_spread=3.5,
                    position_sizing_multiplier=1.5,
                    max_positions=15,
                    target_signals_per_hour=10
                ),
                "OVERLAP": SessionParameters(
                    session_name="OVERLAP",
                    start_hour=20, start_minute=30, end_hour=0,
                    expected_volatility="EXTREME",
                    typical_spread=3.5,
                    preferred_strategies=[EntryStrategy.BREAKOUT_FALSE, EntryStrategy.NEWS_REACTION],
                    max_spread=4.0,
                    position_sizing_multiplier=1.8,
                    max_positions=20,
                    target_signals_per_hour=12
                )
            }
            self.sessions = default_sessions
    
    def get_strategy_parameters(self, strategy: EntryStrategy) -> Optional[StrategyParameters]:
        """‡∏î‡∏∂‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"""
        return self.strategies.get(strategy)
    
    def get_recovery_parameters(self, method: RecoveryMethod) -> Optional[RecoveryParameters]:
        """‡∏î‡∏∂‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á recovery method"""
        return self.recovery_methods.get(method)
    
    def get_session_parameters(self, session: str) -> Optional[SessionParameters]:
        """‡∏î‡∏∂‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á session"""
        return self.sessions.get(session)
    
    def get_optimal_strategy_for_session(self, session: str) -> EntryStrategy:
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö session"""
        session_params = self.get_session_parameters(session)
        
        if session_params and session_params.preferred_strategies:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å preferred strategies ‡∏ï‡∏≤‡∏° performance
            best_strategy = session_params.preferred_strategies[0]
            best_performance = 0.0
            
            for strategy in session_params.preferred_strategies:
                strategy_params = self.get_strategy_parameters(strategy)
                if strategy_params:
                    performance = strategy_params.get_success_rate()
                    if performance > best_performance:
                        best_performance = performance
                        best_strategy = strategy
            
            return best_strategy
        
        # Default fallback
        return EntryStrategy.SCALPING_ENGINE
    
    def get_optimal_recovery_for_condition(self, market_condition: MarketCondition) -> RecoveryMethod:
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å recovery method ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î"""
        
        condition_recovery_map = {
            MarketCondition.TRENDING_UP: RecoveryMethod.GRID_INTELLIGENT,
            MarketCondition.TRENDING_DOWN: RecoveryMethod.GRID_INTELLIGENT,
            MarketCondition.RANGING: RecoveryMethod.MARTINGALE_SMART,
            MarketCondition.VOLATILE: RecoveryMethod.HEDGING_ADVANCED,
            MarketCondition.NEWS_IMPACT: RecoveryMethod.CORRELATION_RECOVERY,
            MarketCondition.QUIET: RecoveryMethod.AVERAGING_INTELLIGENT
        }
        
        preferred_method = condition_recovery_map.get(market_condition, RecoveryMethod.AVERAGING_INTELLIGENT)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö performance ‡∏Ç‡∏≠‡∏á method ‡∏ô‡∏µ‡πâ
        recovery_params = self.get_recovery_parameters(preferred_method)
        if recovery_params and recovery_params.get_recovery_success_rate() < 50.0:
            # ‡∏ñ‡πâ‡∏≤ performance ‡∏ï‡πà‡∏≥ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ default
            return RecoveryMethod.AVERAGING_INTELLIGENT
        
        return preferred_method
    
    def calculate_position_size(self, confidence: float, session: str = "ASIAN", 
                                account_balance: float = 10000.0, 
                                market_volatility: float = 1.0) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"""
        return self.position_sizing.calculate_position_size(
            account_balance, confidence, market_volatility, session
        )
    
    def adjust_parameters_by_performance(self):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏° performance"""
        
        # ‡∏õ‡∏£‡∏±‡∏ö strategy weights ‡∏ï‡∏≤‡∏° performance
        total_weight = 0.0
        for strategy_params in self.strategies.values():
            if strategy_params.enabled:
                success_rate = strategy_params.get_success_rate()
                # ‡∏õ‡∏£‡∏±‡∏ö weight ‡∏ï‡∏≤‡∏° success rate
                if success_rate > 70:
                    strategy_params.weight *= 1.1  # ‡πÄ‡∏û‡∏¥‡πà‡∏° weight
                elif success_rate < 40:
                    strategy_params.weight *= 0.9  # ‡∏•‡∏î weight
                
                total_weight += strategy_params.weight
        
        # Normalize weights
        if total_weight > 0:
            for strategy_params in self.strategies.values():
                strategy_params.weight /= total_weight
        
        # ‡∏õ‡∏£‡∏±‡∏ö recovery parameters ‡∏ï‡∏≤‡∏° performance
        for recovery_params in self.recovery_methods.values():
            success_rate = recovery_params.get_recovery_success_rate()
            if success_rate < 50 and recovery_params.multiplier > 1.2:
                recovery_params.multiplier *= 0.95  # ‡∏•‡∏î aggressiveness
            elif success_rate > 80 and recovery_params.multiplier < 2.0:
                recovery_params.multiplier *= 1.05  # ‡πÄ‡∏û‡∏¥‡πà‡∏° aggressiveness
        
        self.updated_at = datetime.now()
    
    def optimize_for_rebate(self):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rebate"""
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        for strategy_params in self.strategies.values():
            if strategy_params.strategy in [EntryStrategy.SCALPING_ENGINE, EntryStrategy.MEAN_REVERSION]:
                strategy_params.max_signals_per_hour = int(strategy_params.max_signals_per_hour * 1.2)
                strategy_params.cooldown_seconds = max(10, int(strategy_params.cooldown_seconds * 0.8))
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° target volume
        self.volume_targets["daily_target"] = min(
            self.volume_targets["daily_maximum"],
            self.volume_targets["daily_target"] * 1.1
        )
        
        # ‡∏•‡∏î confidence threshold ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        for strategy_params in self.strategies.values():
            strategy_params.confidence_threshold = max(0.4, strategy_params.confidence_threshold - 0.05)
        
        self.updated_at = datetime.now()
    
    def create_conservative_profile(self) -> 'TradingParameters':
        """‡∏™‡∏£‡πâ‡∏≤‡∏á profile ‡πÅ‡∏ö‡∏ö‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡∏ô‡∏¥‡∏¢‡∏°"""
        conservative = copy.deepcopy(self)
        
        # ‡∏•‡∏î volume targets
        conservative.volume_targets["daily_target"] *= 0.5
        conservative.volume_targets["daily_maximum"] *= 0.6
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° confidence threshold
        for strategy_params in conservative.strategies.values():
            strategy_params.confidence_threshold = min(0.9, strategy_params.confidence_threshold + 0.1)
            strategy_params.max_signals_per_hour = max(1, strategy_params.max_signals_per_hour // 2)
        
        # ‡∏•‡∏î recovery aggressiveness
        for recovery_params in conservative.recovery_methods.values():
            recovery_params.multiplier = max(1.1, recovery_params.multiplier - 0.2)
            recovery_params.max_levels = max(3, recovery_params.max_levels - 2)
        
        # ‡∏•‡∏î position sizing
        conservative.position_sizing.risk_per_trade_percent *= 0.5
        conservative.position_sizing.max_volume *= 0.5
        
        conservative.profile_name = "conservative"
        return conservative
    
    def create_aggressive_profile(self) -> 'TradingParameters':
        """‡∏™‡∏£‡πâ‡∏≤‡∏á profile ‡πÅ‡∏ö‡∏ö‡∏Å‡πâ‡∏≤‡∏ß‡∏£‡πâ‡∏≤‡∏ß"""
        aggressive = copy.deepcopy(self)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° volume targets
        aggressive.volume_targets["daily_target"] *= 1.5
        aggressive.volume_targets["daily_maximum"] *= 1.3
        
        # ‡∏•‡∏î confidence threshold
        for strategy_params in aggressive.strategies.values():
            strategy_params.confidence_threshold = max(0.3, strategy_params.confidence_threshold - 0.1)
            strategy_params.max_signals_per_hour = min(50, int(strategy_params.max_signals_per_hour * 1.5))
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° recovery aggressiveness
        for recovery_params in aggressive.recovery_methods.values():
            recovery_params.multiplier = min(3.0, recovery_params.multiplier + 0.3)
            recovery_params.max_levels = min(15, recovery_params.max_levels + 3)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° position sizing
        aggressive.position_sizing.risk_per_trade_percent *= 1.5
        aggressive.position_sizing.max_volume *= 1.5
        
        aggressive.profile_name = "aggressive"
        return aggressive
    
    def export_parameters(self, filename: Optional[str] = None) -> str:
        """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå"""
        try:
            if filename is None:
                filename = f"trading_params_{self.profile_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            # Convert to serializable format
            export_data = self._to_serializable_dict()
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False, default=str)
            
            return filename
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå: {e}")
            return ""
    
    def _to_serializable_dict(self) -> Dict[str, Any]:
        """‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô dict ‡∏ó‡∏µ‡πà serialize ‡πÑ‡∏î‡πâ"""
        result = {}
        
        for field_name, field_value in self.__dict__.items():
            if isinstance(field_value, Enum):
                result[field_name] = field_value.value
            elif isinstance(field_value, datetime):
                result[field_name] = field_value.isoformat()
            elif isinstance(field_value, dict):
                if field_name in ['strategies', 'recovery_methods', 'sessions']:
                    # Handle complex object dictionaries
                    nested_dict = {}
                    for key, obj in field_value.items():
                        if hasattr(obj, '__dict__'):
                            obj_dict = {}
                            for obj_field, obj_value in obj.__dict__.items():
                                if isinstance(obj_value, Enum):
                                    obj_dict[obj_field] = obj_value.value
                                elif isinstance(obj_value, datetime):
                                    obj_dict[obj_field] = obj_value.isoformat() if obj_value else None
                                else:
                                    obj_dict[obj_fiel
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INTELLIGENT RECOVERY SYSTEM - REAL MT5 RECOVERY EXECUTION
========================================================
‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Live Trading
‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ (Recovery Strategies) ‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î

üéØ RECOVERY STRATEGIES:
- Martingale Recovery (‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° lot ‡πÅ‡∏ö‡∏ö‡∏ó‡∏ß‡∏µ‡∏Ñ‡∏π‡∏ì)
- Grid Recovery (‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î position ‡πÅ‡∏ö‡∏ö grid)
- Hedging Recovery (‡∏Å‡∏≤‡∏£ hedge ‡∏î‡πâ‡∏ß‡∏¢ position ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°)
- Averaging Recovery (‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤)
- Correlation Recovery (‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ correlation ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô)
- Smart Recovery (‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ)

üö® CRITICAL: REAL MT5 INTEGRATION ONLY - NO MOCK
"""

import MetaTrader5 as mt5
import threading
import time
import math
import statistics
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any, Callable
from dataclasses import dataclass, field
from enum import Enum
from collections import defaultdict, deque
import numpy as np

class RecoveryStrategy(Enum):
    """‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
    MARTINGALE = "MARTINGALE"
    GRID_TRADING = "GRID_TRADING"
    HEDGING = "HEDGING"
    AVERAGING = "AVERAGING"
    CORRELATION = "CORRELATION"
    SMART_RECOVERY = "SMART_RECOVERY"
    QUICK_RECOVERY = "QUICK_RECOVERY"

class RecoveryStatus(Enum):
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
    PENDING = "PENDING"
    ACTIVE = "ACTIVE"
    PAUSED = "PAUSED"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    CANCELLED = "CANCELLED"

class RecoveryTrigger(Enum):
    """‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
    LOSS_THRESHOLD = "LOSS_THRESHOLD"
    TIME_BASED = "TIME_BASED"
    DRAWDOWN_PERCENT = "DRAWDOWN_PERCENT"
    MANUAL = "MANUAL"
    AUTO_DETECT = "AUTO_DETECT"

@dataclass
class LosingPosition:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
    ticket: int
    symbol: str
    position_type: int  # mt5.POSITION_TYPE_BUY or mt5.POSITION_TYPE_SELL
    volume: float
    open_price: float
    current_price: float
    profit: float
    open_time: datetime
    magic_number: int = 0
    comment: str = ""
    
    # Recovery tracking
    recovery_id: Optional[str] = None
    recovery_attempts: int = 0
    total_recovery_volume: float = 0.0
    recovery_cost: float = 0.0
    is_being_recovered: bool = False

@dataclass
class RecoveryPlan:
    """‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
    recovery_id: str
    original_position: LosingPosition
    strategy: RecoveryStrategy
    trigger: RecoveryTrigger
    created_time: datetime
    target_profit: float
    max_recovery_attempts: int
    max_recovery_volume: float
    status: RecoveryStatus = RecoveryStatus.PENDING
    
    # Execution tracking
    recovery_positions: List[int] = field(default_factory=list)
    executed_volume: float = 0.0
    recovery_cost: float = 0.0
    current_profit: float = 0.0
    success_probability: float = 50.0
    
    # Strategy-specific parameters
    parameters: Dict[str, Any] = field(default_factory=dict)

@dataclass
class RecoveryResult:
    """‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
    recovery_id: str
    success: bool
    final_profit: float
    total_volume_used: float
    total_cost: float
    recovery_time: timedelta
    positions_opened: int
    strategy_used: RecoveryStrategy
    completion_time: datetime
    notes: str = ""

class RealRecoveryEngine:
    """
    Recovery Engine ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Live Trading - ‡πÑ‡∏°‡πà‡∏°‡∏µ Mock
    """
    
    def __init__(self, symbol: str = "XAUUSD.v"):
        self.symbol = symbol
        self.is_running = False
        self.recovery_thread = None
        
        # Recovery tracking
        self.active_recoveries: Dict[str, RecoveryPlan] = {}
        self.completed_recoveries: List[RecoveryResult] = []
        self.losing_positions: Dict[int, LosingPosition] = {}
        
        # Smart Recovery Settings - ‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô 200 ‡πÄ‡∏ó‡πà‡∏≤
        self.base_pip_threshold = 25        # ‡πÅ‡∏ó‡∏ô $50 ‚Üí 25 pips
        self.min_wait_seconds = 60          # ‡πÅ‡∏ó‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‚Üí 1 ‡∏ô‡∏≤‡∏ó‡∏µ  
        self.account_risk_percent = 0.5     # 0.5% ‡∏Ç‡∏≠‡∏á account
        self.max_concurrent_recoveries = 3
        self.recovery_check_interval = 1    # ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)

        # Market condition multipliers - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î
        self.market_multipliers = {
            'VOLATILE_HIGH': 0.4,     # ‡∏•‡∏î 60% ‡∏ï‡∏≠‡∏ô‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á
            'VOLATILE_NEWS': 0.3,     # ‡∏•‡∏î 70% ‡∏ï‡∏≠‡∏ô‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß
            'TRENDING_STRONG': 1.5,   # ‡πÄ‡∏û‡∏¥‡πà‡∏° 50% ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÅ‡∏£‡∏á
            'TRENDING_WEAK': 1.2,     # ‡πÄ‡∏û‡∏¥‡πà‡∏° 20% ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏≠‡πà‡∏≠‡∏ô
            'RANGING_TIGHT': 0.7,     # ‡∏•‡∏î 30% ‡∏ï‡∏≠‡∏ô ranging
            'RANGING_WIDE': 0.9,      # ‡∏•‡∏î 10% ‡∏ï‡∏≠‡∏ô ranging ‡∏Å‡∏ß‡πâ‡∏≤‡∏á
            'QUIET_LOW': 1.3,         # ‡πÄ‡∏û‡∏¥‡πà‡∏° 30% ‡∏ï‡∏≠‡∏ô‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
            'BREAKOUT': 0.5,          # ‡∏•‡∏î 50% ‡∏ï‡∏≠‡∏ô breakout
            'REVERSAL': 0.6           # ‡∏•‡∏î 40% ‡∏ï‡∏≠‡∏ô reversal
        }

        # Strategy performance tracking
        self.strategy_performance = defaultdict(list)
        self.strategy_weights = {
            RecoveryStrategy.MARTINGALE: 1.0,
            RecoveryStrategy.GRID_TRADING: 1.0,
            RecoveryStrategy.HEDGING: 1.0,
            RecoveryStrategy.AVERAGING: 1.0,
            RecoveryStrategy.CORRELATION: 1.0,
            RecoveryStrategy.SMART_RECOVERY: 1.2,
            RecoveryStrategy.QUICK_RECOVERY: 0.8
        }
        
        print(f"üîß Recovery Engine initialized for {symbol}")
    
    def start_recovery_monitoring(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        if self.is_running:
            return
        
        self.is_running = True
        self.recovery_thread = threading.Thread(target=self._recovery_loop, daemon=True)
        self.recovery_thread.start()
        
        print("‚úÖ Recovery monitoring started")
    
    def stop_recovery_monitoring(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"""
        self.is_running = False
        if self.recovery_thread:
            self.recovery_thread.join(timeout=10)
        
        print("‚èπÔ∏è Recovery monitoring stopped")
    
    def _recovery_loop(self):
        """Loop ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
        while self.is_running:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö positions ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                self._scan_losing_positions()
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÉ‡∏´‡∏°‡πà
                self._create_recovery_plans()
                
                # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á active
                self._execute_active_recoveries()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
                self._check_recovery_completion()
                
                # Log ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                self._log_recovery_status()
                
                time.sleep(self.recovery_check_interval)
                
            except Exception as e:
                print(f"‚ùå Recovery loop error: {e}")
                time.sleep(10)
    
    def _scan_losing_positions(self):
        """‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤ positions ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
        try:
            # ‡∏î‡∏∂‡∏á positions ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            positions = mt5.positions_get(symbol=self.symbol)
            if positions is None:
                return
            
            current_time = datetime.now()
            
            for position in positions:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                if position.profit < -self.loss_threshold:
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á LosingPosition object
                    losing_pos = LosingPosition(
                        ticket=position.ticket,
                        symbol=position.symbol,
                        position_type=position.type,
                        volume=position.volume,
                        open_price=position.price_open,
                        current_price=position.price_current,
                        profit=position.profit,
                        open_time=datetime.fromtimestamp(position.time),
                        magic_number=position.magic,
                        comment=position.comment
                    )
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ losing positions ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
                    if position.ticket not in self.losing_positions:
                        self.losing_positions[position.ticket] = losing_pos
                        print(f"üîç New losing position detected: Ticket={position.ticket}, Loss=${position.profit:.2f}")
                    else:
                        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        self.losing_positions[position.ticket].current_price = position.price_current
                        self.losing_positions[position.ticket].profit = position.profit
                
                # ‡∏•‡∏ö positions ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡πÅ‡∏•‡πâ‡∏ß
                elif position.ticket in self.losing_positions:
                    if position.profit >= 0:
                        print(f"‚úÖ Position recovered naturally: Ticket={position.ticket}, Profit=${position.profit:.2f}")
                    del self.losing_positions[position.ticket]
            
            # ‡∏•‡∏ö positions ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
            current_tickets = [pos.ticket for pos in positions] if positions else []
            closed_tickets = [ticket for ticket in self.losing_positions.keys() if ticket not in current_tickets]
            
            for ticket in closed_tickets:
                print(f"üîí Position closed: Ticket={ticket}")
                del self.losing_positions[ticket]
                
        except Exception as e:
            print(f"‚ùå Error scanning losing positions: {e}")
    
    def _create_recovery_plans(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö positions ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
        try:
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô recovery ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
            if len(self.active_recoveries) >= self.max_concurrent_recoveries:
                return
            
            for ticket, losing_pos in self.losing_positions.items():
                # ‡∏Ç‡πâ‡∏≤‡∏° position ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏¢‡∏π‡πà
                if losing_pos.is_being_recovered:
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
                if self._should_start_recovery(losing_pos):
                    recovery_plan = self._design_recovery_strategy(losing_pos)
                    
                    if recovery_plan:
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ active recoveries
                        self.active_recoveries[recovery_plan.recovery_id] = recovery_plan
                        losing_pos.is_being_recovered = True
                        losing_pos.recovery_id = recovery_plan.recovery_id
                        
                        print(f"üìã Recovery plan created: {recovery_plan.recovery_id}")
                        print(f"üéØ Strategy: {recovery_plan.strategy.value}")
                        print(f"üí∞ Target Profit: ${recovery_plan.target_profit:.2f}")
                        
        except Exception as e:
            print(f"‚ùå Error creating recovery plans: {e}")
    
    def _should_start_recovery(self, losing_pos: LosingPosition) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ - ‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô 200 ‡πÄ‡∏ó‡πà‡∏≤"""
        try:
            # 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pip loss ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_tick = mt5.symbol_info_tick(self.symbol)
            if not current_tick:
                return False
            
            current_price = current_tick.bid if losing_pos.position_type == mt5.POSITION_TYPE_BUY else current_tick.ask
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pips ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            if losing_pos.position_type == mt5.POSITION_TYPE_BUY:
                pip_loss = (losing_pos.open_price - current_price) / 0.01
            else:
                pip_loss = (current_price - losing_pos.open_price) / 0.01
            
            pip_loss = max(0, pip_loss)  # ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö
            
            # 2. ‡∏î‡∏∂‡∏á‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            market_condition = self._get_current_market_condition()
            
            # 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì threshold ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
            smart_threshold = self._calculate_smart_threshold(losing_pos, market_condition)
            
            # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠ (‡∏•‡∏î‡∏à‡∏≤‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ)
            time_open = datetime.now() - losing_pos.open_time
            min_wait = self.min_wait_seconds
            
            # 5. ‡πÄ‡∏£‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á
            if market_condition in ['VOLATILE_NEWS', 'VOLATILE_HIGH']:
                min_wait = 30  # ‡∏£‡∏≠‡πÅ‡∏Ñ‡πà 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            elif market_condition == 'BREAKOUT':
                min_wait = 45  # ‡∏£‡∏≠ 45 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            
            if time_open.total_seconds() < min_wait:
                return False
            
            # 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô recovery attempts
            if losing_pos.recovery_attempts >= 5:
                return False
            
            # 7. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö spread)
            spread = current_tick.ask - current_tick.bid
            if spread > 1.5:  # Spread ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                return False
            
            # 8. ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            should_recover = pip_loss >= smart_threshold
            
            if should_recover:
                print(f"üö® Smart Recovery Triggered!")
                print(f"   Position: {losing_pos.ticket}")
                print(f"   Pip Loss: {pip_loss:.1f} pips")
                print(f"   Threshold: {smart_threshold:.1f} pips")
                print(f"   Market: {market_condition}")
                print(f"   Wait Time: {time_open.total_seconds():.0f}s")
            
            return should_recover
            
        except Exception as e:
            print(f"‚ùå Error checking recovery conditions: {e}")
            return False

    def _get_current_market_condition(self) -> str:
        """‡∏î‡∏∂‡∏á‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            # Simple market condition detection
            current_time = datetime.now()
            hour = current_time.hour
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πà‡∏≤‡∏ß
            if self._is_news_time():
                return 'VOLATILE_NEWS'
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session
            if 20 <= hour <= 23 or 0 <= hour <= 2:  # London/NY overlap
                return 'VOLATILE_HIGH'
            elif 15 <= hour <= 19:  # London session
                return 'TRENDING_STRONG'
            elif 3 <= hour <= 11:   # Asian session
                return 'RANGING_TIGHT'
            else:
                return 'QUIET_LOW'
                
        except Exception as e:
            print(f"‚ùå Error detecting market condition: {e}")
            return 'RANGING_TIGHT'  # Default safe condition

    def _calculate_smart_threshold(self, losing_pos: LosingPosition, market_condition: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì threshold ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î account"""
        try:
            # 1. Base pip threshold
            pip_threshold = self.base_pip_threshold
            
            # 2. ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î
            multiplier = self.market_multipliers.get(market_condition, 1.0)
            pip_threshold *= multiplier
            
            # 3. ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î account
            account_info = mt5.account_info()
            if account_info:
                # Account ‡πÉ‡∏´‡∏ç‡πà ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
                if account_info.balance > 10000:
                    account_threshold_dollar = account_info.balance * self.account_risk_percent / 100
                    pip_value = losing_pos.volume * 10  # $10 per pip for 0.01 lot XAUUSD
                    account_threshold_pips = account_threshold_dollar / pip_value
                    pip_threshold = min(pip_threshold, account_threshold_pips)
                
                # Account ‡πÄ‡∏•‡πá‡∏Å ‡πÉ‡∏ä‡πâ pip-based ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                else:
                    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö account ‡πÄ‡∏•‡πá‡∏Å ‡∏•‡∏î threshold ‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å
                    if account_info.balance < 1000:
                        pip_threshold *= 0.6  # ‡∏•‡∏î 40%
                    elif account_info.balance < 5000:
                        pip_threshold *= 0.8  # ‡∏•‡∏î 20%
            
            # 4. ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î position
            if losing_pos.volume >= 0.1:  # Position ‡πÉ‡∏´‡∏ç‡πà
                pip_threshold *= 0.7  # ‡∏•‡∏î threshold 30%
            elif losing_pos.volume >= 0.05:
                pip_threshold *= 0.85  # ‡∏•‡∏î threshold 15%
            
            # 5. ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            min_threshold = 8  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 pips
            max_threshold = 100  # ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 pips
            
            final_threshold = max(min_threshold, min(pip_threshold, max_threshold))
            
            return final_threshold
            
        except Exception as e:
            print(f"‚ùå Error calculating smart threshold: {e}")
            return self.base_pip_threshold

    def _is_news_time(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"""
        now = datetime.now()
        hour = now.hour
        minute = now.minute
        weekday = now.weekday()  # 0=Monday, 6=Sunday
        
        # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
        if weekday >= 5:
            return False
        
        # ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (GMT+7)
        major_news_times = [
            (8, 30, 9, 30),    # Tokyo open + JPY news
            (15, 30, 16, 30),  # London open + EUR news  
            (20, 30, 21, 30),  # NY open + USD news
            (22, 30, 23, 30),  # Major US news (CPI, NFP, FOMC)
        ]
        
        for start_hour, start_min, end_hour, end_min in major_news_times:
            if start_hour <= hour <= end_hour:
                if hour == start_hour and minute >= start_min:
                    return True
                elif hour == end_hour and minute <= end_min:
                    return True
                elif start_hour < hour < end_hour:
                    return True
        
        # ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô session (‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á)
        session_change_times = [
            (7, 45, 8, 15),    # Pre-Tokyo
            (14, 45, 15, 15),  # Pre-London
            (20, 15, 20, 45),  # Pre-NY
        ]
        
        for start_hour, start_min, end_hour, end_min in session_change_times:
            if start_hour <= hour <= end_hour:
                if (hour == start_hour and minute >= start_min) or \
                (hour == end_hour and minute <= end_min) or \
                (start_hour < hour < end_hour):
                    return True
        
        return False
        
    def _design_recovery_strategy(self, losing_pos: LosingPosition) -> Optional[RecoveryPlan]:
        """‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
        try:
            recovery_id = f"REC_{losing_pos.ticket}_{int(time.time())}"
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
            strategy = self._select_recovery_strategy(losing_pos)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            target_profit = abs(losing_pos.profit) * 1.2  # Target 20% more than loss
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô
            plan = RecoveryPlan(
                recovery_id=recovery_id,
                original_position=losing_pos,
                strategy=strategy,
                trigger=RecoveryTrigger.LOSS_THRESHOLD,
                created_time=datetime.now(),
                target_profit=target_profit,
                max_recovery_attempts=5,
                max_recovery_volume=losing_pos.volume * 10  # Max 10x original volume
            )
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            plan.parameters = self._get_strategy_parameters(strategy, losing_pos)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            plan.success_probability = self._calculate_success_probability(plan)
            
            return plan
            
        except Exception as e:
            print(f"‚ùå Error designing recovery strategy: {e}")
            return None
    
    def _select_recovery_strategy(self, losing_pos: LosingPosition) -> RecoveryStrategy:
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
        try:
            loss_amount = abs(losing_pos.profit)
            time_in_loss = datetime.now() - losing_pos.open_time
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
            if loss_amount < 100:
                # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ - ‡πÉ‡∏ä‡πâ Quick Recovery
                return RecoveryStrategy.QUICK_RECOVERY
            
            elif loss_amount < 300:
                # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡πÉ‡∏ä‡πâ Averaging ‡∏´‡∏£‡∏∑‡∏≠ Grid
                if time_in_loss.total_seconds() < 1800:  # ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 30 ‡∏ô‡∏≤‡∏ó‡∏µ
                    return RecoveryStrategy.AVERAGING
                else:
                    return RecoveryStrategy.GRID_TRADING
            
            elif loss_amount < 500:
                # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å - ‡πÉ‡∏ä‡πâ Hedging ‡∏´‡∏£‡∏∑‡∏≠ Smart Recovery
                return RecoveryStrategy.HEDGING
            
            else:
                # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢ - ‡πÉ‡∏ä‡πâ Smart Recovery
                return RecoveryStrategy.SMART_RECOVERY
                
        except Exception as e:
            print(f"‚ùå Error selecting recovery strategy: {e}")
            return RecoveryStrategy.QUICK_RECOVERY
    
    def _get_strategy_parameters(self, strategy: RecoveryStrategy, losing_pos: LosingPosition) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"""
        try:
            base_params = {
                'original_volume': losing_pos.volume,
                'original_price': losing_pos.open_price,
                'current_loss': abs(losing_pos.profit),
                'position_type': losing_pos.position_type
            }
            
            if strategy == RecoveryStrategy.MARTINGALE:
                return {
                    **base_params,
                    'multiplier': 2.0,
                    'max_levels': 4,
                    'take_profit_pips': 10
                }
            
            elif strategy == RecoveryStrategy.GRID_TRADING:
                return {
                    **base_params,
                    'grid_distance_pips': 20,
                    'grid_levels': 5,
                    'lot_increment': 0.01
                }
            
            elif strategy == RecoveryStrategy.HEDGING:
                return {
                    **base_params,
                    'hedge_ratio': 1.5,
                    'profit_target_pips': 15,
                    'correlation_threshold': 0.8
                }
            
            elif strategy == RecoveryStrategy.AVERAGING:
                return {
                    **base_params,
                    'average_distance_pips': 30,
                    'volume_increment': 0.5,
                    'max_averages': 3
                }
            
            elif strategy == RecoveryStrategy.QUICK_RECOVERY:
                return {
                    **base_params,
                    'quick_volume_multiplier': 1.5,
                    'take_profit_pips': 8,
                    'time_limit_minutes': 15
                }
            
            elif strategy == RecoveryStrategy.SMART_RECOVERY:
                return {
                    **base_params,
                    'use_multiple_methods': True,
                    'adaptive_sizing': True,
                    'market_condition_aware': True
                }
            
            return base_params
            
        except Exception as e:
            print(f"‚ùå Error getting strategy parameters: {e}")
            return {}
    
    def _calculate_success_probability(self, plan: RecoveryPlan) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        try:
            base_probability = 60.0  # Base 60%
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            strategy_modifiers = {
                RecoveryStrategy.QUICK_RECOVERY: 0.85,
                RecoveryStrategy.AVERAGING: 0.75,
                RecoveryStrategy.GRID_TRADING: 0.80,
                RecoveryStrategy.HEDGING: 0.70,
                RecoveryStrategy.MARTINGALE: 0.65,
                RecoveryStrategy.SMART_RECOVERY: 0.90
            }
            
            probability = base_probability * strategy_modifiers.get(plan.strategy, 0.75)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            loss_ratio = abs(plan.original_position.profit) / 1000  # Normalize to $1000
            probability *= max(0.5, 1.0 - (loss_ratio * 0.2))  # ‡∏•‡∏î‡∏•‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
            strategy_weight = self.strategy_weights.get(plan.strategy, 1.0)
            probability *= strategy_weight
            
            return min(max(probability, 10.0), 95.0)  # Clamp between 10-95%
            
        except Exception as e:
            print(f"‚ùå Error calculating success probability: {e}")
            return 50.0
    
    def _execute_active_recoveries(self):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á active"""
        try:
            for recovery_id, plan in list(self.active_recoveries.items()):
                if plan.status == RecoveryStatus.PENDING:
                    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
                    plan.status = RecoveryStatus.ACTIVE
                    self._start_recovery_execution(plan)
                
                elif plan.status == RecoveryStatus.ACTIVE:
                    # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ï‡πà‡∏≠
                    self._continue_recovery_execution(plan)
                    
        except Exception as e:
            print(f"‚ùå Error executing recoveries: {e}")
    
    def _start_recovery_execution(self, plan: RecoveryPlan):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
        try:
            print(f"üöÄ Starting recovery execution: {plan.recovery_id}")
            print(f"üìä Strategy: {plan.strategy.value}")
            print(f"üéØ Target: ${plan.target_profit:.2f}")
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ method ‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            if plan.strategy == RecoveryStrategy.MARTINGALE:
                self._execute_martingale_recovery(plan)
            elif plan.strategy == RecoveryStrategy.GRID_TRADING:
                self._execute_grid_recovery(plan)
            elif plan.strategy == RecoveryStrategy.HEDGING:
                self._execute_hedging_recovery(plan)
            elif plan.strategy == RecoveryStrategy.AVERAGING:
                self._execute_averaging_recovery(plan)
            elif plan.strategy == RecoveryStrategy.QUICK_RECOVERY:
                self._execute_quick_recovery(plan)
            elif plan.strategy == RecoveryStrategy.SMART_RECOVERY:
                self._execute_smart_recovery(plan)
                
        except Exception as e:
            print(f"‚ùå Error starting recovery execution: {e}")
            plan.status = RecoveryStatus.FAILED
    
    def _execute_martingale_recovery(self, plan: RecoveryPlan):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ö‡∏ö Martingale"""
        try:
            original_pos = plan.original_position
            params = plan.parameters
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recovery
            multiplier = params.get('multiplier', 2.0)
            recovery_volume = original_pos.volume * multiplier
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î
            if plan.executed_volume + recovery_volume > plan.max_recovery_volume:
                print(f"‚ö†Ô∏è Recovery volume limit reached: {plan.recovery_id}")
                plan.status = RecoveryStatus.FAILED
                return
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
            if original_pos.position_type == mt5.POSITION_TYPE_BUY:
                order_type = mt5.ORDER_TYPE_SELL
            else:
                order_type = mt5.ORDER_TYPE_BUY
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            tick = mt5.symbol_info_tick(self.symbol)
            if not tick:
                return
            
            price = tick.bid if order_type == mt5.ORDER_TYPE_SELL else tick.ask
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á order request
            request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": self.symbol,
                "volume": recovery_volume,
                "type": order_type,
                "price": price,
                "deviation": 3,
                "magic": 999001,  # Recovery magic number
                "comment": f"Martingale-{plan.recovery_id}",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_IOC,
            }
            
            # ‡∏™‡πà‡∏á order
            result = mt5.order_send(request)
            
            if result.retcode == mt5.TRADE_RETCODE_DONE:
                print(f"‚úÖ Martingale recovery order executed: {result.order}")
                print(f"üìä Volume: {recovery_volume}, Price: {result.price}")
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏ú‡∏ô
                plan.recovery_positions.append(result.order)
                plan.executed_volume += recovery_volume
                plan.recovery_cost += recovery_volume * result.price
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°
                original_pos.recovery_attempts += 1
                original_pos.total_recovery_volume += recovery_volume
                
            else:
                print(f"‚ùå Martingale recovery order failed: {result.retcode} - {result.comment}")
                
        except Exception as e:
            print(f"‚ùå Martingale recovery execution error: {e}")
    
    def _execute_grid_recovery(self, plan: RecoveryPlan):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ö‡∏ö Grid Trading"""
        try:
            original_pos = plan.original_position
            params = plan.parameters
            
            grid_distance = params.get('grid_distance_pips', 20)
            grid_levels = params.get('grid_levels', 5)
            lot_increment = params.get('lot_increment', 0.01)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏î‡∏±‡∏ö grid
            current_price = original_pos.current_price
            pip_value = 0.01  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gold
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á grid orders
            for level in range(1, grid_levels + 1):
                if len(plan.recovery_positions) >= level:
                    continue  # ‡∏°‡∏µ order ‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö grid level
                if original_pos.position_type == mt5.POSITION_TYPE_BUY:
                    # Original ‡πÄ‡∏õ‡πá‡∏ô BUY, ‡∏™‡∏£‡πâ‡∏≤‡∏á SELL grid ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                    grid_price = current_price + (grid_distance * pip_value * level)
                    order_type = mt5.ORDER_TYPE_SELL
                else:
                    # Original ‡πÄ‡∏õ‡πá‡∏ô SELL, ‡∏™‡∏£‡πâ‡∏≤‡∏á BUY grid ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                    grid_price = current_price - (grid_distance * pip_value * level)
                    order_type = mt5.ORDER_TYPE_BUY
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volume
                grid_volume = original_pos.volume + (lot_increment * level)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î
                if plan.executed_volume + grid_volume > plan.max_recovery_volume:
                    break
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á pending order
                request = {
                    "action": mt5.TRADE_ACTION_PENDING,
                    "symbol": self.symbol,
                    "volume": grid_volume,
                    "type": mt5.ORDER_TYPE_BUY_LIMIT if order_type == mt5.ORDER_TYPE_BUY else mt5.ORDER_TYPE_SELL_LIMIT,
                    "price": grid_price,
                    "deviation": 3,
                    "magic": 999002,
                    "comment": f"Grid-{plan.recovery_id}-L{level}",
                    "type_time": mt5.ORDER_TIME_GTC,
                }
                
                result = mt5.order_send(request)
                
                if result.retcode == mt5.TRADE_RETCODE_DONE:
                    print(f"‚úÖ Grid order placed: Level {level}, Price {grid_price}")
                    plan.recovery_positions.append(result.order)
                    plan.executed_volume += grid_volume
                else:
                    print(f"‚ùå Grid order failed: {result.retcode}")
                    
        except Exception as e:
            print(f"‚ùå Grid recovery execution error: {e}")
    
    def _execute_hedging_recovery(self, plan: RecoveryPlan):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ö‡∏ö Hedging"""
        try:
            original_pos = plan.original_position
            params = plan.parameters
            
            hedge_ratio = params.get('hedge_ratio', 1.5)
            hedge_volume = original_pos.volume * hedge_ratio
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ hedge position ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            if len(plan.recovery_positions) > 0:
                return  # ‡∏°‡∏µ hedge ‡πÅ‡∏•‡πâ‡∏ß
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
            if original_pos.position_type == mt5.POSITION_TYPE_BUY:
                order_type = mt5.ORDER_TYPE_SELL
            else:
                order_type = mt5.ORDER_TYPE_BUY
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            tick = mt5.symbol_info_tick(self.symbol)
            if not tick:
                return
            
            price = tick.bid if order_type == mt5.ORDER_TYPE_SELL else tick.ask
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á hedge order
            request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": self.symbol,
                "volume": hedge_volume,
                "type": order_type,
                "price": price,
                "deviation": 3,
                "magic": 999003,
                "comment": f"Hedge-{plan.recovery_id}",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_IOC,
            }
            
            result = mt5.order_send(request)
            
            if result.retcode == mt5.TRADE_RETCODE_DONE:
                print(f"‚úÖ Hedge position opened: {result.order}")
                print(f"üìä Hedge Volume: {hedge_volume}, Price: {result.price}")
                
                plan.recovery_positions.append(result.order)
                plan.executed_volume += hedge_volume
                plan.recovery_cost += hedge_volume * result.price
                
            else:
                print(f"‚ùå Hedge order failed: {result.retcode}")
        except Exception as e:
                print(f"‚ùå Hedging recovery execution error: {e}")
   
    def _execute_averaging_recovery(self, plan: RecoveryPlan):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ö‡∏ö Averaging"""
        try:
            original_pos = plan.original_position
            params = plan.parameters
            
            average_distance = params.get('average_distance_pips', 30)
            volume_increment = params.get('volume_increment', 0.5)
            max_averages = params.get('max_averages', 3)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô averages ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß
            if len(plan.recovery_positions) >= max_averages:
                return
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö averaging
            pip_value = 0.01
            current_price = original_pos.current_price
            
            # ‡∏£‡∏∞‡∏î‡∏±‡∏ö averaging ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            level = len(plan.recovery_positions) + 1
            
            if original_pos.position_type == mt5.POSITION_TYPE_BUY:
                # Average down ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BUY position
                target_price = original_pos.open_price - (average_distance * pip_value * level)
                order_type = mt5.ORDER_TYPE_BUY
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ target ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if current_price > target_price:
                    return  # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö averaging
            else:
                # Average up ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SELL position
                target_price = original_pos.open_price + (average_distance * pip_value * level)
                order_type = mt5.ORDER_TYPE_SELL
                
                if current_price < target_price:
                    return
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volume
            avg_volume = original_pos.volume * (1 + volume_increment * level)
            
            # ‡∏™‡πà‡∏á market order
            tick = mt5.symbol_info_tick(self.symbol)
            if not tick:
                return
            
            price = tick.ask if order_type == mt5.ORDER_TYPE_BUY else tick.bid
            
            request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": self.symbol,
                "volume": avg_volume,
                "type": order_type,
                "price": price,
                "deviation": 3,
                "magic": 999004,
                "comment": f"Average-{plan.recovery_id}-L{level}",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_IOC,
            }
            
            result = mt5.order_send(request)
            
            if result.retcode == mt5.TRADE_RETCODE_DONE:
                print(f"‚úÖ Averaging order executed: Level {level}")
                print(f"üìä Volume: {avg_volume}, Price: {result.price}")
                
                plan.recovery_positions.append(result.order)
                plan.executed_volume += avg_volume
                plan.recovery_cost += avg_volume * result.price
                
            else:
                print(f"‚ùå Averaging order failed: {result.retcode}")
                
        except Exception as e:
            print(f"‚ùå Averaging recovery execution error: {e}")
   
    def _execute_quick_recovery(self, plan: RecoveryPlan):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ö‡∏ö Quick Recovery"""
        try:
            original_pos = plan.original_position
            params = plan.parameters
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏≥ quick recovery ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            if len(plan.recovery_positions) > 0:
                return
            
            multiplier = params.get('quick_volume_multiplier', 1.5)
            quick_volume = original_pos.volume * multiplier
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
            if original_pos.position_type == mt5.POSITION_TYPE_BUY:
                order_type = mt5.ORDER_TYPE_SELL
            else:
                order_type = mt5.ORDER_TYPE_BUY
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            tick = mt5.symbol_info_tick(self.symbol)
            if not tick:
                return
            
            price = tick.bid if order_type == mt5.ORDER_TYPE_SELL else tick.ask
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á quick recovery order
            request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": self.symbol,
                "volume": quick_volume,
                "type": order_type,
                "price": price,
                "deviation": 3,
                "magic": 999005,
                "comment": f"Quick-{plan.recovery_id}",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_FOK,
            }
            
            result = mt5.order_send(request)
            
            if result.retcode == mt5.TRADE_RETCODE_DONE:
                print(f"‚úÖ Quick recovery order executed: {result.order}")
                print(f"üìä Volume: {quick_volume}, Price: {result.price}")
                
                plan.recovery_positions.append(result.order)
                plan.executed_volume += quick_volume
                plan.recovery_cost += quick_volume * result.price
                
            else:
                print(f"‚ùå Quick recovery order failed: {result.retcode}")
                
        except Exception as e:
            print(f"‚ùå Quick recovery execution error: {e}")
   
    def _execute_smart_recovery(self, plan: RecoveryPlan):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ö‡∏ö Smart Recovery (‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ)"""
        try:
            original_pos = plan.original_position
            loss_amount = abs(original_pos.profit)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            if loss_amount < 200:
                # ‡πÉ‡∏ä‡πâ Quick Recovery
                self._execute_quick_recovery(plan)
            elif loss_amount < 500:
                # ‡πÉ‡∏ä‡πâ Averaging + Quick Recovery
                if len(plan.recovery_positions) == 0:
                    self._execute_quick_recovery(plan)
                else:
                    self._execute_averaging_recovery(plan)
            else:
                # ‡πÉ‡∏ä‡πâ Hedging + Grid
                if len(plan.recovery_positions) == 0:
                    self._execute_hedging_recovery(plan)
                else:
                    self._execute_grid_recovery(plan)
                    
        except Exception as e:
            print(f"‚ùå Smart recovery execution error: {e}")
    
    def _continue_recovery_execution(self, plan: RecoveryPlan):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
        try:
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            self._update_recovery_status(plan)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if plan.current_profit >= plan.target_profit:
                self._complete_recovery(plan, success=True)
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏´‡∏¢‡∏∏‡∏î
            if self._should_stop_recovery(plan):
                self._complete_recovery(plan, success=False)
                return
                
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            if plan.strategy in [RecoveryStrategy.GRID_TRADING, RecoveryStrategy.AVERAGING]:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° level ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if self._should_add_recovery_level(plan):
                    if plan.strategy == RecoveryStrategy.GRID_TRADING:
                        self._execute_grid_recovery(plan)
                    else:
                        self._execute_averaging_recovery(plan)
                        
        except Exception as e:
            print(f"‚ùå Error continuing recovery execution: {e}")
   
    def _update_recovery_status(self, plan: RecoveryPlan):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
        try:
            total_profit = 0.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏à‡∏≤‡∏Å original position
            original_ticket = plan.original_position.ticket
            original_position = mt5.positions_get(ticket=original_ticket)
            
            if original_position:
                total_profit += original_position[0].profit
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡∏à‡∏≤‡∏Å recovery positions
            for ticket in plan.recovery_positions:
                recovery_position = mt5.positions_get(ticket=ticket)
                if recovery_position:
                    total_profit += recovery_position[0].profit
            
            plan.current_profit = total_profit
            
        except Exception as e:
            print(f"‚ùå Error updating recovery status: {e}")
   
    def _should_stop_recovery(self, plan: RecoveryPlan) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô attempts
            if plan.original_position.recovery_attempts >= plan.max_recovery_attempts:
                return True
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö volume limit
            if plan.executed_volume >= plan.max_recovery_volume:
                return True
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö time limit
            elapsed_time = datetime.now() - plan.created_time
            if elapsed_time.total_seconds() > 3600:  # 1 hour limit
                return True
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
            if plan.current_profit < -(abs(plan.original_position.profit) * 2):
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå Error checking stop conditions: {e}")
            return True
   
    def _should_add_recovery_level(self, plan: RecoveryPlan) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° recovery level ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å recovery ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if len(plan.recovery_positions) > 0:
                # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏ó‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢)
                time_since_last = datetime.now() - plan.created_time
                if time_since_last.total_seconds() < 300:  # ‡∏£‡∏≠ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
                    return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            original_pos = plan.original_position
            current_loss = abs(plan.current_profit)
            original_loss = abs(original_pos.profit)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° level ‡∏´‡∏≤‡∏Å‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô 50%
            if current_loss > original_loss * 1.5:
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå Error checking add level conditions: {e}")
            return False
   
    def _complete_recovery(self, plan: RecoveryPlan, success: bool):
        """‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
        try:
            plan.status = RecoveryStatus.COMPLETED if success else RecoveryStatus.FAILED
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
            result = RecoveryResult(
                recovery_id=plan.recovery_id,
                success=success,
                final_profit=plan.current_profit,
                total_volume_used=plan.executed_volume,
                total_cost=plan.recovery_cost,
                recovery_time=datetime.now() - plan.created_time,
                positions_opened=len(plan.recovery_positions),
                strategy_used=plan.strategy,
                completion_time=datetime.now(),
                notes=f"{'Successful' if success else 'Failed'} recovery using {plan.strategy.value}"
            )
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            self.completed_recoveries.append(result)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            self._update_strategy_performance(plan.strategy, success, plan.current_profit)
            
            # ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å active recoveries
            if plan.recovery_id in self.active_recoveries:
                del self.active_recoveries[plan.recovery_id]
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á original position
            if plan.original_position.ticket in self.losing_positions:
                self.losing_positions[plan.original_position.ticket].is_being_recovered = False
                
                if success:
                    # ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å losing positions ‡∏´‡∏≤‡∏Å‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    del self.losing_positions[plan.original_position.ticket]
            
            # Log ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            status_emoji = "‚úÖ" if success else "‚ùå"
            print(f"{status_emoji} Recovery {('completed' if success else 'failed')}: {plan.recovery_id}")
            print(f"üí∞ Final Profit: ${result.final_profit:.2f}")
            print(f"üìä Volume Used: {result.total_volume_used:.2f}")
            print(f"‚è±Ô∏è Recovery Time: {result.recovery_time}")
            print(f"üéØ Strategy: {result.strategy_used.value}")
            
        except Exception as e:
            print(f"‚ùå Error completing recovery: {e}")
   
    def _update_strategy_performance(self, strategy: RecoveryStrategy, success: bool, profit: float):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"""
        try:
            performance_record = {
                'success': success,
                'profit': profit,
                'timestamp': datetime.now()
            }
            
            self.strategy_performance[strategy].append(performance_record)
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 100 records ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if len(self.strategy_performance[strategy]) > 100:
                self.strategy_performance[strategy] = self.strategy_performance[strategy][-100:]
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            self._recalculate_strategy_weights()
            
        except Exception as e:
            print(f"‚ùå Error updating strategy performance: {e}")
   
    def _recalculate_strategy_weights(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà"""
        try:
            for strategy, records in self.strategy_performance.items():
                if len(records) < 5:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                    continue
                
                recent_records = records[-20:]  # ‡πÉ‡∏ä‡πâ 20 records ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                success_rate = sum(1 for r in recent_records if r['success']) / len(recent_records)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
                avg_profit = statistics.mean([r['profit'] for r in recent_records])
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà
                # Base weight = 1.0, ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
                weight = 1.0 + (success_rate - 0.5) + (avg_profit / 1000)
                weight = max(0.3, min(weight, 2.0))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0.3 - 2.0
                
                self.strategy_weights[strategy] = weight
                
        except Exception as e:
            print(f"‚ùå Error recalculating strategy weights: {e}")
    
    def _check_recovery_completion(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
        try:
            completed_recoveries = []
            
            for recovery_id, plan in self.active_recoveries.items():
                if plan.status in [RecoveryStatus.COMPLETED, RecoveryStatus.FAILED, RecoveryStatus.CANCELLED]:
                    completed_recoveries.append(recovery_id)
            
            # ‡∏•‡∏ö recoveries ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            for recovery_id in completed_recoveries:
                del self.active_recoveries[recovery_id]
                
        except Exception as e:
            print(f"‚ùå Error checking recovery completion: {e}")
   
    def _log_recovery_status(self):
        """Log ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
        try:
            current_time = datetime.now()
            
            # Log ‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            if not hasattr(self, '_last_status_log'):
                self._last_status_log = current_time
            
            if (current_time - self._last_status_log).total_seconds() >= 60:
                print(f"\nüîß RECOVERY ENGINE STATUS - {current_time.strftime('%H:%M:%S')}")
                print(f"üìç Losing Positions: {len(self.losing_positions)}")
                print(f"üîÑ Active Recoveries: {len(self.active_recoveries)}")
                print(f"‚úÖ Completed Recoveries: {len(self.completed_recoveries)}")
                
                if self.active_recoveries:
                    print("üéØ Active Recovery Details:")
                    for recovery_id, plan in self.active_recoveries.items():
                        print(f"  - {recovery_id}: {plan.strategy.value} (${plan.current_profit:.2f})")
                
                if self.losing_positions:
                    print("‚ö†Ô∏è Losing Positions:")
                    for ticket, pos in self.losing_positions.items():
                        recovery_status = "üîÑ" if pos.is_being_recovered else "‚è∏Ô∏è"
                        print(f"  - {ticket}: ${pos.profit:.2f} {recovery_status}")
                
                print("-" * 60)
                self._last_status_log = current_time
                
        except Exception as e:
            print(f"‚ùå Error logging recovery status: {e}")
   
    # ===== PUBLIC METHODS =====
    
    def force_recovery(self, ticket: int, strategy: RecoveryStrategy = RecoveryStrategy.QUICK_RECOVERY) -> bool:
        """‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö position ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• position
            position = mt5.positions_get(ticket=ticket)
            if not position:
                print(f"‚ùå Position {ticket} not found")
                return False
            
            position = position[0]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á LosingPosition
            losing_pos = LosingPosition(
                ticket=position.ticket,
                symbol=position.symbol,
                position_type=position.type,
                volume=position.volume,
                open_price=position.price_open,
                current_price=position.price_current,
                profit=position.profit,
                open_time=datetime.fromtimestamp(position.time),
                magic_number=position.magic,
                comment=position.comment
            )
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
            recovery_id = f"MANUAL_{ticket}_{int(time.time())}"
            plan = RecoveryPlan(
                recovery_id=recovery_id,
                original_position=losing_pos,
                strategy=strategy,
                trigger=RecoveryTrigger.MANUAL,
                created_time=datetime.now(),
                target_profit=abs(position.profit) * 1.2,
                max_recovery_attempts=5,
                max_recovery_volume=position.volume * 10
            )
            
            plan.parameters = self._get_strategy_parameters(strategy, losing_pos)
            plan.success_probability = self._calculate_success_probability(plan)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
            self.active_recoveries[recovery_id] = plan
            self.losing_positions[ticket] = losing_pos
            losing_pos.is_being_recovered = True
            losing_pos.recovery_id = recovery_id
            
            print(f"‚úÖ Manual recovery initiated: {recovery_id}")
            print(f"üéØ Strategy: {strategy.value}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error forcing recovery: {e}")
            return False
   
    def cancel_recovery(self, recovery_id: str) -> bool:
        """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
        try:
            if recovery_id not in self.active_recoveries:
                print(f"‚ùå Recovery {recovery_id} not found")
                return False
            
            plan = self.active_recoveries[recovery_id]
            plan.status = RecoveryStatus.CANCELLED
            
            # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å pending orders ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            for ticket in plan.recovery_positions:
                order_info = mt5.orders_get(ticket=ticket)
                if order_info:
                    # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å pending order
                    cancel_request = {
                        "action": mt5.TRADE_ACTION_REMOVE,
                        "order": ticket,
                    }
                    mt5.order_send(cancel_request)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if plan.original_position.ticket in self.losing_positions:
                self.losing_positions[plan.original_position.ticket].is_being_recovered = False
            
            print(f"‚èπÔ∏è Recovery cancelled: {recovery_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error cancelling recovery: {e}")
            return False
   
    def get_recovery_stats(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
        try:
            total_recoveries = len(self.completed_recoveries)
            successful_recoveries = sum(1 for r in self.completed_recoveries if r.success)
            
            stats = {
                'total_recoveries': total_recoveries,
                'successful_recoveries': successful_recoveries,
                'success_rate': (successful_recoveries / max(total_recoveries, 1)) * 100,
                'active_recoveries': len(self.active_recoveries),
                'losing_positions': len(self.losing_positions),
                'strategy_weights': dict(self.strategy_weights),
                'total_profit_recovered': sum(r.final_profit for r in self.completed_recoveries if r.success),
                'average_recovery_time': statistics.mean([
                    r.recovery_time.total_seconds() / 60  # Convert to minutes
                    for r in self.completed_recoveries
                ]) if self.completed_recoveries else 0
            }
            
            return stats
            
        except Exception as e:
            print(f"‚ùå Error getting recovery stats: {e}")
            return {}
   
    def close_all_losing_positions(self) -> bool:
        """‡∏õ‡∏¥‡∏î positions ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Emergency function)"""
        try:
            print("üö® EMERGENCY: Closing all losing positions")
            
            closed_count = 0
            for ticket, losing_pos in list(self.losing_positions.items()):
                # ‡∏õ‡∏¥‡∏î position
                close_request = {
                    "action": mt5.TRADE_ACTION_DEAL,
                    "symbol": losing_pos.symbol,
                    "volume": losing_pos.volume,
                    "type": mt5.ORDER_TYPE_SELL if losing_pos.position_type == mt5.POSITION_TYPE_BUY else mt5.ORDER_TYPE_BUY,
                    "position": ticket,
                    "magic": 999999,
                    "comment": "Emergency Close",
                    "type_time": mt5.ORDER_TIME_GTC,
                    "type_filling": mt5.ORDER_FILLING_FOK,
                }
                
                result = mt5.order_send(close_request)
                if result.retcode == mt5.TRADE_RETCODE_DONE:
                    print(f"‚úÖ Position {ticket} closed")
                    closed_count += 1
                else:
                    print(f"‚ùå Failed to close position {ticket}: {result.retcode}")
            
            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            self.losing_positions.clear()
            self.active_recoveries.clear()
            
            print(f"üö® Emergency close completed: {closed_count} positions closed")
            return True
            
        except Exception as e:
            print(f"‚ùå Error in emergency close: {e}")
            return False

# ===== FACTORY FUNCTION =====

def create_recovery_engine(symbol: str = "XAUUSD.v") -> RealRecoveryEngine:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Recovery Engine ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö symbol ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    """
    try:
        engine = RealRecoveryEngine(symbol)
        print(f"‚úÖ Recovery Engine created for {symbol}")
        return engine
    except Exception as e:
        print(f"‚ùå Failed to create Recovery Engine: {e}")
        raise

# ===== TESTING FUNCTION =====

def test_recovery_engine():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Recovery Engine
    """
    print("üß™ Testing Recovery Engine...")
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á engine
        engine = create_recovery_engine("XAUUSD.v")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        engine.start_recovery_monitoring()
        
        # ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        import time
        start_time = time.time()
        while time.time() - start_time < 60:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            stats = engine.get_recovery_stats()
            print(f"üìä Recovery Stats: {stats}")
            
            time.sleep(10)
        
        # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        engine.stop_recovery_monitoring()
        
        print("‚úÖ Recovery Engine test completed")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")

if __name__ == "__main__":
   # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏≤‡∏Å run ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
   test_recovery_engine()
# intelligent_recovery/strategies/martingale_smart.py - Smart Martingale Recovery System

import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from enum import Enum
import math

class RecoveryState(Enum):
    """üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ Recovery"""
    INACTIVE = "inactive"       # ‡πÑ‡∏°‡πà‡∏°‡∏µ position ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
    ACTIVE = "active"           # ‡∏Å‡∏≥‡∏•‡∏±‡∏á recovery
    CRITICAL = "critical"       # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞ ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á
    EMERGENCY = "emergency"     # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß

class MartingaleType(Enum):
    """üìà ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Martingale"""
    CLASSIC = "classic"         # ‡πÄ‡∏û‡∏¥‡πà‡∏° 2x ‡πÄ‡∏™‡∏°‡∏≠
    PROGRESSIVE = "progressive" # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
    ADAPTIVE = "adaptive"       # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î
    FIBONACCI = "fibonacci"     # ‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö Fibonacci

@dataclass
class RecoveryPosition:
    """üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á Recovery"""
    ticket: int
    symbol: str
    position_type: str          # "BUY" or "SELL"
    volume: float
    open_price: float
    current_price: float
    unrealized_pnl: float
    open_time: datetime
    recovery_level: int         # ‡∏£‡∏∞‡∏î‡∏±‡∏ö recovery (0 = original)
    original_volume: float      # volume ‡πÄ‡∏î‡∏¥‡∏°
    accumulated_loss: float     # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏∞‡∏™‡∏°

@dataclass
class MartingaleDecision:
    """üéØ ‡∏Ñ‡∏≥‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à Recovery ‡πÅ‡∏ö‡∏ö Martingale"""
    should_recover: bool
    recovery_type: str          # "BUY" or "SELL"
    recovery_volume: float
    recovery_price: float
    target_profit: float
    max_loss_limit: float
    reasoning: str
    confidence: float
    risk_level: str             # "LOW", "MEDIUM", "HIGH", "CRITICAL"

class SmartMartingaleRecovery:
    """
    üß† Smart Martingale Recovery System - Advanced Recovery Logic
    
    ‚ö° ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
    - Mean Reversion scenarios (‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ã‡∏î‡πå‡πÄ‡∏ß‡∏¢‡πå)
    - Asian Session (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡πà‡∏≥)
    - Ranging markets
    
    üéØ ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå:
    - ‡πÄ‡∏û‡∏¥‡πà‡∏° position ‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏õ‡∏ï‡πà‡∏≠
    - ‡πÉ‡∏ä‡πâ multiple lot size formulas
    - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î
    - ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    - ‡πÉ‡∏ä‡πâ Target Profit ‡πÅ‡∏ö‡∏ö dynamic
    
    ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:
    - ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÅ‡∏£‡∏á
    - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ capital ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
    - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î max levels
    """
    
    def __init__(self, config: Dict):
        print("üß† Initializing Smart Martingale Recovery...")
        
        self.config = config
        
        # Martingale parameters
        self.martingale_type = config.get('martingale_type', 'adaptive')
        self.max_recovery_levels = config.get('max_recovery_levels', 5)
        self.base_multiplier = config.get('base_multiplier', 1.8)
        self.max_multiplier = config.get('max_multiplier', 8.0)
        
        # Risk management
        self.max_total_loss = config.get('max_total_loss', 500.0)  # USD
        self.max_position_size = config.get('max_position_size', 2.0)  # lots
        self.recovery_threshold = config.get('recovery_threshold', -20.0)  # USD trigger
        
        # Market condition adjustments
        self.volatility_adjustment = config.get('volatility_adjustment', True)
        self.session_adjustment = config.get('session_adjustment', True)
        self.trend_awareness = config.get('trend_awareness', True)
        
        # Fibonacci sequence for Fibonacci martingale
        self.fibonacci_sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
        
        # Progressive multipliers for different strategies
        self.progressive_multipliers = {
            'conservative': [1.0, 1.5, 2.0, 2.5, 3.0],
            'moderate': [1.0, 1.8, 2.5, 3.5, 5.0],
            'aggressive': [1.0, 2.0, 3.0, 5.0, 8.0]
        }
        
        # Session multipliers
        self.session_multipliers = {
            'asian': 1.2,       # ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö martingale
            'london': 0.8,      # ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
            'ny': 0.7,          # ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
            'overlap': 0.6,     # ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á
            'quiet': 1.5        # ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏°‡∏≤‡∏Å
        }
        
        # Current state
        self.recovery_positions = {}  # ticket -> RecoveryPosition
        self.recovery_state = RecoveryState.INACTIVE
        self.total_unrealized_loss = 0.0
        self.max_drawdown_reached = 0.0
        
        # Statistics
        self.recovery_history = []
        self.success_count = 0
        self.failure_count = 0
        
        print("‚úÖ Smart Martingale Recovery initialized")
        print(f"   - Type: {self.martingale_type}")
        print(f"   - Max Levels: {self.max_recovery_levels}")
        print(f"   - Base Multiplier: {self.base_multiplier}")
        print(f"   - Recovery Threshold: ${self.recovery_threshold}")
    
    def analyze_recovery_need(self, positions: List[Dict]) -> bool:
        """
        üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á Recovery ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        
        Args:
            positions: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ positions ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
        Returns:
            True ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á recovery
        """
        try:
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï recovery positions
            self._update_recovery_positions(positions)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°
            total_loss = sum(pos.unrealized_pnl for pos in self.recovery_positions.values())
            self.total_unrealized_loss = total_loss
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï recovery state
            self._update_recovery_state(total_loss)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç recovery
            needs_recovery = self._check_recovery_conditions(total_loss)
            
            if needs_recovery:
                print(f"üîÑ Recovery needed - Total Loss: ${total_loss:.2f}")
                print(f"   State: {self.recovery_state.value}")
                print(f"   Positions: {len(self.recovery_positions)}")
            
            return needs_recovery
            
        except Exception as e:
            print(f"‚ùå Recovery analysis error: {e}")
            return False
    
    def _update_recovery_positions(self, positions: List[Dict]):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recovery positions"""
        try:
            current_tickets = set()
            
            for pos in positions:
                ticket = pos.get('ticket')
                if not ticket:
                    continue
                
                current_tickets.add(ticket)
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° position ‡πÉ‡∏´‡∏°‡πà
                if ticket in self.recovery_positions:
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï position ‡πÄ‡∏î‡∏¥‡∏°
                    recovery_pos = self.recovery_positions[ticket]
                    recovery_pos.current_price = pos.get('current_price', recovery_pos.current_price)
                    recovery_pos.unrealized_pnl = pos.get('profit', 0.0)
                else:
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° position ‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô)
                    profit = pos.get('profit', 0.0)
                    if profit < 0:  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ position ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                        recovery_pos = RecoveryPosition(
                            ticket=ticket,
                            symbol=pos.get('symbol', 'XAUUSD'),
                            position_type=pos.get('type', 'BUY'),
                            volume=pos.get('volume', 0.01),
                            open_price=pos.get('price_open', 0.0),
                            current_price=pos.get('current_price', 0.0),
                            unrealized_pnl=profit,
                            open_time=pos.get('time', datetime.now()),
                            recovery_level=0,
                            original_volume=pos.get('volume', 0.01),
                            accumulated_loss=profit
                        )
                        self.recovery_positions[ticket] = recovery_pos
            
            # ‡∏•‡∏ö positions ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
            closed_tickets = set(self.recovery_positions.keys()) - current_tickets
            for ticket in closed_tickets:
                del self.recovery_positions[ticket]
                
        except Exception as e:
            print(f"‚ùå Recovery positions update error: {e}")
    
    def _update_recovery_state(self, total_loss: float):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ recovery"""
        try:
            if total_loss >= -50:
                self.recovery_state = RecoveryState.INACTIVE
            elif total_loss >= -200:
                self.recovery_state = RecoveryState.ACTIVE
            elif total_loss >= -400:
                self.recovery_state = RecoveryState.CRITICAL
            else:
                self.recovery_state = RecoveryState.EMERGENCY
                
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï max drawdown
            if abs(total_loss) > self.max_drawdown_reached:
                self.max_drawdown_reached = abs(total_loss)
                
        except Exception as e:
            print(f"‚ùå Recovery state update error: {e}")
    
    def _check_recovery_conditions(self, total_loss: float) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ recovery"""
        try:
            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            if total_loss > self.recovery_threshold:
                return False  # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå
            
            if self.recovery_state == RecoveryState.EMERGENCY:
                return False  # ‡∏´‡∏¢‡∏∏‡∏î recovery ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
            
            if abs(total_loss) >= self.max_total_loss:
                return False  # ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô recovery levels
            max_level = max((pos.recovery_level for pos in self.recovery_positions.values()), default=0)
            if max_level >= self.max_recovery_levels:
                return False  # ‡πÄ‡∏Å‡∏¥‡∏ô max recovery levels
            
            return True
            
        except Exception as e:
            print(f"‚ùå Recovery condition check error: {e}")
            return False
    
    def calculate_recovery_decision(self, market_data: pd.DataFrame, 
                                  current_session: str = 'asian') -> Optional[MartingaleDecision]:
        """
        üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à Recovery ‡πÅ‡∏ö‡∏ö Martingale
        
        Args:
            market_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            current_session: ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
        Returns:
            MartingaleDecision ‡∏´‡∏£‡∏∑‡∏≠ None
        """
        try:
            if not self.recovery_positions:
                return None
            
            # ‡∏´‡∏≤ position ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            worst_position = min(self.recovery_positions.values(), 
                                key=lambda x: x.unrealized_pnl)
            
            if worst_position.unrealized_pnl > self.recovery_threshold:
                return None  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á recovery
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì recovery volume
            recovery_volume = self._calculate_recovery_volume(
                worst_position, market_data, current_session
            )
            
            if recovery_volume <= 0 or recovery_volume > self.max_position_size:
                return None  # ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á recovery (‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
            recovery_type = worst_position.position_type
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            current_price = market_data['close'].iloc[-1]
            recovery_price = current_price
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì target profit
            target_profit = self._calculate_target_profit(worst_position, recovery_volume)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì max loss limit
            max_loss_limit = self._calculate_max_loss_limit(worst_position)
            
            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
            risk_level = self._assess_risk_level(worst_position, recovery_volume, market_data)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì confidence
            confidence = self._calculate_recovery_confidence(
                worst_position, market_data, current_session
            )
            
            decision = MartingaleDecision(
                should_recover=True,
                recovery_type=recovery_type,
                recovery_volume=recovery_volume,
                recovery_price=recovery_price,
                target_profit=target_profit,
                max_loss_limit=max_loss_limit,
                reasoning=self._create_recovery_reasoning(worst_position, recovery_volume),
                confidence=confidence,
                risk_level=risk_level
            )
            
            print(f"üéØ Martingale Recovery Decision:")
            print(f"   Type: {decision.recovery_type}")
            print(f"   Volume: {decision.recovery_volume}")
            print(f"   Target Profit: ${decision.target_profit:.2f}")
            print(f"   Risk Level: {decision.risk_level}")
            print(f"   Confidence: {decision.confidence:.2f}")
            
            return decision
            
        except Exception as e:
            print(f"‚ùå Recovery decision error: {e}")
            return None
    
    def _calculate_recovery_volume(self, worst_position: RecoveryPosition, 
                                 market_data: pd.DataFrame, session: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì recovery ‡∏ï‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó martingale"""
        try:
            base_volume = worst_position.original_volume
            current_level = worst_position.recovery_level + 1
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏° martingale type
            if self.martingale_type == 'classic':
                multiplier = self.base_multiplier ** current_level
                
            elif self.martingale_type == 'progressive':
                strategy = self.config.get('progressive_strategy', 'moderate')
                multipliers = self.progressive_multipliers[strategy]
                multiplier = multipliers[min(current_level, len(multipliers)-1)]
                
            elif self.martingale_type == 'fibonacci':
                fib_index = min(current_level, len(self.fibonacci_sequence)-1)
                multiplier = self.fibonacci_sequence[fib_index]
                
            elif self.martingale_type == 'adaptive':
                multiplier = self._calculate_adaptive_multiplier(
                    worst_position, market_data, session
                )
            else:
                multiplier = self.base_multiplier
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î multiplier ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            multiplier = min(multiplier, self.max_multiplier)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volume
            recovery_volume = base_volume * multiplier
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° session
            session_mult = self.session_multipliers.get(session, 1.0)
            recovery_volume *= session_mult
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            if self.volatility_adjustment:
                volatility_mult = self._calculate_volatility_multiplier(market_data)
                recovery_volume *= volatility_mult
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            recovery_volume = min(recovery_volume, self.max_position_size)
            
            return round(recovery_volume, 2)
            
        except Exception as e:
            print(f"‚ùå Recovery volume calculation error: {e}")
            return 0.0
    
    def _calculate_adaptive_multiplier(self, position: RecoveryPosition,
                                     market_data: pd.DataFrame, session: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì multiplier ‡πÅ‡∏ö‡∏ö adaptive ‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            base_multiplier = self.base_multiplier
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            loss_ratio = abs(position.unrealized_pnl) / abs(self.recovery_threshold)
            loss_adjustment = 1.0 + (loss_ratio * 0.3)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30%
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° recovery level
            level_adjustment = 1.0 + (position.recovery_level * 0.2)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° session
            session_adjustment = self.session_multipliers.get(session, 1.0)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ)
            trend_adjustment = 1.0
            if self.trend_awareness:
                trend_adjustment = self._calculate_trend_adjustment(market_data, position)
            
            # ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤
            adaptive_multiplier = (base_multiplier * loss_adjustment * 
                                 level_adjustment * session_adjustment * trend_adjustment)
            
            return min(adaptive_multiplier, self.max_multiplier)
            
        except Exception as e:
            print(f"‚ùå Adaptive multiplier calculation error: {e}")
            return self.base_multiplier
    
    def _calculate_volatility_multiplier(self, market_data: pd.DataFrame) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì multiplier ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
        try:
            if len(market_data) < 20:
                return 1.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ATR
            high_low = market_data['high'] - market_data['low']
            high_close = abs(market_data['high'] - market_data['close'].shift(1))
            low_close = abs(market_data['low'] - market_data['close'].shift(1))
            
            true_range = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
            atr = true_range.rolling(window=14).mean().iloc[-1]
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° ATR (‡∏¢‡∏¥‡πà‡∏á‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏°‡∏≤‡∏Å ‡∏•‡∏î multiplier)
            atr_normalized = atr / market_data['close'].iloc[-1] * 100  # ‡πÄ‡∏õ‡πá‡∏ô %
            
            if atr_normalized > 1.5:  # ‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á
                return 0.8
            elif atr_normalized > 1.0:  # ‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                return 0.9
            elif atr_normalized < 0.5:  # ‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡πà‡∏≥
                return 1.2
            else:
                return 1.0
                
        except Exception as e:
            print(f"‚ùå Volatility multiplier calculation error: {e}")
            return 1.0
    
    def _calculate_trend_adjustment(self, market_data: pd.DataFrame, 
                                  position: RecoveryPosition) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå"""
        try:
            if len(market_data) < 50:
                return 1.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì moving averages
            ma_20 = market_data['close'].rolling(window=20).mean().iloc[-1]
            ma_50 = market_data['close'].rolling(window=50).mean().iloc[-1]
            current_price = market_data['close'].iloc[-1]
            
            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
            if ma_20 > ma_50 and current_price > ma_20:
                trend = "uptrend"
            elif ma_20 < ma_50 and current_price < ma_20:
                trend = "downtrend"
            else:
                trend = "sideways"
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á position ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
            if position.position_type == "BUY":
                if trend == "downtrend":
                    return 0.7  # ‡∏•‡∏î multiplier ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
                elif trend == "sideways":
                    return 1.1  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ã‡∏î‡πå‡πÄ‡∏ß‡∏¢‡πå
                else:
                    return 0.9  # ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏£‡∏∞‡∏ß‡∏±‡∏á overbought
            else:  # SELL
                if trend == "uptrend":
                    return 0.7  # ‡∏•‡∏î multiplier ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
                elif trend == "sideways":
                    return 1.1  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ã‡∏î‡πå‡πÄ‡∏ß‡∏¢‡πå
                else:
                    return 0.9  # ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏£‡∏∞‡∏ß‡∏±‡∏á oversold
                    
        except Exception as e:
            print(f"‚ùå Trend adjustment calculation error: {e}")
            return 1.0
    
    def _calculate_target_profit(self, position: RecoveryPosition, recovery_volume: float) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì target profit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ recovery"""
        try:
            # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_loss = abs(position.accumulated_loss)
            
            # ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≥‡πÑ‡∏£ = ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô + ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
            base_target = current_loss * 1.1  # ‡πÄ‡∏û‡∏¥‡πà‡∏° 10%
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° recovery level (‡∏¢‡∏¥‡πà‡∏á‡∏•‡∏∂‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
            level_adjustment = 1.0 + (position.recovery_level * 0.05)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volume ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°
            volume_ratio = recovery_volume / position.original_volume
            volume_adjustment = 1.0 + (volume_ratio * 0.02)
            
            target_profit = base_target * level_adjustment * volume_adjustment
            
            return round(target_profit, 2)
            
        except Exception as e:
            print(f"‚ùå Target profit calculation error: {e}")
            return 50.0
    
    def _calculate_max_loss_limit(self, position: RecoveryPosition) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì max loss limit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ recovery"""
        try:
            # ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á max total loss
            remaining_capacity = self.max_total_loss - abs(self.total_unrealized_loss)
            max_additional_loss = remaining_capacity * 0.3  # ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ 30% ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            
            return max(max_additional_loss, 100.0)  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ $100
            
        except Exception as e:
            print(f"‚ùå Max loss limit calculation error: {e}")
            return 100.0
    
    def _assess_risk_level(self, position: RecoveryPosition, recovery_volume: float,
                          market_data: pd.DataFrame) -> str:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"""
        try:
            risk_score = 0
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å recovery level
            risk_score += position.recovery_level * 2
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å volume
            volume_ratio = recovery_volume / position.original_volume
            if volume_ratio > 5:
                risk_score += 3
            elif volume_ratio > 3:
                risk_score += 2
            elif volume_ratio > 2:
                risk_score += 1
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏∞‡∏™‡∏°
            loss_ratio = abs(self.total_unrealized_loss) / self.max_total_loss
            if loss_ratio > 0.8:
                risk_score += 3
            elif loss_ratio > 0.6:
                risk_score += 2
            elif loss_ratio > 0.4:
                risk_score += 1
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            if len(market_data) >= 14:
                volatility = market_data['close'].pct_change().rolling(14).std().iloc[-1]
                if volatility > 0.02:  # ‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á
                    risk_score += 2
                elif volatility > 0.015:
                    risk_score += 1
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
            if risk_score <= 2:
                return "LOW"
            elif risk_score <= 5:
                return "MEDIUM"
            elif risk_score <= 8:
                return "HIGH"
            else:
                return "CRITICAL"
                
        except Exception as e:
            print(f"‚ùå Risk assessment error: {e}")
            return "MEDIUM"
    
    def _calculate_recovery_confidence(self, position: RecoveryPosition,
                                     market_data: pd.DataFrame, session: str) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ recovery"""
        try:
            confidence = 0.5  # base confidence
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° session (martingale ‡∏î‡∏µ‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ã‡∏î‡πå‡πÄ‡∏ß‡∏¢‡πå)
            session_confidence = {
                'asian': 0.8,
                'quiet': 0.85,
                'london': 0.4,
                'ny': 0.3,
                'overlap': 0.25
            }
            confidence = session_confidence.get(session, 0.5)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° recovery level (‡∏¢‡∏¥‡πà‡∏á‡∏•‡∏∂‡∏Å ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏•‡∏î)
            level_penalty = position.recovery_level * 0.1
            confidence -= level_penalty
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô (‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ)
            if len(market_data) >= 14:
                volatility = market_data['close'].pct_change().rolling(14).std().iloc[-1]
                if volatility < 0.01:  # ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
                    confidence += 0.1
                elif volatility > 0.02:  # ‡∏ï‡∏•‡∏≤‡∏î‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
                    confidence -= 0.15
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ recovery state
            if self.recovery_state == RecoveryState.CRITICAL:
                confidence -= 0.2
            elif self.recovery_state == RecoveryState.EMERGENCY:
                confidence -= 0.4
            
            return max(0.1, min(confidence, 0.95))
            
        except Exception as e:
            print(f"‚ùå Recovery confidence calculation error: {e}")
            return 0.5
    
    def _create_recovery_reasoning(self, position: RecoveryPosition, recovery_volume: float) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£ recovery"""
        reasons = []
        
        reasons.append(f"Position: {position.position_type}")
        reasons.append(f"Level: {position.recovery_level + 1}")
        reasons.append(f"Loss: ${position.unrealized_pnl:.2f}")
        reasons.append(f"Volume: {recovery_volume}")
        reasons.append(f"Type: {self.martingale_type}")
        reasons.append(f"State: {self.recovery_state.value}")
        
        return " | ".join(reasons)
    
    def execute_recovery(self, decision: MartingaleDecision, mt5_interface) -> bool:
        """
        ‚ö° Execute recovery trade ‡∏ú‡πà‡∏≤‡∏ô MT5
        
        Args:
            decision: MartingaleDecision object
            mt5_interface: MT5 interface object
            
        Returns:
            True ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        """
        try:
            if not decision.should_recover:
                return False
            
            print(f"üîÑ Executing Martingale Recovery...")
            print(f"   Type: {decision.recovery_type}")
            print(f"   Volume: {decision.recovery_volume}")
            print(f"   Risk Level: {decision.risk_level}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á order request
            order_request = {
                'action': 'TRADE_ACTION_DEAL',
                'symbol': 'XAUUSD',
                'volume': decision.recovery_volume,
                'type': 'ORDER_TYPE_BUY' if decision.recovery_type == 'BUY' else 'ORDER_TYPE_SELL',
                'price': decision.recovery_price,
                'deviation': 20,
                'magic': 12345,
                'comment': f"Martingale Recovery L{self._get_next_recovery_level()}",
                'type_time': 'ORDER_TIME_GTC',
                'type_filling': 'ORDER_FILLING_IOC'
            }
            
            # Execute order ‡∏ú‡πà‡∏≤‡∏ô MT5
            result = mt5_interface.place_order(order_request)
            
            if result and result.get('retcode') == 10009:  # SUCCESS
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï recovery level
                self._update_recovery_level(result.get('order'))
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                self._record_recovery_execution(decision, result, True)
                
                print(f"‚úÖ Martingale recovery executed successfully")
                print(f"   Order: {result.get('order')}")
                print(f"   Price: ${result.get('price'):.2f}")
                
                return True
            else:
                error_msg = result.get('comment', 'Unknown error') if result else 'No response'
                print(f"‚ùå Martingale recovery failed: {error_msg}")
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                self._record_recovery_execution(decision, result, False)
                
                return False
                
        except Exception as e:
            print(f"‚ùå Recovery execution error: {e}")
            return False
    
    def _get_next_recovery_level(self) -> int:
        """‡∏î‡∏∂‡∏á recovery level ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"""
        if not self.recovery_positions:
            return 1
        return max(pos.recovery_level for pos in self.recovery_positions.values()) + 1
    
    def _update_recovery_level(self, order_ticket: int):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï recovery level ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å execute ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        try:
            # ‡∏´‡∏≤ position ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï level
            for pos in self.recovery_positions.values():
                if pos.unrealized_pnl < self.recovery_threshold:
                    pos.recovery_level += 1
                    break
                    
        except Exception as e:
            print(f"‚ùå Recovery level update error: {e}")
    
    def _record_recovery_execution(self, decision: MartingaleDecision, result: Dict, success: bool):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ execute recovery"""
        try:
            record = {
                'timestamp': datetime.now(),
                'success': success,
                'recovery_type': decision.recovery_type,
                'volume': decision.recovery_volume,
                'target_profit': decision.target_profit,
                'risk_level': decision.risk_level,
                'confidence': decision.confidence,
                'total_loss_before': self.total_unrealized_loss,
                'result': result
            }
            
            self.recovery_history.append(record)
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            if success:
                self.success_count += 1
            else:
                self.failure_count += 1
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            if len(self.recovery_history) > 1000:
                self.recovery_history = self.recovery_history[-500:]
                
        except Exception as e:
            print(f"‚ùå Recovery record error: {e}")
    
    def check_recovery_success(self, positions: List[Dict]) -> bool:
        """
        ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ recovery ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        
        Args:
            positions: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ positions ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
        Returns:
            True ‡∏ñ‡πâ‡∏≤ recovery ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        """
        try:
            if not self.recovery_positions:
                return False
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì P&L ‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á positions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            total_pnl = sum(pos.get('profit', 0) for pos in positions)
            
            # ‡∏ñ‡πâ‡∏≤ P&L ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å = recovery ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            if total_pnl > 0:
                print(f"üéâ Martingale Recovery SUCCESS!")
                print(f"   Total Profit: ${total_pnl:.2f}")
                print(f"   Recovery Levels Used: {max(pos.recovery_level for pos in self.recovery_positions.values())}")
                
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï recovery state
                self._reset_recovery_state()
                
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå Recovery success check error: {e}")
            return False
    
    def _reset_recovery_state(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ recovery ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        try:
            self.recovery_positions.clear()
            self.recovery_state = RecoveryState.INACTIVE
            self.total_unrealized_loss = 0.0
            
            print("üîÑ Recovery state reset - Ready for new trades")
            
        except Exception as e:
            print(f"‚ùå Recovery state reset error: {e}")
    
    def get_recovery_status(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ recovery ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            if not self.recovery_positions:
                return {
                    'state': 'INACTIVE',
                    'positions': 0,
                    'total_loss': 0.0,
                    'max_drawdown': self.max_drawdown_reached
                }
            
            max_level = max(pos.recovery_level for pos in self.recovery_positions.values())
            worst_loss = min(pos.unrealized_pnl for pos in self.recovery_positions.values())
            
            return {
                'state': self.recovery_state.value,
                'positions': len(self.recovery_positions),
                'total_loss': self.total_unrealized_loss,
                'max_level': max_level,
                'worst_position_loss': worst_loss,
                'max_drawdown': self.max_drawdown_reached,
                'remaining_capacity': self.max_total_loss - abs(self.total_unrealized_loss)
            }
            
        except Exception as e:
            print(f"‚ùå Recovery status error: {e}")
            return {'error': str(e)}
    
    def get_performance_stats(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        try:
            if not self.recovery_history:
                return {
                    'total_recoveries': 0,
                    'success_rate': 0.0,
                    'avg_confidence': 0.0
                }
            
            total_recoveries = len(self.recovery_history)
            success_rate = self.success_count / total_recoveries * 100
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average confidence
            confidences = [r['confidence'] for r in self.recovery_history]
            avg_confidence = np.mean(confidences)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average target profit
            targets = [r['target_profit'] for r in self.recovery_history]
            avg_target = np.mean(targets)
            
            # Risk level distribution
            risk_levels = [r['risk_level'] for r in self.recovery_history]
            risk_distribution = {level: risk_levels.count(level) for level in set(risk_levels)}
            
            return {
                'total_recoveries': total_recoveries,
                'successful_recoveries': self.success_count,
                'failed_recoveries': self.failure_count,
                'success_rate': success_rate,
                'avg_confidence': avg_confidence,
                'avg_target_profit': avg_target,
                'max_drawdown_reached': self.max_drawdown_reached,
                'risk_distribution': risk_distribution,
                'martingale_type': self.martingale_type,
                'last_recovery': self.recovery_history[-1]['timestamp'].strftime("%Y-%m-%d %H:%M:%S")
            }
            
        except Exception as e:
            print(f"‚ùå Performance stats error: {e}")
            return {'error': str(e)}
    
    def optimize_parameters(self, historical_results: List[Dict]) -> Dict:
        """
        üîß ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
        
        Args:
            historical_results: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£ recovery ‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
            
        Returns:
            ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
        """
        try:
            if not historical_results:
                return self.config
            
            print("üîß Optimizing Martingale parameters...")
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå success rate ‡∏ï‡∏≤‡∏° multiplier
            multiplier_success = {}
            for result in historical_results:
                multiplier = result.get('multiplier_used', self.base_multiplier)
                success = result.get('success', False)
                
                if multiplier not in multiplier_success:
                    multiplier_success[multiplier] = {'total': 0, 'success': 0}
                
                multiplier_success[multiplier]['total'] += 1
                if success:
                    multiplier_success[multiplier]['success'] += 1
            
            # ‡∏´‡∏≤ multiplier ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_multiplier = self.base_multiplier
            best_success_rate = 0
            
            for multiplier, stats in multiplier_success.items():
                if stats['total'] >= 10:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≠
                    success_rate = stats['success'] / stats['total']
                    if success_rate > best_success_rate:
                        best_success_rate = success_rate
                        best_multiplier = multiplier
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå recovery threshold
            threshold_analysis = [r.get('loss_before_recovery', 0) for r in historical_results if r.get('success')]
            if threshold_analysis:
                avg_successful_threshold = np.mean([abs(t) for t in threshold_analysis])
                optimal_threshold = -min(avg_successful_threshold * 1.2, abs(self.recovery_threshold))
            else:
                optimal_threshold = self.recovery_threshold
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
            optimized_config = self.config.copy()
            optimized_config.update({
                'base_multiplier': best_multiplier,
                'recovery_threshold': optimal_threshold,
                'optimization_date': datetime.now().isoformat(),
                'optimization_data_points': len(historical_results)
            })
            
            print(f"‚úÖ Parameters optimized:")
            print(f"   Base Multiplier: {self.base_multiplier} -> {best_multiplier}")
            print(f"   Recovery Threshold: ${self.recovery_threshold} -> ${optimal_threshold:.2f}")
            print(f"   Based on {len(historical_results)} data points")
            
            return optimized_config
            
        except Exception as e:
            print(f"‚ùå Parameter optimization error: {e}")
            return self.config

def main():
    """Test the Smart Martingale Recovery System"""
    print("üß™ Testing Smart Martingale Recovery...")
    
    # Sample configuration
    config = {
        'martingale_type': 'adaptive',
        'max_recovery_levels': 5,
        'base_multiplier': 1.8,
        'max_total_loss': 500.0,
        'recovery_threshold': -20.0,
        'max_position_size': 2.0,
        'progressive_strategy': 'moderate'
    }
    
    # Initialize recovery system
    recovery = SmartMartingaleRecovery(config)
    
    # Create sample losing positions
    sample_positions = [
        {
            'ticket': 12345,
            'symbol': 'XAUUSD',
            'type': 'BUY',
            'volume': 0.01,
            'price_open': 2000.0,
            'current_price': 1980.0,
            'profit': -25.0,
            'time': datetime.now() - timedelta(minutes=30)
        },
        {
            'ticket': 12346,
            'symbol': 'XAUUSD',
            'type': 'SELL',
            'volume': 0.01,
            'price_open': 1990.0,
            'current_price': 2000.0,
            'profit': -15.0,
            'time': datetime.now() - timedelta(minutes=15)
        }
    ]
    
    # Test recovery need analysis
    needs_recovery = recovery.analyze_recovery_need(sample_positions)
    print(f"\nüìä Recovery Analysis:")
    print(f"   Needs Recovery: {needs_recovery}")
    print(f"   Recovery State: {recovery.recovery_state.value}")
    print(f"   Total Loss: ${recovery.total_unrealized_loss:.2f}")
    
    if needs_recovery:
        # Generate sample market data
        dates = pd.date_range(start='2024-01-01', periods=100, freq='5min')
        np.random.seed(42)
        prices = 2000 + np.random.randn(100).cumsum() * 0.5
        
        market_data = pd.DataFrame({
            'timestamp': dates,
            'open': prices,
            'high': prices + np.random.rand(100) * 2,
            'low': prices - np.random.rand(100) * 2,
            'close': prices + np.random.randn(100) * 0.3,
            'volume': np.random.randint(100, 1000, 100)
        })
        
        # Test recovery decision
        decision = recovery.calculate_recovery_decision(market_data, 'asian')
        
        if decision:
            print(f"\nüéØ Recovery Decision:")
            print(f"   Should Recover: {decision.should_recover}")
            print(f"   Type: {decision.recovery_type}")
            print(f"   Volume: {decision.recovery_volume}")
            print(f"   Target Profit: ${decision.target_profit:.2f}")
            print(f"   Risk Level: {decision.risk_level}")
            print(f"   Confidence: {decision.confidence:.2f}")
            print(f"   Reasoning: {decision.reasoning}")
        else:
            print("\n‚ùå No recovery decision generated")
    
    # Test status
    status = recovery.get_recovery_status()
    print(f"\nüìà Recovery Status:")
    for key, value in status.items():
        print(f"   {key}: {value}")
    
    # Test performance stats
    stats = recovery.get_performance_stats()
    print(f"\nüìä Performance Stats:")
    for key, value in stats.items():
        if isinstance(value, dict):
            continue
        print(f"   {key}: {value}")
    
    print("\n‚úÖ Smart Martingale Recovery test completed")

if __name__ == "__main__":
    main()
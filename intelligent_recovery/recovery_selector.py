#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
RECOVERY SELECTOR - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
==================================================
‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Intelligent Gold Trading
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏°‡πâ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞ position ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô

üéØ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
- Martingale Recovery (‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° lot ‡πÅ‡∏ö‡∏ö‡∏ó‡∏ß‡∏µ‡∏Ñ‡∏π‡∏ì)
- Grid Recovery (‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î position ‡πÅ‡∏ö‡∏ö grid)
- Hedging Recovery (‡∏Å‡∏≤‡∏£ hedge ‡∏î‡πâ‡∏ß‡∏¢ position ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°)
- Averaging Recovery (‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤)
- Correlation Recovery (‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ correlation ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô)
"""

from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, field
from enum import Enum
from datetime import datetime
import math

class RecoveryStrategy(Enum):
   """‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
   MARTINGALE = "Martingale"
   GRID_TRADING = "Grid Trading"
   HEDGING = "Hedging"
   AVERAGING = "Averaging"
   CORRELATION = "Correlation"
   SMART_RECOVERY = "Smart Recovery"
   NO_RECOVERY = "No Recovery"

class RecoveryStatus(Enum):
   """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
   WAITING = "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"
   ACTIVE = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"
   SUCCESS = "‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
   FAILED = "‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
   PAUSED = "‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"

class PositionType(Enum):
   """‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Position"""
   BUY = "BUY"
   SELL = "SELL"

@dataclass
class LosingPosition:
   """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
   ticket: int = 0
   symbol: str = "XAUUSD"
   position_type: PositionType = PositionType.BUY
   lot_size: float = 0.1
   open_price: float = 0.0
   current_price: float = 0.0
   unrealized_pnl: float = 0.0
   open_time: datetime = field(default_factory=datetime.now)
   
   # Recovery tracking
   recovery_attempts: int = 0
   recovery_strategy: Optional[RecoveryStrategy] = None
   recovery_lot_used: float = 0.0
   
   def calculate_loss_amount(self) -> float:
       """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
       return abs(self.unrealized_pnl)
   
   def calculate_loss_pips(self) -> float:
       """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pips ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
       price_diff = abs(self.current_price - self.open_price)
       return price_diff * 10000  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô pips (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö XAUUSD ‡πÉ‡∏ä‡πâ 10)

@dataclass
class RecoveryPlan:
   """‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
   strategy: RecoveryStrategy
   target_positions: List[LosingPosition]
   
   # Recovery parameters
   total_recovery_lot: float = 0.0
   expected_recovery_price: float = 0.0
   max_recovery_attempts: int = 5
   recovery_multiplier: float = 2.0
   
   # Risk management
   max_total_exposure: float = 1.0
   stop_recovery_loss: float = 100.0
   
   # Execution details
   next_entry_price: float = 0.0
   next_lot_size: float = 0.0
   recovery_direction: PositionType = PositionType.BUY
   
   # Status tracking
   status: RecoveryStatus = RecoveryStatus.WAITING
   created_time: datetime = field(default_factory=datetime.now)
   estimated_success_probability: float = 0.0

class RecoverySelector:
   """‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
   
   def __init__(self, symbol: str = "XAUUSD"):
       self.symbol = symbol
       self.active_recoveries: Dict[int, RecoveryPlan] = {}
       self.recovery_history: List[Dict] = []
       
       # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
       self.max_concurrent_recoveries = 3
       self.max_recovery_drawdown = 200.0  # USD
       self.recovery_success_target = 0.5  # 50 cents profit target
       
       # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
       self.total_recovery_attempts = 0
       self.successful_recoveries = 0
       self.failed_recoveries = 0
       
       print(f"üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Recovery Selector ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {symbol}")
   
   def analyze_losing_positions(self, positions: List[Any]) -> List[LosingPosition]:
       """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå positions ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
       losing_positions = []
       
       try:
           for pos in positions:
               # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• position ‡πÄ‡∏õ‡πá‡∏ô LosingPosition object
               if hasattr(pos, 'profit') and pos.profit < 0:
                   losing_pos = LosingPosition(
                       ticket=getattr(pos, 'ticket', 0),
                       symbol=getattr(pos, 'symbol', self.symbol),
                       position_type=PositionType.BUY if getattr(pos, 'type', 0) == 0 else PositionType.SELL,
                       lot_size=getattr(pos, 'volume', 0.1),
                       open_price=getattr(pos, 'price_open', 0.0),
                       current_price=getattr(pos, 'price_current', 0.0),
                       unrealized_pnl=getattr(pos, 'profit', 0.0),
                       open_time=datetime.fromtimestamp(getattr(pos, 'time', 0))
                   )
                   losing_positions.append(losing_pos)
           
           print(f"üìä ‡∏û‡∏ö positions ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: {len(losing_positions)} positions")
           
           # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
           losing_positions.sort(key=lambda x: x.calculate_loss_amount(), reverse=True)
           
           return losing_positions
           
       except Exception as e:
           print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå positions: {e}")
           return []
   
   def select_recovery_strategy(self, losing_positions: List[LosingPosition], 
                              market_analysis: Any = None) -> RecoveryStrategy:
       """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
       
       if not losing_positions:
           return RecoveryStrategy.NO_RECOVERY
       
       try:
           # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
           total_loss = sum(pos.calculate_loss_amount() for pos in losing_positions)
           max_single_loss = max(pos.calculate_loss_amount() for pos in losing_positions)
           avg_loss_pips = sum(pos.calculate_loss_pips() for pos in losing_positions) / len(losing_positions)
           
           print(f"üí∞ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô:")
           print(f"   ‡∏£‡∏ß‡∏°‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: ${total_loss:.2f}")
           print(f"   ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${max_single_loss:.2f}")
           print(f"   ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ pips: {avg_loss_pips:.1f}")
           
           # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
           
           # 1. ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‡πÉ‡∏ä‡πâ Averaging
           if total_loss < 10.0:
               return RecoveryStrategy.AVERAGING
           
           # 2. ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏°‡∏µ positions ‡πÄ‡∏¢‡∏≠‡∏∞ ‡πÉ‡∏ä‡πâ Grid
           elif total_loss < 50.0 and len(losing_positions) > 2:
               return RecoveryStrategy.GRID_TRADING
           
           # 3. ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ Martingale
           elif total_loss < 100.0 and len(losing_positions) <= 3:
               return RecoveryStrategy.MARTINGALE
           
           # 4. ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ Hedging
           elif total_loss < 200.0:
               return RecoveryStrategy.HEDGING
           
           # 5. ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏´‡∏≤‡∏®‡∏≤‡∏• ‡πÉ‡∏ä‡πâ Smart Recovery
           else:
               return RecoveryStrategy.SMART_RECOVERY
               
       except Exception as e:
           print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå: {e}")
           return RecoveryStrategy.AVERAGING  # default safe strategy
   
   def create_recovery_plan(self, losing_positions: List[LosingPosition], 
                          strategy: RecoveryStrategy, 
                          market_analysis: Any = None) -> RecoveryPlan:
       """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
       
       plan = RecoveryPlan(
           strategy=strategy,
           target_positions=losing_positions.copy()
       )
       
       try:
           if strategy == RecoveryStrategy.MARTINGALE:
               plan = self._create_martingale_plan(plan, losing_positions)
           elif strategy == RecoveryStrategy.GRID_TRADING:
               plan = self._create_grid_plan(plan, losing_positions)
           elif strategy == RecoveryStrategy.HEDGING:
               plan = self._create_hedging_plan(plan, losing_positions)
           elif strategy == RecoveryStrategy.AVERAGING:
               plan = self._create_averaging_plan(plan, losing_positions)
           elif strategy == RecoveryStrategy.SMART_RECOVERY:
               plan = self._create_smart_recovery_plan(plan, losing_positions)
           
           # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
           plan.estimated_success_probability = self._estimate_success_probability(plan, market_analysis)
           
           print(f"üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô: {strategy.value}")
           print(f"   üéØ Lot ‡∏£‡∏ß‡∏°: {plan.total_recovery_lot:.2f}")
           print(f"   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {plan.expected_recovery_price:.2f}")
           print(f"   üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {plan.estimated_success_probability:.1f}%")
           
           return plan
           
       except Exception as e:
           print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô: {e}")
           return plan
   
   def _create_martingale_plan(self, plan: RecoveryPlan, positions: List[LosingPosition]) -> RecoveryPlan:
       """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô Martingale Recovery"""
       
       # ‡∏´‡∏≤ position ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
       main_position = max(positions, key=lambda x: x.calculate_loss_amount())
       
       # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recovery
       total_loss = sum(pos.calculate_loss_amount() for pos in positions)
       recovery_lot = main_position.lot_size * plan.recovery_multiplier
       
       # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô (‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏±‡∏ö position ‡∏´‡∏•‡∏±‡∏Å)
       plan.recovery_direction = PositionType.SELL if main_position.position_type == PositionType.BUY else PositionType.BUY
       
       # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤ entry
       if plan.recovery_direction == PositionType.BUY:
           plan.next_entry_price = main_position.current_price - (total_loss / recovery_lot / 10)
       else:
           plan.next_entry_price = main_position.current_price + (total_loss / recovery_lot / 10)
       
       plan.total_recovery_lot = recovery_lot
       plan.next_lot_size = recovery_lot
       plan.max_recovery_attempts = 3
       
       return plan
   
   def _create_grid_plan(self, plan: RecoveryPlan, positions: List[LosingPosition]) -> RecoveryPlan:
       """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô Grid Recovery"""
       
       # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á positions
       prices = [pos.open_price for pos in positions]
       min_price = min(prices)
       max_price = max(prices)
       price_range = max_price - min_price
       
       # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î grid spacing
       grid_spacing = max(0.5, price_range / 5)  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 0.5 point
       
       # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì lot size ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
       avg_lot = sum(pos.lot_size for pos in positions) / len(positions)
       
       plan.total_recovery_lot = avg_lot * 0.5  # ‡πÉ‡∏ä‡πâ lot ‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
       plan.next_lot_size = plan.total_recovery_lot
       plan.max_recovery_attempts = 5
       
       # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö position ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà
       buy_positions = sum(1 for pos in positions if pos.position_type == PositionType.BUY)
       plan.recovery_direction = PositionType.SELL if buy_positions > len(positions) / 2 else PositionType.BUY
       
       # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤ entry ‡∏ï‡∏≤‡∏° grid
       current_price = positions[0].current_price
       if plan.recovery_direction == PositionType.BUY:
           plan.next_entry_price = current_price - grid_spacing
       else:
           plan.next_entry_price = current_price + grid_spacing
       
       return plan
   
   def _create_hedging_plan(self, plan: RecoveryPlan, positions: List[LosingPosition]) -> RecoveryPlan:
       """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô Hedging Recovery"""
       
       # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì net position
       net_buy_lot = sum(pos.lot_size for pos in positions if pos.position_type == PositionType.BUY)
       net_sell_lot = sum(pos.lot_size for pos in positions if pos.position_type == PositionType.SELL)
       
       net_lot = abs(net_buy_lot - net_sell_lot)
       
       # hedge ‡∏î‡πâ‡∏ß‡∏¢ position ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
       if net_buy_lot > net_sell_lot:
           plan.recovery_direction = PositionType.SELL
       else:
           plan.recovery_direction = PositionType.BUY
       
       # ‡πÉ‡∏ä‡πâ lot ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö net position
       plan.total_recovery_lot = net_lot
       plan.next_lot_size = net_lot
       plan.next_entry_price = positions[0].current_price  # Market price
       plan.max_recovery_attempts = 2
       
       return plan
   
   def _create_averaging_plan(self, plan: RecoveryPlan, positions: List[LosingPosition]) -> RecoveryPlan:
       """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô Averaging Recovery"""
       
       # ‡∏´‡∏≤ position ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
       main_position = max(positions, key=lambda x: x.calculate_loss_amount())
       
       # ‡πÉ‡∏ä‡πâ lot size ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö position ‡πÄ‡∏î‡∏¥‡∏°
       plan.total_recovery_lot = main_position.lot_size
       plan.next_lot_size = main_position.lot_size
       plan.recovery_direction = main_position.position_type  # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
       
       # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
       loss_pips = main_position.calculate_loss_pips()
       price_improvement = loss_pips / 2 / 10000  # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á
       
       if plan.recovery_direction == PositionType.BUY:
           plan.next_entry_price = main_position.current_price - price_improvement
       else:
           plan.next_entry_price = main_position.current_price + price_improvement
       
       plan.max_recovery_attempts = 2
       
       return plan
   
   def _create_smart_recovery_plan(self, plan: RecoveryPlan, positions: List[LosingPosition]) -> RecoveryPlan:
       """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô Smart Recovery (‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå)"""
       
       # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
       total_loss = sum(pos.calculate_loss_amount() for pos in positions)
       
       # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ partial hedging
       net_buy_lot = sum(pos.lot_size for pos in positions if pos.position_type == PositionType.BUY)
       net_sell_lot = sum(pos.lot_size for pos in positions if pos.position_type == PositionType.SELL)
       
       # Hedge ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô (70%)
       if net_buy_lot > net_sell_lot:
           plan.recovery_direction = PositionType.SELL
           plan.total_recovery_lot = (net_buy_lot - net_sell_lot) * 0.7
       else:
           plan.recovery_direction = PositionType.BUY
           plan.total_recovery_lot = (net_sell_lot - net_buy_lot) * 0.7
       
       plan.next_lot_size = plan.total_recovery_lot
       plan.next_entry_price = positions[0].current_price
       plan.max_recovery_attempts = 3
       
       return plan
   
   def _estimate_success_probability(self, plan: RecoveryPlan, market_analysis: Any = None) -> float:
       """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
       
       base_probability = 70.0  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
       
       try:
           # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
           strategy_adjustments = {
               RecoveryStrategy.AVERAGING: 10,
               RecoveryStrategy.GRID_TRADING: 5,
               RecoveryStrategy.MARTINGALE: -5,
               RecoveryStrategy.HEDGING: 15,
               RecoveryStrategy.SMART_RECOVERY: 20
           }
           
           base_probability += strategy_adjustments.get(plan.strategy, 0)
           
           # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° lot size (lot ‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
           if plan.total_recovery_lot > 0.5:
               base_probability -= (plan.total_recovery_lot - 0.5) * 10
           
           # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô attempts
           if plan.max_recovery_attempts > 3:
               base_probability -= (plan.max_recovery_attempts - 3) * 5
           
           # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° market analysis (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
           if market_analysis:
               if hasattr(market_analysis, 'volatility_score'):
                   volatility = market_analysis.volatility_score
                   if volatility > 80:  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏•‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                       base_probability -= 15
                   elif volatility < 30:  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                       base_probability += 10
           
           return max(10, min(95, base_probability))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 10-95%
           
       except Exception as e:
           print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: {e}")
           return 50.0
   
   def execute_recovery_plan(self, plan: RecoveryPlan) -> bool:
       """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
       
       try:
           print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô: {plan.strategy.value}")
           print(f"   üíπ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: {plan.recovery_direction.value}")
           print(f"   üìä Lot Size: {plan.next_lot_size:.2f}")
           print(f"   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {plan.next_entry_price:.2f}")
           
           # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MT5)
           plan.status = RecoveryStatus.ACTIVE
           
           # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
           self.total_recovery_attempts += 1
           
           # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
           recovery_record = {
               'strategy': plan.strategy.value,
               'timestamp': datetime.now().isoformat(),
               'lot_size': plan.next_lot_size,
               'entry_price': plan.next_entry_price,
               'direction': plan.recovery_direction.value,
               'success_probability': plan.estimated_success_probability
           }
           
           self.recovery_history.append(recovery_record)
           
           # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ú‡∏• (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á)
           import random
           success_chance = plan.estimated_success_probability / 100
           
           if random.random() < success_chance:
               plan.status = RecoveryStatus.SUCCESS
               self.successful_recoveries += 1
               print("‚úÖ ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
               return True
           else:
               plan.status = RecoveryStatus.FAILED
               self.failed_recoveries += 1
               print("‚ùå ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
               return False
               
       except Exception as e:
           print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô: {e}")
           plan.status = RecoveryStatus.FAILED
           return False
   
   def get_recovery_statistics(self) -> Dict[str, Any]:
       """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô"""
       
       success_rate = (self.successful_recoveries / max(self.total_recovery_attempts, 1)) * 100
       
       return {
           'total_attempts': self.total_recovery_attempts,
           'successful_recoveries': self.successful_recoveries,
           'failed_recoveries': self.failed_recoveries,
           'success_rate': success_rate,
           'active_recoveries': len(self.active_recoveries),
           'max_concurrent_recoveries': self.max_concurrent_recoveries,
           'recent_strategies': [record['strategy'] for record in self.recovery_history[-5:]]
       }

def test_recovery_selector():
   """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Recovery Selector"""
   print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Recovery Selector...")
   
   try:
       # ‡∏™‡∏£‡πâ‡∏≤‡∏á selector
       selector = RecoverySelector("XAUUSD")
       
       # ‡∏à‡∏≥‡∏•‡∏≠‡∏á losing positions
       losing_positions = [
           LosingPosition(
               ticket=12345,
               position_type=PositionType.BUY,
               lot_size=0.1,
               open_price=2000.0,
               current_price=1995.0,
               unrealized_pnl=-50.0
           ),
           LosingPosition(
               ticket=12346,
               position_type=PositionType.SELL,
               lot_size=0.05,
               open_price=1990.0,
               current_price=1995.0,
               unrealized_pnl=-25.0
           )
       ]
       
       print(f"üìä ‡∏à‡∏≥‡∏•‡∏≠‡∏á positions ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: {len(losing_positions)} positions")
       
       # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
       strategy = selector.select_recovery_strategy(losing_positions)
       print(f"üéØ ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {strategy.value}")
       
       # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
       plan = selector.create_recovery_plan(losing_positions, strategy)
       
       # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
       success = selector.execute_recovery_plan(plan)
       
       # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
       stats = selector.get_recovery_statistics()
       print(f"\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô:")
       print(f"   ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {stats['total_attempts']}")
       print(f"   ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {stats['successful_recoveries']}")
       print(f"   ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {stats['failed_recoveries']}")
       print(f"   ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {stats['success_rate']:.1f}%")
       
       print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Recovery Selector ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
       
   except Exception as e:
       print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")

if __name__ == "__main__":
   test_recovery_selector()
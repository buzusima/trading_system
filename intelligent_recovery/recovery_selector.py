#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INTELLIGENT RECOVERY SELECTOR - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ Recovery ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
========================================================
‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ Recovery ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£ Recovery

‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á:
- market_intelligence/market_analyzer.py (‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î)
- intelligent_recovery/strategies/* (‡∏ß‡∏¥‡∏ò‡∏µ Recovery ‡∏ï‡πà‡∏≤‡∏á‡πÜ)
- position_management/position_tracker.py (‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° positions)
- config/trading_params.py (‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå Recovery)
"""

import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, field
from enum import Enum
import statistics

try:
    from market_intelligence.market_analyzer import (
        get_market_analyzer, MarketCondition, TrendDirection, MarketAnalysis
    )
    from config.trading_params import get_trading_parameters, RecoveryMethod
    from config.session_config import get_session_manager, SessionType
    from utilities.professional_logger import setup_trading_logger
    from utilities.error_handler import handle_trading_errors, ErrorCategory, ErrorSeverity
except ImportError as e:
    print(f"Import Error in recovery_selector.py: {e}")

class RecoveryUrgency(Enum):
    """‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Recovery"""
    LOW = "LOW"           # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô
    MEDIUM = "MEDIUM"     # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á
    HIGH = "HIGH"         # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡∏ö Recovery
    CRITICAL = "CRITICAL" # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢ ‡∏ï‡πâ‡∏≠‡∏á Recovery ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

class RecoverySuccess(Enum):
    """‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Recovery"""
    PENDING = "PENDING"           # ‡∏Å‡∏≥‡∏•‡∏±‡∏á Recovery
    SUCCESS = "SUCCESS"           # Recovery ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    PARTIAL_SUCCESS = "PARTIAL_SUCCESS"  # Recovery ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
    FAILED = "FAILED"             # Recovery ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    ABANDONED = "ABANDONED"       # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Recovery

@dataclass
class LossPosition:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
    position_id: str
    symbol: str
    entry_price: float
    current_price: float
    volume: float
    loss_amount: float
    loss_percentage: float
    entry_time: datetime
    holding_time_minutes: float
    entry_strategy: str
    market_condition_at_entry: str

@dataclass
class RecoveryStats:
    """‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ Recovery"""
    method: RecoveryMethod
    total_attempts: int = 0
    successful_recoveries: int = 0
    partial_recoveries: int = 0
    failed_recoveries: int = 0
    total_recovery_time_minutes: float = 0.0
    total_recovery_cost: float = 0.0  # ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Recovery
    avg_recovery_time: float = 0.0
    success_rate: float = 0.0
    efficiency_score: float = 0.0  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
    
    # ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
    condition_success_rates: Dict[str, float] = field(default_factory=dict)
    urgency_success_rates: Dict[str, float] = field(default_factory=dict)
    
    def update_stats(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ"""
        if self.total_attempts > 0:
            self.success_rate = (self.successful_recoveries / self.total_attempts) * 100
            
            if self.successful_recoveries > 0:
                self.avg_recovery_time = self.total_recovery_time_minutes / self.successful_recoveries
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì efficiency score
            success_weight = self.success_rate / 100
            time_weight = max(0, 1.0 - (self.avg_recovery_time / 1440))  # 1440 min = 1 day
            cost_weight = max(0, 1.0 - (abs(self.total_recovery_cost) / 1000))  # normalize by 1000
            
            self.efficiency_score = (success_weight * 0.6 + time_weight * 0.2 + cost_weight * 0.2)

@dataclass
class RecoveryRecommendation:
    """‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ Recovery"""
    primary_method: RecoveryMethod
    alternative_methods: List[RecoveryMethod]
    confidence_score: float  # 0.0-1.0
    urgency_level: RecoveryUrgency
    estimated_recovery_time_minutes: float
    estimated_additional_risk: float  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    recommended_parameters: Dict[str, Any]
    reasoning: List[str]
    success_probability: float  # 0.0-1.0

class RecoverySelector:
    """
    ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ Recovery ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ Recovery ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
    """
    
    def __init__(self):
        self.logger = setup_trading_logger()
        self.market_analyzer = get_market_analyzer()
        self.session_manager = get_session_manager()
        self.trading_params = get_trading_parameters()
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        self.recovery_stats: Dict[RecoveryMethod, RecoveryStats] = {}
        self.active_recoveries: Dict[str, Dict] = {}  # recovery_id -> recovery_info
        self.recovery_history: List[Dict] = []
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.min_attempts_for_stats = 5  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.max_concurrent_recoveries = 10  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Recovery ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        
        # Threading
        self.selector_lock = threading.Lock()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self._initialize_recovery_stats()
        
        self.logger.info("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Recovery Selector")
    
    def _initialize_recovery_stats(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ Recovery ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        for method in RecoveryMethod:
            self.recovery_stats[method] = RecoveryStats(method=method)
    
    @handle_trading_errors(ErrorCategory.RECOVERY, ErrorSeverity.HIGH)
    def select_recovery_method(self, loss_positions: List[LossPosition]) -> Optional[RecoveryRecommendation]:
        """
        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ Recovery ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö positions ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
        """
        with self.selector_lock:
            try:
                if not loss_positions:
                    return None
                
                # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                loss_analysis = self._analyze_loss_situation(loss_positions)
                
                # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                market_analysis = self.market_analyzer.get_current_analysis()
                if not market_analysis:
                    self.logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Recovery ‡πÑ‡∏î‡πâ")
                    return None
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô
                urgency_level = self._calculate_urgency_level(loss_analysis)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ Recovery
                method_scores = self._calculate_recovery_scores(
                    loss_analysis, 
                    market_analysis, 
                    urgency_level
                )
                
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                best_method = max(method_scores.keys(), key=lambda m: method_scores[m])
                
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                alternative_methods = sorted(
                    [m for m in method_scores.keys() if m != best_method],
                    key=lambda m: method_scores[m],
                    reverse=True
                )[:2]
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                recommendation = self._create_recovery_recommendation(
                    best_method,
                    alternative_methods,
                    method_scores[best_method],
                    loss_analysis,
                    market_analysis,
                    urgency_level
                )
                
                self.logger.info(
                    f"üîÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ Recovery: {best_method.value} "
                    f"(Confidence: {recommendation.confidence_score:.2f}) "
                    f"Urgency: {urgency_level.value} "
                    f"Loss: {loss_analysis['total_loss']:.2f}"
                )
                
                return recommendation
                
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ Recovery: {e}")
                return None
    
    def _analyze_loss_situation(self, loss_positions: List[LossPosition]) -> Dict:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
        
        total_loss = sum(pos.loss_amount for pos in loss_positions)
        total_volume = sum(pos.volume for pos in loss_positions)
        avg_loss_percentage = statistics.mean([pos.loss_percentage for pos in loss_positions])
        max_loss_percentage = max(pos.loss_percentage for pos in loss_positions)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á positions
        symbols = list(set(pos.symbol for pos in loss_positions))
        entry_strategies = list(set(pos.entry_strategy for pos in loss_positions))
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∑‡∏≠ position ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        avg_holding_time = statistics.mean([pos.holding_time_minutes for pos in loss_positions])
        max_holding_time = max(pos.holding_time_minutes for pos in loss_positions)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå pattern ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
        loss_trend = self._analyze_loss_trend(loss_positions)
        
        return {
            "position_count": len(loss_positions),
            "total_loss": total_loss,
            "total_volume": total_volume,
            "avg_loss_percentage": avg_loss_percentage,
            "max_loss_percentage": max_loss_percentage,
            "symbols": symbols,
            "entry_strategies": entry_strategies,
            "avg_holding_time": avg_holding_time,
            "max_holding_time": max_holding_time,
            "loss_trend": loss_trend,
            "loss_concentration": len(symbols) / len(loss_positions)  # ‡∏Ñ‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ 1 = ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢, ‡πÉ‡∏Å‡∏•‡πâ 0 = ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô
        }
    
    def _analyze_loss_trend(self, loss_positions: List[LossPosition]) -> str:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ entry
        sorted_positions = sorted(loss_positions, key=lambda p: p.entry_time)
        
        if len(sorted_positions) < 2:
            return "STABLE"
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
        recent_losses = [pos.loss_percentage for pos in sorted_positions[-3:]]  # 3 positions ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        earlier_losses = [pos.loss_percentage for pos in sorted_positions[:-3]]
        
        if not earlier_losses:
            return "INSUFFICIENT_DATA"
        
        recent_avg = statistics.mean(recent_losses)
        earlier_avg = statistics.mean(earlier_losses)
        
        if recent_avg > earlier_avg * 1.2:
            return "WORSENING"
        elif recent_avg < earlier_avg * 0.8:
            return "IMPROVING"
        else:
            return "STABLE"
    
    def _calculate_urgency_level(self, loss_analysis: Dict) -> RecoveryUrgency:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô"""
        
        urgency_score = 0
        
        # ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°
        if abs(loss_analysis["total_loss"]) > 1000:
            urgency_score += 3
        elif abs(loss_analysis["total_loss"]) > 500:
            urgency_score += 2
        elif abs(loss_analysis["total_loss"]) > 100:
            urgency_score += 1
        
        # ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        if loss_analysis["max_loss_percentage"] > 50:
            urgency_score += 3
        elif loss_analysis["max_loss_percentage"] > 30:
            urgency_score += 2
        elif loss_analysis["max_loss_percentage"] > 15:
            urgency_score += 1
        
        # ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
        if loss_analysis["loss_trend"] == "WORSENING":
            urgency_score += 2
        elif loss_analysis["loss_trend"] == "IMPROVING":
            urgency_score -= 1
        
        # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∑‡∏≠ position
        if loss_analysis["max_holding_time"] > 1440:  # > 1 ‡∏ß‡∏±‡∏ô
            urgency_score += 1
        
        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô positions
        if loss_analysis["position_count"] > 10:
            urgency_score += 2
        elif loss_analysis["position_count"] > 5:
            urgency_score += 1
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô
        if urgency_score >= 8:
            return RecoveryUrgency.CRITICAL
        elif urgency_score >= 5:
            return RecoveryUrgency.HIGH
        elif urgency_score >= 2:
            return RecoveryUrgency.MEDIUM
        else:
            return RecoveryUrgency.LOW
    
    def _calculate_recovery_scores(self, loss_analysis: Dict, 
                                 market_analysis: MarketAnalysis,
                                 urgency_level: RecoveryUrgency) -> Dict[RecoveryMethod, float]:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ Recovery"""
        
        scores = {}
        
        for method in RecoveryMethod:
            score = 0.0
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô (30%)
            base_score = self._get_base_recovery_score(method, loss_analysis)
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï (25%)
            performance_score = self._get_recovery_performance_score(method, market_analysis, urgency_level)
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î (25%)
            market_compatibility_score = self._get_market_compatibility_score(method, market_analysis)
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô (20%)
            urgency_compatibility_score = self._get_urgency_compatibility_score(method, urgency_level)
            
            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            total_score = (base_score * 0.3 + 
                          performance_score * 0.25 + 
                          market_compatibility_score * 0.25 + 
                          urgency_compatibility_score * 0.2)
            
            scores[method] = min(max(total_score, 0.0), 1.0)
        
        return scores
    
    def _get_base_recovery_score(self, method: RecoveryMethod, loss_analysis: Dict) -> float:
        """‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
        
        # Martingale Smart - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ positions ‡∏ô‡πâ‡∏≠‡∏¢
        if method == RecoveryMethod.MARTINGALE_SMART:
            if (loss_analysis["position_count"] <= 3 and 
                loss_analysis["max_loss_percentage"] <= 20):
                return 0.9
            elif loss_analysis["position_count"] <= 5:
                return 0.7
            else:
                return 0.3
        
        # Grid Intelligent - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
        elif method == RecoveryMethod.GRID_INTELLIGENT:
            if (loss_analysis["position_count"] <= 8 and 
                10 <= loss_analysis["max_loss_percentage"] <= 40):
                return 0.9
            elif loss_analysis["position_count"] <= 12:
                return 0.7
            else:
                return 0.4
        
        # Hedging Advanced - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Recovery ‡πÄ‡∏£‡πá‡∏ß
        elif method == RecoveryMethod.HEDGING_ADVANCED:
            if (loss_analysis["max_loss_percentage"] > 30 or 
                abs(loss_analysis["total_loss"]) > 500):
                return 0.9
            elif loss_analysis["max_loss_percentage"] > 15:
                return 0.7
            else:
                return 0.4
        
        # Averaging Intelligent - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö positions ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
        elif method == RecoveryMethod.AVERAGING_INTELLIGENT:
            if (loss_analysis["position_count"] >= 5 and 
                loss_analysis["loss_concentration"] > 0.5):  # ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢
                return 0.8
            elif loss_analysis["position_count"] >= 3:
                return 0.6
            else:
                return 0.3
        
        # Correlation Recovery - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö positions ‡∏´‡∏•‡∏≤‡∏¢ symbol
        elif method == RecoveryMethod.CORRELATION_RECOVERY:
            if len(loss_analysis["symbols"]) > 1:
                return 0.8
            else:
                return 0.2
        
        return 0.5
    
    def _get_recovery_performance_score(self, method: RecoveryMethod, 
                                      market_analysis: MarketAnalysis,
                                      urgency_level: RecoveryUrgency) -> float:
        """‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï"""
        
        stats = self.recovery_stats.get(method)
        if not stats or stats.total_attempts < self.min_attempts_for_stats:
            return 0.5  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
        
        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å success rate
        base_performance = stats.success_rate / 100
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î
        condition_key = market_analysis.primary_condition.value
        condition_performance = stats.condition_success_rates.get(condition_key, stats.success_rate) / 100
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô
        urgency_key = urgency_level.value
        urgency_performance = stats.urgency_success_rates.get(urgency_key, stats.success_rate) / 100
        
        # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        performance_score = (base_performance * 0.4 + 
                           condition_performance * 0.3 + 
                           urgency_performance * 0.3)
        
        return performance_score
    
    def _get_market_compatibility_score(self, method: RecoveryMethod, 
                                      market_analysis: MarketAnalysis) -> float:
        """‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î"""
        
        # Matrix ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏¥‡∏ò‡∏µ Recovery ‡πÅ‡∏•‡∏∞‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î
        compatibility_matrix = {
            RecoveryMethod.MARTINGALE_SMART: {
                MarketCondition.RANGING_TIGHT: 0.9,
                MarketCondition.RANGING_WIDE: 0.7,
                MarketCondition.TRENDING_WEAK: 0.6,
                MarketCondition.TRENDING_STRONG: 0.3,
                MarketCondition.VOLATILE_HIGH: 0.2,
                MarketCondition.NEWS_IMPACT: 0.1
            },
            RecoveryMethod.GRID_INTELLIGENT: {
                MarketCondition.TRENDING_STRONG: 0.9,
                MarketCondition.TRENDING_WEAK: 0.8,
                MarketCondition.RANGING_WIDE: 0.6,
                MarketCondition.RANGING_TIGHT: 0.5,
                MarketCondition.VOLATILE_HIGH: 0.4,
                MarketCondition.NEWS_IMPACT: 0.3
            },
            RecoveryMethod.HEDGING_ADVANCED: {
                MarketCondition.VOLATILE_HIGH: 1.0,
                MarketCondition.NEWS_IMPACT: 0.9,
                MarketCondition.TRENDING_STRONG: 0.7,
                MarketCondition.TRENDING_WEAK: 0.6,
                MarketCondition.RANGING_WIDE: 0.4,
                MarketCondition.RANGING_TIGHT: 0.3
            },
            RecoveryMethod.AVERAGING_INTELLIGENT: {
                MarketCondition.RANGING_TIGHT: 0.8,
                MarketCondition.RANGING_WIDE: 0.9,
                MarketCondition.TRENDING_WEAK: 0.7,
                MarketCondition.TRENDING_STRONG: 0.5,
                MarketCondition.VOLATILE_HIGH: 0.4,
                MarketCondition.NEWS_IMPACT: 0.3
            },
            RecoveryMethod.CORRELATION_RECOVERY: {
                MarketCondition.VOLATILE_HIGH: 0.8,
                MarketCondition.NEWS_IMPACT: 0.7,
                MarketCondition.TRENDING_STRONG: 0.6,
                MarketCondition.TRENDING_WEAK: 0.5,
                MarketCondition.RANGING_WIDE: 0.4,
                MarketCondition.RANGING_TIGHT: 0.3
            }
        }
        
        method_compatibility = compatibility_matrix.get(method, {})
        return method_compatibility.get(market_analysis.primary_condition, 0.5)
    
    def _get_urgency_compatibility_score(self, method: RecoveryMethod, 
                                       urgency_level: RecoveryUrgency) -> float:
        """‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô"""
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ Recovery ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
        urgency_compatibility = {
            RecoveryMethod.MARTINGALE_SMART: {
                RecoveryUrgency.LOW: 0.9,
                RecoveryUrgency.MEDIUM: 0.7,
                RecoveryUrgency.HIGH: 0.4,
                RecoveryUrgency.CRITICAL: 0.2
            },
            RecoveryMethod.GRID_INTELLIGENT: {
                RecoveryUrgency.LOW: 0.8,
                RecoveryUrgency.MEDIUM: 0.9,
                RecoveryUrgency.HIGH: 0.7,
                RecoveryUrgency.CRITICAL: 0.5
            },
            RecoveryMethod.HEDGING_ADVANCED: {
                RecoveryUrgency.LOW: 0.5,
                RecoveryUrgency.MEDIUM: 0.7,
                RecoveryUrgency.HIGH: 0.9,
                RecoveryUrgency.CRITICAL: 1.0
            },
            RecoveryMethod.AVERAGING_INTELLIGENT: {
                RecoveryUrgency.LOW: 0.8,
                RecoveryUrgency.MEDIUM: 0.8,
                RecoveryUrgency.HIGH: 0.6,
                RecoveryUrgency.CRITICAL: 0.4
            },
            RecoveryMethod.CORRELATION_RECOVERY: {
                RecoveryUrgency.LOW: 0.6,
                RecoveryUrgency.MEDIUM: 0.7,
                RecoveryUrgency.HIGH: 0.8,
                RecoveryUrgency.CRITICAL: 0.7
            }
        }
        
        method_urgency = urgency_compatibility.get(method, {})
        return method_urgency.get(urgency_level, 0.5)
    
    def _create_recovery_recommendation(self, primary_method: RecoveryMethod,
                                      alternative_methods: List[RecoveryMethod],
                                      confidence_score: float,
                                      loss_analysis: Dict,
                                      market_analysis: MarketAnalysis,
                                      urgency_level: RecoveryUrgency) -> RecoveryRecommendation:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Recovery"""
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
        reasoning = []
        reasoning.append(f"‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°: {loss_analysis['total_loss']:.2f}")
        reasoning.append(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Positions: {loss_analysis['position_count']}")
        reasoning.append(f"‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {loss_analysis['max_loss_percentage']:.1f}%")
        reasoning.append(f"‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î: {market_analysis.primary_condition.value}")
        reasoning.append(f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô: {urgency_level.value}")
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ß‡∏•‡∏≤ Recovery
        estimated_time = self._estimate_recovery_time(primary_method, loss_analysis, urgency_level)
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        additional_risk = self._estimate_additional_risk(primary_method, loss_analysis)
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        success_probability = self._estimate_success_probability(primary_method, loss_analysis, market_analysis)
        
        # ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        recommended_params = self._get_recommended_parameters(primary_method, loss_analysis, market_analysis)
        
        return RecoveryRecommendation(
            primary_method=primary_method,
            alternative_methods=alternative_methods,
            confidence_score=confidence_score,
            urgency_level=urgency_level,
            estimated_recovery_time_minutes=estimated_time,
            estimated_additional_risk=additional_risk,
            recommended_parameters=recommended_params,
            reasoning=reasoning,
            success_probability=success_probability
        )
    
    def _estimate_recovery_time(self, method: RecoveryMethod, 
                              loss_analysis: Dict, urgency_level: RecoveryUrgency) -> float:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Recovery"""
        
        # ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ß‡∏¥‡∏ò‡∏µ
        base_times = {
            RecoveryMethod.MARTINGALE_SMART: 60,      # 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            RecoveryMethod.GRID_INTELLIGENT: 240,     # 4 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            RecoveryMethod.HEDGING_ADVANCED: 30,      # 30 ‡∏ô‡∏≤‡∏ó‡∏µ
            RecoveryMethod.AVERAGING_INTELLIGENT: 180, # 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            RecoveryMethod.CORRELATION_RECOVERY: 120   # 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        }
        
        base_time = base_times.get(method, 120)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
        loss_multiplier = 1.0 + (abs(loss_analysis["total_loss"]) / 1000)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô positions
        position_multiplier = 1.0 + (loss_analysis["position_count"] / 10)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô (‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡∏°‡∏≤‡∏Å = ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á ‡πÅ‡∏ï‡πà‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
        urgency_multipliers = {
            RecoveryUrgency.LOW: 1.5,
            RecoveryUrgency.MEDIUM: 1.0,
            RecoveryUrgency.HIGH: 0.7,
            RecoveryUrgency.CRITICAL: 0.5
        }
        urgency_multiplier = urgency_multipliers.get(urgency_level, 1.0)
        
        estimated_time = base_time * loss_multiplier * position_multiplier * urgency_multiplier
        
        return max(15, min(estimated_time, 1440))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 15 ‡∏ô‡∏≤‡∏ó‡∏µ - 1 ‡∏ß‡∏±‡∏ô
    
    def _estimate_additional_risk(self, method: RecoveryMethod, loss_analysis: Dict) -> float:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Recovery"""
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ß‡∏¥‡∏ò‡∏µ (% ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
        base_risks = {
            RecoveryMethod.MARTINGALE_SMART: 0.5,      # 50% ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            RecoveryMethod.GRID_INTELLIGENT: 0.3,      # 30%
            RecoveryMethod.HEDGING_ADVANCED: 0.2,      # 20%
            RecoveryMethod.AVERAGING_INTELLIGENT: 0.4, # 40%
            RecoveryMethod.CORRELATION_RECOVERY: 0.6   # 60%
        }
        
        base_risk = base_risks.get(method, 0.4)
        current_loss = abs(loss_analysis["total_loss"])
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô (‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å = ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
        if current_loss > 1000:
            risk_multiplier = 1.5
        elif current_loss > 500:
            risk_multiplier = 1.2  
        else:
            risk_multiplier = 1.0
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô positions
        if loss_analysis["position_count"] > 10:
            position_risk_multiplier = 1.3
        elif loss_analysis["position_count"] > 5:
            position_risk_multiplier = 1.1
        else:
            position_risk_multiplier = 1.0
        
        additional_risk = current_loss * base_risk * risk_multiplier * position_risk_multiplier
        
        return additional_risk
    
    def _estimate_success_probability(self, method: RecoveryMethod, 
                                    loss_analysis: Dict, 
                                    market_analysis: MarketAnalysis) -> float:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞ Recovery ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        stats = self.recovery_stats.get(method)
        if stats and stats.total_attempts >= self.min_attempts_for_stats:
            base_probability = stats.success_rate / 100
        else:
            # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ
            default_probabilities = {
                RecoveryMethod.MARTINGALE_SMART: 0.75,
                RecoveryMethod.GRID_INTELLIGENT: 0.80,
                RecoveryMethod.HEDGING_ADVANCED: 0.70,
                RecoveryMethod.AVERAGING_INTELLIGENT: 0.78,
                RecoveryMethod.CORRELATION_RECOVERY: 0.65
            }
            base_probability = default_probabilities.get(method, 0.70)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î
        market_adjustment = self._get_market_compatibility_score(method, market_analysis)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô (‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å = ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á)
        if loss_analysis["max_loss_percentage"] > 50:
            loss_adjustment = 0.7
        elif loss_analysis["max_loss_percentage"] > 30:
            loss_adjustment = 0.8
        elif loss_analysis["max_loss_percentage"] > 15:
            loss_adjustment = 0.9
        else:
            loss_adjustment = 1.0
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
        if loss_analysis["loss_trend"] == "WORSENING":
            trend_adjustment = 0.8
        elif loss_analysis["loss_trend"] == "IMPROVING":
            trend_adjustment = 1.1
        else:
            trend_adjustment = 1.0
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        final_probability = (base_probability * 0.4 + 
                            market_adjustment * 0.3 + 
                            base_probability * loss_adjustment * 0.2 + 
                            base_probability * trend_adjustment * 0.1)
        
        return min(max(final_probability, 0.1), 0.95)  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 10%-95%
    
    def _get_recommended_parameters(self, method: RecoveryMethod,
                                    loss_analysis: Dict,
                                    market_analysis: MarketAnalysis) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ Recovery"""
        
        # ‡∏î‡∏∂‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å trading_params
        base_params = self.trading_params.get_recovery_params(method)
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
        recommended_params = base_params.copy()
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
        loss_severity = loss_analysis["max_loss_percentage"]
        
        if method == RecoveryMethod.MARTINGALE_SMART:
            # ‡∏õ‡∏£‡∏±‡∏ö multiplier ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
            if loss_severity > 30:
                recommended_params["initial_multiplier"] = min(
                    recommended_params.get("initial_multiplier", 2.0) * 0.8, 
                    recommended_params.get("max_multiplier", 8.0)
                )
            
        elif method == RecoveryMethod.GRID_INTELLIGENT:
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á grid ‡∏ï‡∏≤‡∏° volatility
            if market_analysis.volatility_level == "HIGH":
                recommended_params["grid_spacing_pips"] = int(
                    recommended_params.get("grid_spacing_pips", 30) * 1.5
                )
            elif market_analysis.volatility_level == "LOW":
                recommended_params["grid_spacing_pips"] = int(
                    recommended_params.get("grid_spacing_pips", 30) * 0.7
                )
        
        elif method == RecoveryMethod.HEDGING_ADVANCED:
            # ‡∏õ‡∏£‡∏±‡∏ö hedge ratio ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô
            if loss_severity > 40:
                recommended_params["hedge_ratio"] = min(
                    recommended_params.get("hedge_ratio", 1.0) * 1.2, 2.0
                )
        
        return recommended_params
    
    def start_recovery(self, recovery_id: str, method: RecoveryMethod,
                        loss_positions: List[LossPosition],
                        parameters: Dict[str, Any]) -> bool:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£ Recovery"""
        
        if len(self.active_recoveries) >= self.max_concurrent_recoveries:
            self.logger.warning("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Recovery ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
            return False
        
        recovery_info = {
            "recovery_id": recovery_id,
            "method": method,
            "start_time": datetime.now(),
            "loss_positions": loss_positions,
            "parameters": parameters,
            "status": RecoverySuccess.PENDING,
            "initial_loss": sum(pos.loss_amount for pos in loss_positions),
            "current_loss": sum(pos.loss_amount for pos in loss_positions),
            "recovery_cost": 0.0
        }
        
        self.active_recoveries[recovery_id] = recovery_info
        
        self.logger.info(
            f"üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Recovery: {recovery_id} Method: {method.value} "
            f"Positions: {len(loss_positions)} Loss: {recovery_info['initial_loss']:.2f}"
        )
        
        return True
    
    def update_recovery_progress(self, recovery_id: str, 
                                current_loss: float, additional_cost: float = 0.0):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£ Recovery"""
        
        if recovery_id not in self.active_recoveries:
            return
        
        recovery_info = self.active_recoveries[recovery_id]
        recovery_info["current_loss"] = current_loss
        recovery_info["recovery_cost"] += additional_cost
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        initial_loss = abs(recovery_info["initial_loss"])
        current_loss_abs = abs(current_loss)
        
        if current_loss_abs <= initial_loss * 0.05:  # Recovery 95%+
            recovery_info["status"] = RecoverySuccess.SUCCESS
        elif current_loss_abs <= initial_loss * 0.5:  # Recovery 50%+
            recovery_info["status"] = RecoverySuccess.PARTIAL_SUCCESS
    
    def complete_recovery(self, recovery_id: str, final_result: RecoverySuccess,
                            market_condition: MarketCondition):
        """‡∏à‡∏ö‡∏Å‡∏≤‡∏£ Recovery ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•"""
        
        if recovery_id not in self.active_recoveries:
            return
        
        recovery_info = self.active_recoveries[recovery_id]
        method = recovery_info["method"]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
        recovery_time = (datetime.now() - recovery_info["start_time"]).total_seconds() / 60
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        stats = self.recovery_stats[method]
        stats.total_attempts += 1
        stats.total_recovery_time_minutes += recovery_time
        stats.total_recovery_cost += recovery_info["recovery_cost"]
        
        if final_result == RecoverySuccess.SUCCESS:
            stats.successful_recoveries += 1
        elif final_result == RecoverySuccess.PARTIAL_SUCCESS:
            stats.partial_recoveries += 1
        else:
            stats.failed_recoveries += 1
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î
        condition_key = market_condition.value
        if condition_key not in stats.condition_success_rates:
            stats.condition_success_rates[condition_key] = 0.0
        
        if final_result == RecoverySuccess.SUCCESS:
            stats.condition_success_rates[condition_key] = min(
                stats.condition_success_rates[condition_key] + 10, 100
            )
        else:
            stats.condition_success_rates[condition_key] = max(
                stats.condition_success_rates[condition_key] - 5, 0
            )
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
        stats.update_stats()
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        recovery_record = {
            "recovery_id": recovery_id,
            "method": method.value,
            "start_time": recovery_info["start_time"].isoformat(),
            "end_time": datetime.now().isoformat(),
            "duration_minutes": recovery_time,
            "initial_loss": recovery_info["initial_loss"],
            "final_loss": recovery_info["current_loss"],
            "recovery_cost": recovery_info["recovery_cost"],
            "result": final_result.value,
            "market_condition": market_condition.value,
            "position_count": len(recovery_info["loss_positions"])
        }
        
        self.recovery_history.append(recovery_record)
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        if len(self.recovery_history) > 500:
            self.recovery_history = self.recovery_history[-500:]
        
        # ‡∏•‡∏ö‡∏à‡∏≤‡∏Å active recoveries
        del self.active_recoveries[recovery_id]
        
        self.logger.info(
            f"‚úÖ ‡∏à‡∏ö Recovery: {recovery_id} Result: {final_result.value} "
            f"Time: {recovery_time:.1f}min Recovery: {((abs(recovery_info['initial_loss']) - abs(recovery_info['current_loss'])) / abs(recovery_info['initial_loss']) * 100):.1f}%"
        )
    
    def get_recovery_statistics(self) -> Dict[str, Dict]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Recovery ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        
        stats_summary = {}
        
        for method, stats in self.recovery_stats.items():
            stats_summary[method.value] = {
                "total_attempts": stats.total_attempts,
                "success_rate": round(stats.success_rate, 2),
                "efficiency_score": round(stats.efficiency_score, 3),
                "avg_recovery_time_minutes": round(stats.avg_recovery_time, 1),
                "condition_success_rates": stats.condition_success_rates,
                "urgency_success_rates": stats.urgency_success_rates
            }
        
        return stats_summary
    
    def get_active_recoveries(self) -> List[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Recovery ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"""
        
        active_list = []
        
        for recovery_id, info in self.active_recoveries.items():
            active_list.append({
                "recovery_id": recovery_id,
                "method": info["method"].value,
                "start_time": info["start_time"].isoformat(),
                "duration_minutes": (datetime.now() - info["start_time"]).total_seconds() / 60,
                "initial_loss": info["initial_loss"],
                "current_loss": info["current_loss"],
                "recovery_progress": ((abs(info["initial_loss"]) - abs(info["current_loss"])) / abs(info["initial_loss"]) * 100) if info["initial_loss"] != 0 else 0,
                "status": info["status"].value,
                "position_count": len(info["loss_positions"])
            })
        
        return active_list

# === HELPER FUNCTIONS ===

def get_recovery_recommendation_for_losses(loss_positions: List[LossPosition]) -> Optional[RecoveryRecommendation]:
   """‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Recovery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö positions ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"""
   selector = get_recovery_selector()
   return selector.select_recovery_method(loss_positions)

def start_automated_recovery(recovery_id: str, loss_positions: List[LossPosition]) -> bool:
   """‡πÄ‡∏£‡∏¥‡πà‡∏° Recovery ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
   selector = get_recovery_selector()
   
   # ‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
   recommendation = selector.select_recovery_method(loss_positions)
   if not recommendation:
       return False
   
   # ‡πÄ‡∏£‡∏¥‡πà‡∏° Recovery
   return selector.start_recovery(
       recovery_id,
       recommendation.primary_method,
       loss_positions,
       recommendation.recommended_parameters
   )

def get_recovery_status_summary() -> Dict:
   """‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Recovery"""
   selector = get_recovery_selector()
   
   active_recoveries = selector.get_active_recoveries()
   stats = selector.get_recovery_statistics()
   
   return {
       "active_count": len(active_recoveries),
       "total_initial_loss": sum(r["initial_loss"] for r in active_recoveries),
       "total_current_loss": sum(r["current_loss"] for r in active_recoveries),
       "average_progress": statistics.mean([r["recovery_progress"] for r in active_recoveries]) if active_recoveries else 0,
       "methods_performance": stats
   }

# === GLOBAL INSTANCE ===
_global_recovery_selector: Optional[RecoverySelector] = None

def get_recovery_selector() -> RecoverySelector:
   """‡∏î‡∏∂‡∏á Recovery Selector ‡πÅ‡∏ö‡∏ö Singleton"""
   global _global_recovery_selector
   if _global_recovery_selector is None:
       _global_recovery_selector = RecoverySelector()
   return _global_recovery_selector
# market_intelligence/session_manager.py - Trading Session Management System

import numpy as np
import pandas as pd
from datetime import datetime, time, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from enum import Enum
import pytz

class TradingSession(Enum):
    """üìÖ ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
    ASIAN = "asian"         # ‡πÄ‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢
    LONDON = "london"       # ‡∏•‡∏≠‡∏ô‡∏î‡∏≠‡∏ô
    NY = "ny"              # ‡∏ô‡∏¥‡∏ß‡∏¢‡∏≠‡∏£‡πå‡∏Å
    OVERLAP = "overlap"     # ‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö
    QUIET = "quiet"        # ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö

class SessionCharacteristic(Enum):
    """üìä ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô"""
    LOW_VOLATILITY = "low_volatility"
    HIGH_VOLATILITY = "high_volatility"
    TRENDING = "trending"
    RANGING = "ranging"
    HIGH_VOLUME = "high_volume"
    LOW_VOLUME = "low_volume"

@dataclass
class SessionInfo:
    """‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô"""
    session: TradingSession
    start_time: time
    end_time: time
    timezone: str
    characteristics: List[SessionCharacteristic]
    volatility_multiplier: float
    volume_multiplier: float
    spread_multiplier: float
    optimal_strategies: List[str]

@dataclass
class SessionAnalysis:
    """üìà ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô"""
    current_session: TradingSession
    next_session: TradingSession
    time_to_next_session: timedelta
    session_progress: float  # 0.0 - 1.0
    volatility_expected: str  # "low", "medium", "high"
    volume_expected: str     # "low", "medium", "high"
    optimal_entry_methods: List[str]
    optimal_recovery_methods: List[str]
    risk_level: str         # "low", "medium", "high"
    confidence: float

class SessionManager:
    """
    üåç Trading Session Manager - ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
    
    ‚ö° ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å:
    - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    - ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô
    - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô
    - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
    - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ timezone ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
    
    üéØ ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ (GMT+7):
    - Asian: 22:00-08:00 (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡πà‡∏≥, ‡πÄ‡∏´‡∏°‡∏≤‡∏∞ Mean Reversion)
    - London: 15:00-00:00 (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á, ‡πÄ‡∏´‡∏°‡∏≤‡∏∞ Trend Following) 
    - NY: 20:30-05:30 (‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏π‡∏á, ‡πÄ‡∏´‡∏°‡∏≤‡∏∞ Breakout)
    - Overlap: 20:30-00:00 (‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î, ‡πÄ‡∏´‡∏°‡∏≤‡∏∞ Grid/False Breakout)
    """
    
    def __init__(self, config: Dict):
        print("üåç Initializing Trading Session Manager...")
        
        self.config = config
        
        # Timezone setup
        self.local_timezone = config.get('local_timezone', 'Asia/Bangkok')  # GMT+7
        self.broker_timezone = config.get('broker_timezone', 'Europe/London')
        
        # Session definitions (in local time GMT+7)
        self.session_definitions = self._define_trading_sessions()
        
        # Current state
        self.current_session_info = None
        self.last_analysis_time = None
        self.session_change_callbacks = []
        
        # Session statistics
        self.session_stats = {}  # session -> statistics
        self.session_history = []
        
        # Market hours and holidays
        self.market_holidays = config.get('market_holidays', [])
        self.weekend_trading = config.get('weekend_trading', False)
        
        print("‚úÖ Trading Session Manager initialized")
        print(f"   - Local Timezone: {self.local_timezone}")
        print(f"   - Sessions Defined: {len(self.session_definitions)}")
    
    def _define_trading_sessions(self) -> Dict[TradingSession, SessionInfo]:
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            sessions = {}
            
            # Asian Session (Tokyo + Sydney)
            sessions[TradingSession.ASIAN] = SessionInfo(
                session=TradingSession.ASIAN,
                start_time=time(22, 0),  # 22:00 GMT+7
                end_time=time(8, 0),     # 08:00 GMT+7 (next day)
                timezone=self.local_timezone,
                characteristics=[
                    SessionCharacteristic.LOW_VOLATILITY,
                    SessionCharacteristic.RANGING,
                    SessionCharacteristic.LOW_VOLUME
                ],
                volatility_multiplier=0.7,
                volume_multiplier=0.6,
                spread_multiplier=1.2,
                optimal_strategies=["mean_reversion", "martingale_smart", "scalping"]
            )
            
            # London Session
            sessions[TradingSession.LONDON] = SessionInfo(
                session=TradingSession.LONDON,
                start_time=time(15, 0),  # 15:00 GMT+7
                end_time=time(0, 0),     # 00:00 GMT+7 (next day)
                timezone=self.local_timezone,
                characteristics=[
                    SessionCharacteristic.HIGH_VOLATILITY,
                    SessionCharacteristic.TRENDING,
                    SessionCharacteristic.HIGH_VOLUME
                ],
                volatility_multiplier=1.4,
                volume_multiplier=1.3,
                spread_multiplier=0.8,
                optimal_strategies=["trend_following", "grid_intelligent", "breakout"]
            )
            
            # New York Session
            sessions[TradingSession.NY] = SessionInfo(
                session=TradingSession.NY,
                start_time=time(20, 30),  # 20:30 GMT+7
                end_time=time(5, 30),     # 05:30 GMT+7 (next day)
                timezone=self.local_timezone,
                characteristics=[
                    SessionCharacteristic.HIGH_VOLATILITY,
                    SessionCharacteristic.TRENDING,
                    SessionCharacteristic.HIGH_VOLUME
                ],
                volatility_multiplier=1.5,
                volume_multiplier=1.5,
                spread_multiplier=0.7,
                optimal_strategies=["trend_following", "news_reaction", "breakout"]
            )
            
            # Overlap Session (London + NY)
            sessions[TradingSession.OVERLAP] = SessionInfo(
                session=TradingSession.OVERLAP,
                start_time=time(20, 30),  # 20:30 GMT+7
                end_time=time(0, 0),      # 00:00 GMT+7 (next day)
                timezone=self.local_timezone,
                characteristics=[
                    SessionCharacteristic.HIGH_VOLATILITY,
                    SessionCharacteristic.TRENDING,
                    SessionCharacteristic.HIGH_VOLUME
                ],
                volatility_multiplier=1.8,
                volume_multiplier=2.0,
                spread_multiplier=0.6,
                optimal_strategies=["grid_intelligent", "false_breakout", "hedging"]
            )
            
            # Quiet Session (between major sessions)
            sessions[TradingSession.QUIET] = SessionInfo(
                session=TradingSession.QUIET,
                start_time=time(8, 0),   # 08:00 GMT+7
                end_time=time(15, 0),    # 15:00 GMT+7
                timezone=self.local_timezone,
                characteristics=[
                    SessionCharacteristic.LOW_VOLATILITY,
                    SessionCharacteristic.RANGING,
                    SessionCharacteristic.LOW_VOLUME
                ],
                volatility_multiplier=0.5,
                volume_multiplier=0.4,
                spread_multiplier=1.5,
                optimal_strategies=["mean_reversion", "scalping"]
            )
            
            return sessions
            
        except Exception as e:
            print(f"‚ùå Session definition error: {e}")
            return {}
    
    def get_current_session(self, current_time: Optional[datetime] = None) -> SessionAnalysis:
        """
        üïê ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        
        Args:
            current_time: ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
            
        Returns:
            SessionAnalysis object
        """
        try:
            if current_time is None:
                current_time = datetime.now()
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô local timezone
            if current_time.tzinfo is None:
                local_tz = pytz.timezone(self.local_timezone)
                current_time = local_tz.localize(current_time)
            
            current_time_local = current_time.astimezone(pytz.timezone(self.local_timezone))
            current_time_only = current_time_local.time()
            
            # ‡∏´‡∏≤‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_session = self._identify_current_session(current_time_only)
            
            # ‡∏´‡∏≤‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_session = self._identify_next_session(current_session, current_time_local)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            time_to_next = self._calculate_time_to_next_session(current_session, next_session, current_time_local)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            session_progress = self._calculate_session_progress(current_session, current_time_only)
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
            volatility_expected = self._predict_volatility(current_session, session_progress)
            volume_expected = self._predict_volume(current_session, session_progress)
            
            # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ entry ‡πÅ‡∏•‡∏∞ recovery
            optimal_entry_methods = self._recommend_entry_methods(current_session)
            optimal_recovery_methods = self._recommend_recovery_methods(current_session)
            
            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
            risk_level = self._assess_session_risk(current_session, session_progress)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
            confidence = self._calculate_session_confidence(current_session, current_time_local)
            
            analysis = SessionAnalysis(
                current_session=current_session,
                next_session=next_session,
                time_to_next_session=time_to_next,
                session_progress=session_progress,
                volatility_expected=volatility_expected,
                volume_expected=volume_expected,
                optimal_entry_methods=optimal_entry_methods,
                optimal_recovery_methods=optimal_recovery_methods,
                risk_level=risk_level,
                confidence=confidence
            )
            
            # Cache analysis
            self.current_session_info = analysis
            self.last_analysis_time = current_time
            
            return analysis
            
        except Exception as e:
            print(f"‚ùå Current session analysis error: {e}")
            return self._create_default_analysis()
    
    def _identify_current_session(self, current_time: time) -> TradingSession:
        """‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Overlap session ‡∏Å‡πà‡∏≠‡∏ô (‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
            overlap_info = self.session_definitions[TradingSession.OVERLAP]
            if self._is_time_in_session(current_time, overlap_info.start_time, overlap_info.end_time):
                return TradingSession.OVERLAP
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            for session, info in self.session_definitions.items():
                if session == TradingSession.OVERLAP:
                    continue  # ‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß
                
                if self._is_time_in_session(current_time, info.start_time, info.end_time):
                    return session
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏´‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô QUIET
            return TradingSession.QUIET
            
        except Exception as e:
            print(f"‚ùå Session identification error: {e}")
            return TradingSession.QUIET
    
    def _is_time_in_session(self, current_time: time, start_time: time, end_time: time) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            if start_time <= end_time:
                # ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏°‡πà‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô
                return start_time <= current_time <= end_time
            else:
                # ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 22:00 - 08:00)
                return current_time >= start_time or current_time <= end_time
                
        except Exception as e:
            print(f"‚ùå Time in session check error: {e}")
            return False
    
    def _identify_next_session(self, current_session: TradingSession, current_time: datetime) -> TradingSession:
        """‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"""
        try:
            session_order = [
                TradingSession.QUIET,
                TradingSession.LONDON,
                TradingSession.OVERLAP,
                TradingSession.NY,
                TradingSession.ASIAN
            ]
            
            try:
                current_index = session_order.index(current_session)
                next_index = (current_index + 1) % len(session_order)
                return session_order[next_index]
            except ValueError:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô order ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ logic ‡∏≠‡∏∑‡πà‡∏ô
                if current_session == TradingSession.OVERLAP:
                    return TradingSession.NY
                else:
                    return TradingSession.QUIET
                    
        except Exception as e:
            print(f"‚ùå Next session identification error: {e}")
            return TradingSession.QUIET
    
    def _calculate_time_to_next_session(self, current_session: TradingSession, 
                                      next_session: TradingSession, current_time: datetime) -> timedelta:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"""
        try:
            current_info = self.session_definitions[current_session]
            next_info = self.session_definitions[next_session]
            
            current_time_only = current_time.time()
            
            # ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            end_time = current_info.end_time
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            if end_time > current_time_only:
                # ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                end_datetime = current_time.replace(
                    hour=end_time.hour, 
                    minute=end_time.minute, 
                    second=0, 
                    microsecond=0
                )
            else:
                # ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                end_datetime = current_time.replace(
                    hour=end_time.hour, 
                    minute=end_time.minute, 
                    second=0, 
                    microsecond=0
                ) + timedelta(days=1)
            
            time_to_end = end_datetime - current_time
            
            return time_to_end
            
        except Exception as e:
            print(f"‚ùå Time to next session calculation error: {e}")
            return timedelta(hours=1)
    
    def _calculate_session_progress(self, session: TradingSession, current_time: time) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô (0.0 - 1.0)"""
        try:
            session_info = self.session_definitions[session]
            start_time = session_info.start_time
            end_time = session_info.end_time
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô
            start_minutes = start_time.hour * 60 + start_time.minute
            current_minutes = current_time.hour * 60 + current_time.minute
            end_minutes = end_time.hour * 60 + end_time.minute
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô
            if start_time > end_time:
                if current_time >= start_time:
                    # ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                    session_length = (24 * 60) - start_minutes + end_minutes
                    current_progress = current_minutes - start_minutes
                else:
                    # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                    session_length = (24 * 60) - start_minutes + end_minutes
                    current_progress = (24 * 60) - start_minutes + current_minutes
            else:
                # ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏°‡πà‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô
                session_length = end_minutes - start_minutes
                current_progress = current_minutes - start_minutes
            
            progress = current_progress / session_length if session_length > 0 else 0.0
            return max(0.0, min(progress, 1.0))
            
        except Exception as e:
            print(f"‚ùå Session progress calculation error: {e}")
            return 0.5
    
    def _predict_volatility(self, session: TradingSession, progress: float) -> str:
        """‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
        try:
            session_info = self.session_definitions[session]
            base_volatility = session_info.volatility_multiplier
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô
            if session in [TradingSession.LONDON, TradingSession.NY, TradingSession.OVERLAP]:
                # ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏≤‡∏á
                if progress < 0.3 or 0.4 < progress < 0.7:
                    adjusted_volatility = base_volatility * 1.2
                else:
                    adjusted_volatility = base_volatility * 0.9
            else:
                # ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏£‡∏≠‡∏á - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
                adjusted_volatility = base_volatility
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö
            if adjusted_volatility >= 1.4:
                return "high"
            elif adjusted_volatility >= 1.0:
                return "medium"
            else:
                return "low"
                
        except Exception as e:
            print(f"‚ùå Volatility prediction error: {e}")
            return "medium"
    
    def _predict_volume(self, session: TradingSession, progress: float) -> str:
        """‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            session_info = self.session_definitions[session]
            base_volume = session_info.volume_multiplier
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            if session in [TradingSession.LONDON, TradingSession.NY, TradingSession.OVERLAP]:
                # ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
                if progress < 0.2 or progress > 0.8:
                    adjusted_volume = base_volume * 1.3
                else:
                    adjusted_volume = base_volume
            else:
                adjusted_volume = base_volume
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö
            if adjusted_volume >= 1.5:
                return "high"
            elif adjusted_volume >= 1.0:
                return "medium"
            else:
                return "low"
                
        except Exception as e:
            print(f"‚ùå Volume prediction error: {e}")
            return "medium"
    
    def _recommend_entry_methods(self, session: TradingSession) -> List[str]:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ entry ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
        try:
            session_info = self.session_definitions[session]
            return session_info.optimal_strategies.copy()
            
        except Exception as e:
            print(f"‚ùå Entry methods recommendation error: {e}")
            return ["mean_reversion"]
    
    def _recommend_recovery_methods(self, session: TradingSession) -> List[str]:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ recovery ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
        try:
            recovery_mapping = {
                TradingSession.ASIAN: ["martingale_smart", "averaging"],
                TradingSession.LONDON: ["grid_intelligent", "hedging"],
                TradingSession.NY: ["grid_intelligent", "trend_recovery"],
                TradingSession.OVERLAP: ["hedging", "correlation_recovery"],
                TradingSession.QUIET: ["martingale_smart", "averaging"]
            }
            
            return recovery_mapping.get(session, ["martingale_smart"])
            
        except Exception as e:
            print(f"‚ùå Recovery methods recommendation error: {e}")
            return ["martingale_smart"]
    
    def _assess_session_risk(self, session: TradingSession, progress: float) -> str:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô"""
        try:
            session_info = self.session_definitions[session]
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô
            base_risk = {
                TradingSession.ASIAN: "low",
                TradingSession.LONDON: "medium",
                TradingSession.NY: "medium", 
                TradingSession.OVERLAP: "high",
                TradingSession.QUIET: "low"
            }
            
            risk = base_risk.get(session, "medium")
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            if session == TradingSession.OVERLAP:
                if 0.3 < progress < 0.7:  # ‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á overlap
                    risk = "high"
                else:
                    risk = "medium"
            
            return risk
            
        except Exception as e:
            print(f"‚ùå Session risk assessment error: {e}")
            return "medium"
    
    def _calculate_session_confidence(self, session: TradingSession, current_time: datetime) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô"""
        try:
            confidence = 0.8  # base confidence
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô
            if session in self.session_stats:
                stats = self.session_stats[session]
                success_rate = stats.get('success_rate', 0.5)
                confidence += (success_rate - 0.5) * 0.4  # ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ¬±0.2
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
            weekday = current_time.weekday()  # 0=Monday, 6=Sunday
            if weekday < 5:  # ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå
                confidence += 0.1
            else:  # ‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
                confidence -= 0.2
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î
            if self._is_holiday(current_time):
                confidence -= 0.3
            
            return max(0.1, min(confidence, 0.95))
            
        except Exception as e:
            print(f"‚ùå Session confidence calculation error: {e}")
            return 0.7
    
    def _is_holiday(self, current_time: datetime) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            date_str = current_time.strftime("%Y-%m-%d")
            return date_str in self.market_holidays
            
        except Exception as e:
            print(f"‚ùå Holiday check error: {e}")
            return False
    
    def _create_default_analysis(self) -> SessionAnalysis:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á analysis ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        return SessionAnalysis(
            current_session=TradingSession.QUIET,
            next_session=TradingSession.LONDON,
            time_to_next_session=timedelta(hours=1),
            session_progress=0.5,
            volatility_expected="medium",
            volume_expected="medium",
            optimal_entry_methods=["mean_reversion"],
            optimal_recovery_methods=["martingale_smart"],
            risk_level="medium",
            confidence=0.5
        )
    
    def get_session_multipliers(self, session: Optional[TradingSession] = None) -> Dict[str, float]:
        """
        üìä ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô
        
        Args:
            session: ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
            
        Returns:
            Dictionary ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡∏ï‡πà‡∏≤‡∏á‡πÜ
        """
        try:
            if session is None:
                analysis = self.get_current_session()
                session = analysis.current_session
            
            session_info = self.session_definitions[session]
            
            return {
                'volatility_multiplier': session_info.volatility_multiplier,
                'volume_multiplier': session_info.volume_multiplier,
                'spread_multiplier': session_info.spread_multiplier,
                'entry_frequency_multiplier': session_info.volume_multiplier * 0.8,
                'recovery_aggressiveness': session_info.volatility_multiplier * 0.7,
                'lot_size_multiplier': session_info.volume_multiplier * 0.6
            }
            
        except Exception as e:
            print(f"‚ùå Session multipliers error: {e}")
            return {
                'volatility_multiplier': 1.0,
                'volume_multiplier': 1.0,
                'spread_multiplier': 1.0,
                'entry_frequency_multiplier': 1.0,
                'recovery_aggressiveness': 1.0,
                'lot_size_multiplier': 1.0
            }
    
    def update_session_statistics(self, session_results: Dict):
        """
        üìà ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô
        
        Args:
            session_results: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô
        """
        try:
            session = session_results.get('session')
            if not session:
                return
            
            if session not in self.session_stats:
                self.session_stats[session] = {
                    'total_trades': 0,
                    'successful_trades': 0,
                    'total_profit': 0.0,
                    'success_rate': 0.0,
                    'avg_profit': 0.0,
                    'last_updated': datetime.now()
                }
            
            stats = self.session_stats[session]
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            stats['total_trades'] += session_results.get('trades_count', 0)
            stats['successful_trades'] += session_results.get('successful_trades', 0)
            stats['total_profit'] += session_results.get('profit', 0.0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            if stats['total_trades'] > 0:
                stats['success_rate'] = stats['successful_trades'] / stats['total_trades']
                stats['avg_profit'] = stats['total_profit'] / stats['total_trades']
            
            stats['last_updated'] = datetime.now()
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            self.session_history.append({
                'timestamp': datetime.now(),
                'session': session,
                'results': session_results
            })
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            if len(self.session_history) > 1000:
                self.session_history = self.session_history[-500:]
            
        except Exception as e:
            print(f"‚ùå Session statistics update error: {e}")
    
    def get_session_performance(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô"""
        try:
            performance = {}
            
            for session, stats in self.session_stats.items():
                session_name = session.value if hasattr(session, 'value') else str(session)
                performance[session_name] = {
                    'total_trades': stats['total_trades'],
                    'success_rate': stats['success_rate'] * 100,  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô %
                    'total_profit': stats['total_profit'],
                    'avg_profit': stats['avg_profit'],
                    'last_updated': stats['last_updated'].strftime("%Y-%m-%d %H:%M:%S")
                }
            
            # ‡∏´‡∏≤‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            best_session = None
            best_score = 0
            
            for session_name, data in performance.items():
                if data['total_trades'] >= 10:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
                    score = data['success_rate'] * 0.7 + (data['avg_profit'] / 10) * 0.3
                    if score > best_score:
                        best_score = score
                        best_session = session_name
            
            return {
                'sessions': performance,
                'best_session': best_session,
                'best_score': best_score,
                'total_sessions_tracked': len(self.session_stats)
            }
            
        except Exception as e:
            print(f"‚ùå Session performance error: {e}")
            return {'error': str(e)}
    
    def register_session_change_callback(self, callback_func):
        """‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô"""
        try:
            self.session_change_callbacks.append(callback_func)
            
        except Exception as e:
            print(f"‚ùå Callback registration error: {e}")
    
    def check_session_change(self) -> bool:
        """
        üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callbacks
        
        Returns:
            True ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        """
        try:
            current_analysis = self.get_current_session()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (self.current_session_info and 
                self.current_session_info.current_session != current_analysis.current_session):
                
                old_session = self.current_session_info.current_session
                new_session = current_analysis.current_session
                
                print(f"üîÑ Session changed: {old_session.value} -> {new_session.value}")
                
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callbacks
                for callback in self.session_change_callbacks:
                    try:
                        callback(old_session, new_session, current_analysis)
                    except Exception as e:
                        print(f"‚ùå Callback error: {e}")
                
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå Session change check error: {e}")
            return False
    
    def get_optimal_trading_parameters(self, strategy_type: str = "general") -> Dict:
        """
        ‚öôÔ∏è ‡∏î‡∏∂‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        
        Args:
            strategy_type: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            
        Returns:
            Dictionary ‡∏Ç‡∏≠‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
        """
        try:
            analysis = self.get_current_session()
            session = analysis.current_session
            multipliers = self.get_session_multipliers(session)
            
            # ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            base_params = {
                'lot_size_multiplier': multipliers['lot_size_multiplier'],
                'entry_frequency': multipliers['entry_frequency_multiplier'],
                'recovery_aggressiveness': multipliers['recovery_aggressiveness'],
                'risk_tolerance': self._get_risk_tolerance(session),
                'max_positions': self._get_max_positions(session),
                'spread_tolerance': multipliers['spread_multiplier']
            }
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            if strategy_type == "trend_following":
                base_params.update({
                    'trend_strength_threshold': 0.6 if session in [TradingSession.LONDON, TradingSession.NY] else 0.4,
                    'breakout_threshold': multipliers['volatility_multiplier'] * 20,  # pips
                    'pullback_tolerance': 0.3
                })
            
            elif strategy_type == "mean_reversion":
                base_params.update({
                    'overbought_threshold': 75 if session == TradingSession.ASIAN else 80,
                    'oversold_threshold': 25 if session == TradingSession.ASIAN else 20,
                    'reversion_strength': 0.7 if session == TradingSession.ASIAN else 0.5
                })
            
            elif strategy_type == "grid":
                base_params.update({
                    'grid_spacing': multipliers['volatility_multiplier'] * 15,  # pips
                    'max_grid_levels': 8 if session in [TradingSession.LONDON, TradingSession.NY] else 5,
                    'volume_multiplier': 1.2 if session == TradingSession.OVERLAP else 1.0
                })
            
            elif strategy_type == "martingale":
                base_params.update({
                    'martingale_multiplier': 1.6 if session == TradingSession.ASIAN else 1.8,
                    'max_levels': 5 if session == TradingSession.ASIAN else 4,
                    'recovery_threshold': -15 if session == TradingSession.ASIAN else -25
                })
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô
            base_params.update({
                'current_session': session.value,
                'session_progress': analysis.session_progress,
                'volatility_expected': analysis.volatility_expected,
                'volume_expected': analysis.volume_expected,
                'risk_level': analysis.risk_level
            })
            
            return base_params
            
        except Exception as e:
            print(f"‚ùå Trading parameters error: {e}")
            return {'error': str(e)}
    
    def _get_risk_tolerance(self, session: TradingSession) -> float:
        """‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏ô‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"""
        risk_tolerance = {
            TradingSession.ASIAN: 0.8,      # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥
            TradingSession.LONDON: 0.6,     # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            TradingSession.NY: 0.6,         # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            TradingSession.OVERLAP: 0.4,    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á
            TradingSession.QUIET: 0.9       # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å
        }
        return risk_tolerance.get(session, 0.7)
    
    def _get_max_positions(self, session: TradingSession) -> int:
        """‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô positions ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"""
        max_positions = {
            TradingSession.ASIAN: 8,        # ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏¢‡∏≠‡∏∞
            TradingSession.LONDON: 5,       # ‡∏ï‡∏•‡∏≤‡∏î‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô ‡∏£‡∏∞‡∏ß‡∏±‡∏á
            TradingSession.NY: 5,           # ‡∏ï‡∏•‡∏≤‡∏î‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô ‡∏£‡∏∞‡∏ß‡∏±‡∏á
            TradingSession.OVERLAP: 3,      # ‡∏ï‡∏•‡∏≤‡∏î‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏°‡∏≤‡∏Å ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏™‡∏π‡∏á
            TradingSession.QUIET: 10        # ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏Å ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        }
        return max_positions.get(session, 6)
    
    def get_session_forecast(self, hours_ahead: int = 4) -> List[Dict]:
        """
        üîÆ ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        
        Args:
            hours_ahead: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
            
        Returns:
            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
        """
        try:
            forecasts = []
            current_time = datetime.now()
            
            for hour in range(1, hours_ahead + 1):
                future_time = current_time + timedelta(hours=hour)
                future_analysis = self.get_current_session(future_time)
                
                forecast = {
                    'time': future_time.strftime("%H:%M"),
                    'session': future_analysis.current_session.value,
                    'volatility': future_analysis.volatility_expected,
                    'volume': future_analysis.volume_expected,
                    'risk_level': future_analysis.risk_level,
                    'optimal_strategies': future_analysis.optimal_entry_methods[:3]  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                }
                
                forecasts.append(forecast)
            
            return forecasts
            
        except Exception as e:
            print(f"‚ùå Session forecast error: {e}")
            return []
    
    def get_current_status(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Session Manager"""
        try:
            if not self.current_session_info:
                analysis = self.get_current_session()
            else:
                analysis = self.current_session_info
            
            return {
                'current_session': analysis.current_session.value,
                'next_session': analysis.next_session.value,
                'session_progress': f"{analysis.session_progress*100:.1f}%",
                'time_to_next': str(analysis.time_to_next_session).split('.')[0],  # ‡∏ï‡∏±‡∏î microseconds
                'volatility_expected': analysis.volatility_expected,
                'volume_expected': analysis.volume_expected,
                'risk_level': analysis.risk_level,
                'confidence': f"{analysis.confidence*100:.1f}%",
                'optimal_entries': analysis.optimal_entry_methods,
                'optimal_recovery': analysis.optimal_recovery_methods,
                'sessions_tracked': len(self.session_stats),
                'last_analysis': self.last_analysis_time.strftime("%H:%M:%S") if self.last_analysis_time else "Never"
            }
            
        except Exception as e:
            print(f"‚ùå Current status error: {e}")
            return {'error': str(e)}

def main():
   """Test the Session Manager"""
   print("üß™ Testing Trading Session Manager...")
   
   # Sample configuration
   config = {
       'local_timezone': 'Asia/Bangkok',
       'broker_timezone': 'Europe/London',
       'market_holidays': ['2024-12-25', '2024-01-01'],
       'weekend_trading': False
   }
   
   # Initialize session manager
   session_manager = SessionManager(config)
   
   # Test current session analysis
   analysis = session_manager.get_current_session()
   print(f"\nüìä Current Session Analysis:")
   print(f"   Current Session: {analysis.current_session.value}")
   print(f"   Next Session: {analysis.next_session.value}")
   print(f"   Session Progress: {analysis.session_progress*100:.1f}%")
   print(f"   Time to Next: {analysis.time_to_next_session}")
   print(f"   Volatility Expected: {analysis.volatility_expected}")
   print(f"   Volume Expected: {analysis.volume_expected}")
   print(f"   Risk Level: {analysis.risk_level}")
   print(f"   Confidence: {analysis.confidence*100:.1f}%")
   
   # Test session multipliers
   multipliers = session_manager.get_session_multipliers()
   print(f"\n‚öôÔ∏è Session Multipliers:")
   for key, value in multipliers.items():
       print(f"   {key}: {value:.2f}")
   
   # Test optimal trading parameters
   params = session_manager.get_optimal_trading_parameters("trend_following")
   print(f"\nüéØ Optimal Trading Parameters (Trend Following):")
   for key, value in params.items():
       if isinstance(value, float):
           print(f"   {key}: {value:.2f}")
       else:
           print(f"   {key}: {value}")
   
   # Test session forecast
   forecasts = session_manager.get_session_forecast(4)
   print(f"\nüîÆ Session Forecast (Next 4 hours):")
   for forecast in forecasts:
       print(f"   {forecast['time']}: {forecast['session']} "
             f"(Vol: {forecast['volatility']}, Risk: {forecast['risk_level']})")
   
   # Test current status
   status = session_manager.get_current_status()
   print(f"\nüìà Current Status:")
   for key, value in status.items():
       if isinstance(value, list):
           print(f"   {key}: {', '.join(value[:3])}")  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
       else:
           print(f"   {key}: {value}")
   
   print("\n‚úÖ Trading Session Manager test completed")

if __name__ == "__main__":
   main()
# market_intelligence/volatility_engine.py - Advanced Volatility Analysis Engine

import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from enum import Enum
import math

class VolatilityLevel(Enum):
    """üìà ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
    EXTREMELY_LOW = "extremely_low"    # < 10 pips/hour
    LOW = "low"                        # 10-20 pips/hour
    MODERATE = "moderate"              # 20-40 pips/hour
    HIGH = "high"                      # 40-70 pips/hour
    EXTREMELY_HIGH = "extremely_high"  # > 70 pips/hour

class VolatilityTrend(Enum):
    """üìä ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
    INCREASING = "increasing"          # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
    DECREASING = "decreasing"          # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏•‡∏î‡∏•‡∏á
    STABLE = "stable"                  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    VOLATILE = "volatile"              # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô

class VolatilityRegime(Enum):
    """üåä ‡∏£‡∏∞‡∏ö‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
    CALM = "calm"                      # ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏á‡∏µ‡∏¢‡∏ö
    NORMAL = "normal"                  # ‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    TURBULENT = "turbulent"            # ‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡πà‡∏ß‡∏ô
    CRISIS = "crisis"                  # ‡∏ï‡∏•‡∏≤‡∏î‡∏ß‡∏¥‡∏Å‡∏§‡∏ï

@dataclass
class VolatilityMeasurement:
    """üìè ‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
    atr_value: float                   # Average True Range
    atr_pips: float                    # ATR ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ pips
    realized_volatility: float         # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á
    implied_volatility: float          # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÇ‡∏î‡∏¢‡∏ô‡∏±‡∏¢
    volatility_percentile: float       # ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡πÑ‡∏ó‡∏•‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
    intraday_range: float              # ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô
    hourly_volatility: float           # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

@dataclass
class VolatilityAnalysis:
    """üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
    current_level: VolatilityLevel
    trend: VolatilityTrend
    regime: VolatilityRegime
    measurements: VolatilityMeasurement
    
    # ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
    expected_range_next_hour: Tuple[float, float]
    expected_range_next_4hours: Tuple[float, float]
    breakout_probability: float
    
    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    optimal_strategies: List[str]
    risk_adjustment: float
    position_sizing_multiplier: float
    
    confidence: float
    analysis_time: datetime

class VolatilityEngine:
    """
    üî¨ Volatility Analysis Engine - ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
    
    ‚ö° ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å:
    - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö Real-time
    - ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    - ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô (Volatility Regimes)
    - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
    - ‡∏õ‡∏£‡∏±‡∏ö Risk Management ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
    
    üéØ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
    - Average True Range (ATR)
    - Realized Volatility
    - GARCH Models (simplified)
    - Bollinger Bands Width
    - Price Range Analysis
    - Volume-Price Volatility
    """
    
    def __init__(self, config: Dict):
        print("üî¨ Initializing Volatility Engine...")
        
        self.config = config
        
        # Volatility parameters
        self.atr_period = config.get('atr_period', 14)
        self.volatility_lookback = config.get('volatility_lookback', 100)
        self.regime_lookback = config.get('regime_lookback', 50)
        
        # Volatility thresholds (in pips for XAUUSD)
        self.thresholds = {
            'extremely_low': config.get('extremely_low_threshold', 10),
            'low': config.get('low_threshold', 20),
            'moderate': config.get('moderate_threshold', 40),
            'high': config.get('high_threshold', 70)
        }
        
        # Bollinger Bands parameters
        self.bb_period = config.get('bb_period', 20)
        self.bb_std = config.get('bb_std', 2.0)
        
        # GARCH parameters (simplified)
        self.garch_alpha = config.get('garch_alpha', 0.05)
        self.garch_beta = config.get('garch_beta', 0.90)
        
        # Historical data cache
        self.volatility_history = []
        self.regime_history = []
        self.last_analysis = None
        self.last_analysis_time = None
        
        # Statistics
        self.analysis_count = 0
        self.regime_changes = 0
        
        print("‚úÖ Volatility Engine initialized")
        print(f"   - ATR Period: {self.atr_period}")
        print(f"   - Volatility Lookback: {self.volatility_lookback}")
        print(f"   - Thresholds: {self.thresholds}")
    
    def analyze_volatility(self, market_data: pd.DataFrame) -> VolatilityAnalysis:
        """
        üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°
        
        Args:
            market_data: DataFrame with OHLCV data
            
        Returns:
            VolatilityAnalysis object
        """
        try:
            if len(market_data) < self.atr_period + 10:
                print("‚ùå Insufficient data for volatility analysis")
                return self._create_default_analysis()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volatility measurements
            measurements = self._calculate_volatility_measurements(market_data)
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            current_level = self._classify_volatility_level(measurements)
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
            trend = self._analyze_volatility_trend(market_data, measurements)
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            regime = self._classify_volatility_regime(market_data, measurements)
            
            # ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            next_hour_range = self._predict_price_range(market_data, 1)
            next_4hours_range = self._predict_price_range(market_data, 4)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á breakout
            breakout_prob = self._calculate_breakout_probability(market_data, measurements)
            
            # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            optimal_strategies = self._recommend_strategies(current_level, trend, regime)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö risk
            risk_adjustment = self._calculate_risk_adjustment(current_level, regime)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì position sizing
            position_multiplier = self._calculate_position_multiplier(current_level, trend)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
            confidence = self._calculate_analysis_confidence(market_data, measurements)
            
            analysis = VolatilityAnalysis(
                current_level=current_level,
                trend=trend,
                regime=regime,
                measurements=measurements,
                expected_range_next_hour=next_hour_range,
                expected_range_next_4hours=next_4hours_range,
                breakout_probability=breakout_prob,
                optimal_strategies=optimal_strategies,
                risk_adjustment=risk_adjustment,
                position_sizing_multiplier=position_multiplier,
                confidence=confidence,
                analysis_time=datetime.now()
            )
            
            # Cache analysis
            self._cache_analysis(analysis)
            
            return analysis
            
        except Exception as e:
            print(f"‚ùå Volatility analysis error: {e}")
            return self._create_default_analysis()
    
    def _calculate_volatility_measurements(self, market_data: pd.DataFrame) -> VolatilityMeasurement:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
        try:
            df = market_data.copy()
            
            # 1. Average True Range (ATR)
            high_low = df['high'] - df['low']
            high_close = abs(df['high'] - df['close'].shift(1))
            low_close = abs(df['low'] - df['close'].shift(1))
            
            true_range = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
            atr_value = true_range.rolling(window=self.atr_period).mean().iloc[-1]
            atr_pips = atr_value * 10  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô pips ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö XAUUSD
            
            # 2. Realized Volatility (‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏à‡∏£‡∏¥‡∏á)
            returns = df['close'].pct_change().dropna()
            realized_vol = returns.rolling(window=self.atr_period).std().iloc[-1] * np.sqrt(1440)  # Annualized
            
            # 3. Implied Volatility (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏à‡∏≤‡∏Å Bollinger Bands)
            bb_middle = df['close'].rolling(window=self.bb_period).mean()
            bb_std = df['close'].rolling(window=self.bb_period).std()
            bb_width = (bb_std * self.bb_std * 2) / bb_middle
            implied_vol = bb_width.iloc[-1] * 100  # ‡πÄ‡∏õ‡πá‡∏ô %
            
            # 4. Volatility Percentile
            recent_vol = true_range.rolling(window=self.atr_period).mean()
            vol_percentile = (recent_vol.iloc[-1] <= recent_vol.tail(self.volatility_lookback)).mean()
            
            # 5. Intraday Range
            if len(df) >= 24:  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 24 periods (2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö M5)
                recent_24 = df.tail(24)
                intraday_range = (recent_24['high'].max() - recent_24['low'].min()) * 10  # pips
            else:
                intraday_range = atr_pips * 2
            
            # 6. Hourly Volatility
            if len(df) >= 12:  # 12 periods = 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (M5)
                hourly_data = df.tail(12)
                hourly_vol = (hourly_data['high'].max() - hourly_data['low'].min()) * 10  # pips
            else:
                hourly_vol = atr_pips
            
            return VolatilityMeasurement(
                atr_value=atr_value,
                atr_pips=atr_pips,
                realized_volatility=realized_vol,
                implied_volatility=implied_vol,
                volatility_percentile=vol_percentile,
                intraday_range=intraday_range,
                hourly_volatility=hourly_vol
            )
            
        except Exception as e:
            print(f"‚ùå Volatility measurements calculation error: {e}")
            return VolatilityMeasurement(
                atr_value=0.5, atr_pips=5.0, realized_volatility=0.01,
                implied_volatility=1.0, volatility_percentile=0.5,
                intraday_range=20.0, hourly_volatility=10.0
            )
    
    def _classify_volatility_level(self, measurements: VolatilityMeasurement) -> VolatilityLevel:
        """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
        try:
            atr_pips = measurements.atr_pips
            
            if atr_pips < self.thresholds['extremely_low']:
                return VolatilityLevel.EXTREMELY_LOW
            elif atr_pips < self.thresholds['low']:
                return VolatilityLevel.LOW
            elif atr_pips < self.thresholds['moderate']:
                return VolatilityLevel.MODERATE
            elif atr_pips < self.thresholds['high']:
                return VolatilityLevel.HIGH
            else:
                return VolatilityLevel.EXTREMELY_HIGH
                
        except Exception as e:
            print(f"‚ùå Volatility level classification error: {e}")
            return VolatilityLevel.MODERATE
    
    def _analyze_volatility_trend(self, market_data: pd.DataFrame, 
                                measurements: VolatilityMeasurement) -> VolatilityTrend:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
        try:
            if len(market_data) < 30:
                return VolatilityTrend.STABLE
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ATR ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
            df = market_data.copy()
            
            high_low = df['high'] - df['low']
            high_close = abs(df['high'] - df['close'].shift(1))
            low_close = abs(df['low'] - df['close'].shift(1))
            
            true_range = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
            atr_series = true_range.rolling(window=self.atr_period).mean()
            
            # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ATR ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏≠‡∏î‡∏µ‡∏ï
            current_atr = atr_series.iloc[-1]
            past_atr_short = atr_series.iloc[-10:-1].mean()  # 10 periods ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
            past_atr_long = atr_series.iloc[-20:-10].mean()   # 20-10 periods ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            short_change = (current_atr - past_atr_short) / past_atr_short
            long_change = (past_atr_short - past_atr_long) / past_atr_long
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
            if short_change > 0.1 and long_change > 0.05:
                return VolatilityTrend.INCREASING
            elif short_change < -0.1 and long_change < -0.05:
                return VolatilityTrend.DECREASING
            elif abs(short_change) > 0.15 or abs(long_change) > 0.15:
                return VolatilityTrend.VOLATILE
            else:
                return VolatilityTrend.STABLE
                
        except Exception as e:
            print(f"‚ùå Volatility trend analysis error: {e}")
            return VolatilityTrend.STABLE
    
    def _classify_volatility_regime(self, market_data: pd.DataFrame, 
                                  measurements: VolatilityMeasurement) -> VolatilityRegime:
        """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
        try:
            # ‡πÉ‡∏ä‡πâ percentile ‡πÅ‡∏•‡∏∞ absolute level
            vol_percentile = measurements.volatility_percentile
            atr_pips = measurements.atr_pips
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏∞‡∏ö‡∏≠‡∏ö
            regime_score = 0
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° percentile
            if vol_percentile > 0.8:
                regime_score += 2  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡∏°‡∏≤‡∏Å
            elif vol_percentile > 0.6:
                regime_score += 1  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
            elif vol_percentile < 0.2:
                regime_score -= 1  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° absolute level
            if atr_pips > 70:
                regime_score += 2
            elif atr_pips > 40:
                regime_score += 1
            elif atr_pips < 15:
                regime_score -= 1
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° intraday range
            if measurements.intraday_range > atr_pips * 5:
                regime_score += 1  # ‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏ö
            if regime_score >= 4:
                return VolatilityRegime.CRISIS
            elif regime_score >= 2:
                return VolatilityRegime.TURBULENT
            elif regime_score <= -1:
                return VolatilityRegime.CALM
            else:
                return VolatilityRegime.NORMAL
                
        except Exception as e:
            print(f"‚ùå Volatility regime classification error: {e}")
            return VolatilityRegime.NORMAL
    
    def _predict_price_range(self, market_data: pd.DataFrame, hours_ahead: int) -> Tuple[float, float]:
        """‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï"""
        try:
            current_price = market_data['close'].iloc[-1]
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ATR
            df = market_data.copy()
            high_low = df['high'] - df['low']
            high_close = abs(df['high'] - df['close'].shift(1))
            low_close = abs(df['low'] - df['close'].shift(1))
            
            true_range = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
            atr = true_range.rolling(window=self.atr_period).mean().iloc[-1]
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì expected range
            # ‡πÉ‡∏ä‡πâ square root rule ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö time scaling
            time_multiplier = np.sqrt(hours_ahead / 24)  # scale ‡∏à‡∏≤‡∏Å daily
            expected_range = atr * time_multiplier * 2  # ¬±2 ATR
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volatility regime ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if hasattr(self, 'last_analysis') and self.last_analysis:
                regime = self.last_analysis.regime
                if regime == VolatilityRegime.CRISIS:
                    expected_range *= 1.5
                elif regime == VolatilityRegime.TURBULENT:
                    expected_range *= 1.2
                elif regime == VolatilityRegime.CALM:
                    expected_range *= 0.7
            
            lower_bound = current_price - expected_range
            upper_bound = current_price + expected_range
            
            return (lower_bound, upper_bound)
            
        except Exception as e:
            print(f"‚ùå Price range prediction error: {e}")
            current_price = market_data['close'].iloc[-1]
            default_range = current_price * 0.01  # 1%
            return (current_price - default_range, current_price + default_range)
    
    def _calculate_breakout_probability(self, market_data: pd.DataFrame, 
                                      measurements: VolatilityMeasurement) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á breakout"""
        try:
            probability = 0.3  # base probability
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            atr_pips = measurements.atr_pips
            if atr_pips > 50:
                probability += 0.3
            elif atr_pips > 30:
                probability += 0.2
            elif atr_pips < 15:
                probability -= 0.2
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volatility percentile
            vol_percentile = measurements.volatility_percentile
            if vol_percentile > 0.8:
                probability += 0.2
            elif vol_percentile < 0.3:
                probability -= 0.1
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° price compression
            if len(market_data) >= 20:
                recent_range = market_data['high'].tail(20).max() - market_data['low'].tail(20).min()
                avg_range = measurements.atr_value * 20
                
                compression_ratio = recent_range / avg_range
                if compression_ratio < 0.7:  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏µ‡∏ö‡∏ï‡∏±‡∏ß
                    probability += 0.2
                elif compression_ratio > 1.5:  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢
                    probability -= 0.1
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volume (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if 'volume' in market_data.columns:
                recent_volume = market_data['volume'].tail(10).mean()
                avg_volume = market_data['volume'].tail(50).mean()
                
                if recent_volume > avg_volume * 1.5:
                    probability += 0.1
            
            return max(0.05, min(probability, 0.95))
            
        except Exception as e:
            print(f"‚ùå Breakout probability calculation error: {e}")
            return 0.3
    
    def _recommend_strategies(self, level: VolatilityLevel, trend: VolatilityTrend, 
                            regime: VolatilityRegime) -> List[str]:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
        try:
            strategies = []
            
            # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            if level == VolatilityLevel.EXTREMELY_LOW:
                strategies.extend(["scalping", "mean_reversion", "range_trading"])
            elif level == VolatilityLevel.LOW:
                strategies.extend(["mean_reversion", "martingale_smart", "grid_small"])
            elif level == VolatilityLevel.MODERATE:
                strategies.extend(["trend_following", "grid_intelligent", "breakout"])
            elif level == VolatilityLevel.HIGH:
                strategies.extend(["trend_following", "momentum", "false_breakout"])
            else:  # EXTREMELY_HIGH
                strategies.extend(["trend_following", "momentum", "hedge"])
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° trend
            if trend == VolatilityTrend.INCREASING:
                strategies.insert(0, "volatility_breakout")
            elif trend == VolatilityTrend.DECREASING:
                strategies.insert(0, "mean_reversion")
            elif trend == VolatilityTrend.VOLATILE:
                strategies.insert(0, "adaptive_hedge")
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° regime
            if regime == VolatilityRegime.CRISIS:
                strategies = ["hedge", "correlation", "safe_haven"]
            elif regime == VolatilityRegime.TURBULENT:
                strategies.insert(0, "volatility_trading")
            elif regime == VolatilityRegime.CALM:
                strategies.extend(["carry_trade", "accumulation"])
            
            # ‡∏•‡∏ö strategies ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            unique_strategies = []
            for strategy in strategies:
                if strategy not in unique_strategies:
                    unique_strategies.append(strategy)
                if len(unique_strategies) >= 5:
                    break
            
            return unique_strategies
            
        except Exception as e:
            print(f"‚ùå Strategy recommendation error: {e}")
            return ["mean_reversion", "trend_following"]
    
    def _calculate_risk_adjustment(self, level: VolatilityLevel, regime: VolatilityRegime) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö risk"""
        try:
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            level_adjustments = {
                VolatilityLevel.EXTREMELY_LOW: 1.2,   # ‡πÄ‡∏û‡∏¥‡πà‡∏° risk ‡πÑ‡∏î‡πâ
                VolatilityLevel.LOW: 1.1,
                VolatilityLevel.MODERATE: 1.0,        # baseline
                VolatilityLevel.HIGH: 0.8,            # ‡∏•‡∏î risk
                VolatilityLevel.EXTREMELY_HIGH: 0.6
            }
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° regime
            regime_adjustments = {
                VolatilityRegime.CALM: 1.1,
                VolatilityRegime.NORMAL: 1.0,
                VolatilityRegime.TURBULENT: 0.8,
                VolatilityRegime.CRISIS: 0.5
            }
            
            level_adj = level_adjustments.get(level, 1.0)
            regime_adj = regime_adjustments.get(regime, 1.0)
            
            # ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö
            combined_adjustment = level_adj * regime_adj
            
            return max(0.3, min(combined_adjustment, 2.0))
            
        except Exception as e:
            print(f"‚ùå Risk adjustment calculation error: {e}")
            return 1.0
    
    def _calculate_position_multiplier(self, level: VolatilityLevel, 
                                     trend: VolatilityTrend) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì position sizing"""
        try:
            # ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            base_multipliers = {
                VolatilityLevel.EXTREMELY_LOW: 1.5,   # ‡πÄ‡∏û‡∏¥‡πà‡∏° position ‡πÑ‡∏î‡πâ
                VolatilityLevel.LOW: 1.2,
                VolatilityLevel.MODERATE: 1.0,        # baseline
                VolatilityLevel.HIGH: 0.8,            # ‡∏•‡∏î position
                VolatilityLevel.EXTREMELY_HIGH: 0.6
            }
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° trend
            trend_adjustments = {
                VolatilityTrend.STABLE: 1.1,          # ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ
                VolatilityTrend.INCREASING: 0.9,      # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô ‡∏£‡∏∞‡∏ß‡∏±‡∏á
                VolatilityTrend.DECREASING: 1.0,      # ‡∏•‡∏î‡∏•‡∏á ‡∏õ‡∏Å‡∏ï‡∏¥
                VolatilityTrend.VOLATILE: 0.7         # ‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏°‡∏≤‡∏Å
            }
            
            base_mult = base_multipliers.get(level, 1.0)
            trend_mult = trend_adjustments.get(trend, 1.0)
            
            return max(0.3, min(base_mult * trend_mult, 2.0))
            
        except Exception as e:
            print(f"‚ùå Position multiplier calculation error: {e}")
            return 1.0
    
    def _calculate_analysis_confidence(self, market_data: pd.DataFrame, 
                                     measurements: VolatilityMeasurement) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            confidence = 0.7  # base confidence
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            data_length = len(market_data)
            if data_length >= self.volatility_lookback:
                confidence += 0.2
            elif data_length >= self.atr_period * 2:
                confidence += 0.1
            else:
                confidence -= 0.2
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volatility percentile (‡∏¢‡∏¥‡πà‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô)
            vol_percentile = measurements.volatility_percentile
            percentile_confidence = 1 - abs(vol_percentile - 0.5) * 2
            confidence += percentile_confidence * 0.15
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á measurements
            atr_normalized = measurements.atr_pips / 30  # normalize to ~30 pips
            hourly_normalized = measurements.hourly_volatility / 30
            
            consistency = 1 - abs(atr_normalized - hourly_normalized)
            confidence += consistency * 0.1
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            if self.analysis_count > 10:
                confidence += 0.05
            
            return max(0.3, min(confidence, 0.95))
            
        except Exception as e:
            print(f"‚ùå Analysis confidence calculation error: {e}")
            return 0.7
    
    def _cache_analysis(self, analysis: VolatilityAnalysis):
        """Cache ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            self.last_analysis = analysis
            self.last_analysis_time = analysis.analysis_time
            self.analysis_count += 1
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            self.volatility_history.append({
                'timestamp': analysis.analysis_time,
                'level': analysis.current_level.value,
                'atr_pips': analysis.measurements.atr_pips,
                'regime': analysis.regime.value
            })
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô regime
            if len(self.regime_history) > 0:
                if self.regime_history[-1]['regime'] != analysis.regime.value:
                    self.regime_changes += 1
            
            self.regime_history.append({
                'timestamp': analysis.analysis_time,
                'regime': analysis.regime.value,
                'level': analysis.current_level.value
            })
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            if len(self.volatility_history) > 1000:
                self.volatility_history = self.volatility_history[-500:]
            
            if len(self.regime_history) > 1000:
                self.regime_history = self.regime_history[-500:]
                
        except Exception as e:
            print(f"‚ùå Analysis caching error: {e}")
    
    def _create_default_analysis(self) -> VolatilityAnalysis:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á analysis ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        default_measurements = VolatilityMeasurement(
            atr_value=0.5, atr_pips=20.0, realized_volatility=0.02,
            implied_volatility=2.0, volatility_percentile=0.5,
            intraday_range=40.0, hourly_volatility=15.0
        )
        
        return VolatilityAnalysis(
            current_level=VolatilityLevel.MODERATE,
            trend=VolatilityTrend.STABLE,
            regime=VolatilityRegime.NORMAL,
            measurements=default_measurements,
            expected_range_next_hour=(1990.0, 2010.0),
            expected_range_next_4hours=(1980.0, 2020.0),
            breakout_probability=0.3,
            optimal_strategies=["mean_reversion", "trend_following"],
            risk_adjustment=1.0,
            position_sizing_multiplier=1.0,
            confidence=0.5,
            analysis_time=datetime.now()
        )
    
    def get_volatility_summary(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
        try:
            if not self.last_analysis:
                return {'status': 'No analysis available'}
            
            analysis = self.last_analysis
            measurements = analysis.measurements
            
            return {
                'current_level': analysis.current_level.value,
                'atr_pips': f"{measurements.atr_pips:.1f}",
                'trend': analysis.trend.value,
                'regime': analysis.regime.value,
                'volatility_percentile': f"{measurements.volatility_percentile*100:.1f}%",
                'hourly_volatility': f"{measurements.hourly_volatility:.1f} pips",
                'intraday_range': f"{measurements.intraday_range:.1f} pips",
                'breakout_probability': f"{analysis.breakout_probability*100:.1f}%",
                'risk_adjustment': f"{analysis.risk_adjustment:.2f}x",
                'position_multiplier': f"{analysis.position_sizing_multiplier:.2f}x",
                'confidence': f"{analysis.confidence*100:.1f}%",
                'optimal_strategies': analysis.optimal_strategies[:3],
                'last_analysis': analysis.analysis_time.strftime("%H:%M:%S")
            }
            
        except Exception as e:
            print(f"‚ùå Volatility summary error: {e}")
            return {'error': str(e)}
    
    def get_volatility_forecast(self, hours_ahead: int = 4) -> List[Dict]:
        """
        üîÆ ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        
        Args:
            hours_ahead: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
            
        Returns:
            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
        """
        try:
            if not self.last_analysis:
                return []
            
            forecasts = []
            current_analysis = self.last_analysis
            
            for hour in range(1, hours_ahead + 1):
                # ‡πÉ‡∏ä‡πâ simple persistence model ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á
                forecast_time = datetime.now() + timedelta(hours=hour)
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î)
                hour_of_day = forecast_time.hour
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô (GMT+7)
                if 22 <= hour_of_day or hour_of_day <= 8:  # Asian session
                    vol_multiplier = 0.7
                    expected_level = "low"
                elif 15 <= hour_of_day <= 24:  # London session
                    vol_multiplier = 1.3
                    expected_level = "high"
                elif 20 <= hour_of_day <= 5:  # NY session
                    vol_multiplier = 1.4
                    expected_level = "high"
                else:  # Quiet period
                    vol_multiplier = 0.5
                    expected_level = "low"
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                if current_analysis.trend == VolatilityTrend.INCREASING:
                    vol_multiplier *= 1.1
                elif current_analysis.trend == VolatilityTrend.DECREASING:
                    vol_multiplier *= 0.9
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì expected ATR
                expected_atr = current_analysis.measurements.atr_pips * vol_multiplier
                
                # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö
                if expected_atr < 15:
                    expected_level = "low"
                elif expected_atr < 30:
                    expected_level = "moderate"
                else:
                    expected_level = "high"
                
                forecast = {
                    'hour': hour,
                    'time': forecast_time.strftime("%H:%M"),
                    'expected_level': expected_level,
                    'expected_atr_pips': f"{expected_atr:.1f}",
                    'volatility_multiplier': f"{vol_multiplier:.2f}",
                    'recommended_strategies': self._get_strategies_for_level(expected_level)
                }
                
                forecasts.append(forecast)
            
            return forecasts
            
        except Exception as e:
            print(f"‚ùå Volatility forecast error: {e}")
            return []
    
    def _get_strategies_for_level(self, level_str: str) -> List[str]:
        """‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô"""
        strategy_map = {
            'low': ['mean_reversion', 'scalping', 'range_trading'],
            'moderate': ['trend_following', 'grid_intelligent', 'breakout'],
            'high': ['momentum', 'trend_following', 'volatility_breakout']
        }
        return strategy_map.get(level_str, ['mean_reversion'])
    
    def compare_volatility_regimes(self, lookback_hours: int = 24) -> Dict:
        """
        üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö volatility regimes ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
        
        Args:
            lookback_hours: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            
        Returns:
            ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö regimes
        """
        try:
            if not self.regime_history:
                return {'status': 'No regime history available'}
            
            # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
            cutoff_time = datetime.now() - timedelta(hours=lookback_hours)
            recent_regimes = [
                r for r in self.regime_history 
                if r['timestamp'] >= cutoff_time
            ]
            
            if not recent_regimes:
                return {'status': 'No recent regime data'}
            
            # ‡∏ô‡∏±‡∏ö regimes
            regime_counts = {}
            level_counts = {}
            
            for record in recent_regimes:
                regime = record['regime']
                level = record['level']
                
                regime_counts[regime] = regime_counts.get(regime, 0) + 1
                level_counts[level] = level_counts.get(level, 0) + 1
            
            # ‡∏´‡∏≤ regime ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            most_common_regime = max(regime_counts, key=regime_counts.get) if regime_counts else 'normal'
            most_common_level = max(level_counts, key=level_counts.get) if level_counts else 'moderate'
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏†‡∏≤‡∏û
            total_records = len(recent_regimes)
            regime_stability = max(regime_counts.values()) / total_records if total_records > 0 else 0
            
            return {
                'lookback_hours': lookback_hours,
                'total_observations': total_records,
                'regime_distribution': regime_counts,
                'level_distribution': level_counts,
                'most_common_regime': most_common_regime,
                'most_common_level': most_common_level,
                'regime_stability': f"{regime_stability*100:.1f}%",
                'regime_changes': self.regime_changes,
                'analysis_count': self.analysis_count
            }
            
        except Exception as e:
            print(f"‚ùå Regime comparison error: {e}")
            return {'error': str(e)}
    
    def get_trading_recommendations(self) -> Dict:
        """
        üí° ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        
        Returns:
            ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°
        """
        try:
            if not self.last_analysis:
                return {'status': 'No analysis available for recommendations'}
            
            analysis = self.last_analysis
            
            # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            strategy_recommendations = {
                'primary_strategies': analysis.optimal_strategies[:2],
                'secondary_strategies': analysis.optimal_strategies[2:4],
                'avoid_strategies': self._get_strategies_to_avoid(analysis)
            }
            
            # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Risk Management
            risk_recommendations = {
                'position_size_adjustment': f"{analysis.position_sizing_multiplier:.2f}x",
                'risk_per_trade_adjustment': f"{analysis.risk_adjustment:.2f}x",
                'max_positions_recommended': self._get_max_positions_recommendation(analysis),
                'stop_loss_adjustment': self._get_stop_loss_recommendation(analysis)
            }
            
            # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Entry/Exit
            entry_recommendations = {
                'entry_timing': self._get_entry_timing_advice(analysis),
                'exit_timing': self._get_exit_timing_advice(analysis),
                'breakout_watch': f"{analysis.breakout_probability*100:.1f}% probability",
                'range_expectation': f"{analysis.expected_range_next_hour[0]:.2f} - {analysis.expected_range_next_hour[1]:.2f}"
            }
            
            # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
            general_advice = self._get_general_advice(analysis)
            
            return {
                'analysis_timestamp': analysis.analysis_time.strftime("%Y-%m-%d %H:%M:%S"),
                'current_volatility': analysis.current_level.value,
                'volatility_regime': analysis.regime.value,
                'confidence_level': f"{analysis.confidence*100:.1f}%",
                'strategy_recommendations': strategy_recommendations,
                'risk_management': risk_recommendations,
                'entry_exit_guidance': entry_recommendations,
                'general_advice': general_advice
            }
            
        except Exception as e:
            print(f"‚ùå Trading recommendations error: {e}")
            return {'error': str(e)}
    
    def _get_strategies_to_avoid(self, analysis: VolatilityAnalysis) -> List[str]:
        """‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á"""
        avoid_strategies = []
        
        if analysis.current_level == VolatilityLevel.EXTREMELY_HIGH:
            avoid_strategies.extend(['scalping', 'range_trading', 'mean_reversion'])
        elif analysis.current_level == VolatilityLevel.EXTREMELY_LOW:
            avoid_strategies.extend(['momentum', 'breakout', 'trend_following'])
        
        if analysis.regime == VolatilityRegime.CRISIS:
            avoid_strategies.extend(['carry_trade', 'grid_trading'])
        elif analysis.regime == VolatilityRegime.CALM:
            avoid_strategies.extend(['volatility_trading', 'momentum'])
        
        return list(set(avoid_strategies))  # ‡∏•‡∏ö duplicates
    
    def _get_max_positions_recommendation(self, analysis: VolatilityAnalysis) -> int:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≥‡∏ô‡∏ß‡∏ô positions ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"""
        base_positions = 5
        
        if analysis.regime == VolatilityRegime.CRISIS:
            return max(1, int(base_positions * 0.4))
        elif analysis.regime == VolatilityRegime.TURBULENT:
            return max(2, int(base_positions * 0.6))
        elif analysis.regime == VolatilityRegime.CALM:
            return int(base_positions * 1.5)
        else:
            return base_positions
    
    def _get_stop_loss_recommendation(self, analysis: VolatilityAnalysis) -> str:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö Stop Loss"""
        atr_pips = analysis.measurements.atr_pips
        
        if analysis.current_level == VolatilityLevel.EXTREMELY_HIGH:
            return f"Widen stops to {atr_pips * 2.5:.1f} pips (2.5x ATR)"
        elif analysis.current_level == VolatilityLevel.HIGH:
            return f"Widen stops to {atr_pips * 2:.1f} pips (2x ATR)"
        elif analysis.current_level == VolatilityLevel.LOW:
            return f"Tighten stops to {atr_pips * 1.2:.1f} pips (1.2x ATR)"
        else:
            return f"Standard stops at {atr_pips * 1.5:.1f} pips (1.5x ATR)"
    
    def _get_entry_timing_advice(self, analysis: VolatilityAnalysis) -> str:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ timing ‡∏Å‡∏≤‡∏£ entry"""
        if analysis.trend == VolatilityTrend.INCREASING:
            return "Wait for volatility expansion confirmation before entering"
        elif analysis.trend == VolatilityTrend.DECREASING:
            return "Good time for range-based entries as volatility contracts"
        elif analysis.breakout_probability > 0.7:
            return "High breakout probability - consider breakout strategies"
        else:
            return "Standard entry timing - follow your strategy signals"
    
    def _get_exit_timing_advice(self, analysis: VolatilityAnalysis) -> str:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ timing ‡∏Å‡∏≤‡∏£ exit"""
        if analysis.regime == VolatilityRegime.CRISIS:
            return "Consider quick exits - market regime is unstable"
        elif analysis.current_level == VolatilityLevel.EXTREMELY_HIGH:
            return "Take profits quickly in high volatility environment"
        elif analysis.current_level == VolatilityLevel.LOW:
            return "Can hold positions longer in low volatility conditions"
        else:
            return "Standard exit timing based on your strategy"
    
    def _get_general_advice(self, analysis: VolatilityAnalysis) -> List[str]:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        advice = []
        
        if analysis.confidence < 0.6:
            advice.append("‚ö†Ô∏è Low confidence analysis - trade with extra caution")
        
        if analysis.regime == VolatilityRegime.CRISIS:
            advice.append("üö® Crisis regime detected - focus on capital preservation")
        
        if analysis.breakout_probability > 0.8:
            advice.append("üìà High breakout probability - prepare for significant moves")
        
        if analysis.current_level == VolatilityLevel.EXTREMELY_LOW:
            advice.append("üò¥ Very quiet market - consider lower position sizes")
        
        if analysis.trend == VolatilityTrend.VOLATILE:
            advice.append("üå™Ô∏è Volatile volatility trend - expect unexpected moves")
        
        return advice

def main():
    """Test the Volatility Engine"""
    print("üß™ Testing Volatility Engine...")
    
    # Sample configuration
    config = {
        'atr_period': 14,
        'volatility_lookback': 100,
        'regime_lookback': 50,
        'extremely_low_threshold': 10,
        'low_threshold': 20,
        'moderate_threshold': 40,
        'high_threshold': 70,
        'bb_period': 20,
        'bb_std': 2.0
    }
    
    # Initialize volatility engine
    vol_engine = VolatilityEngine(config)
    
    # Generate sample market data
    dates = pd.date_range(start='2024-01-01', periods=200, freq='5min')
    np.random.seed(42)
    
    # Create market data with varying volatility
    base_price = 2000
    volatility = np.random.uniform(0.5, 2.0, 200)  # Varying volatility
    prices = [base_price]
    
    for i in range(1, 200):
        change = np.random.normal(0, volatility[i] * 0.1)
        new_price = prices[-1] * (1 + change/100)
        prices.append(new_price)
    
    prices = np.array(prices)
    
    # Create OHLCV data
    sample_data = pd.DataFrame({
        'timestamp': dates,
        'open': prices,
        'high': prices * (1 + np.random.uniform(0, 0.002, 200)),
        'low': prices * (1 - np.random.uniform(0, 0.002, 200)),
        'close': prices + np.random.normal(0, 0.5, 200),
        'volume': np.random.randint(100, 1000, 200)
    })
    
    # Test volatility analysis
    analysis = vol_engine.analyze_volatility(sample_data)
    print(f"\nüìä Volatility Analysis:")
    print(f"   Current Level: {analysis.current_level.value}")
    print(f"   Trend: {analysis.trend.value}")
    print(f"   Regime: {analysis.regime.value}")
    print(f"   ATR (pips): {analysis.measurements.atr_pips:.1f}")
    print(f"   Breakout Probability: {analysis.breakout_probability*100:.1f}%")
    print(f"   Risk Adjustment: {analysis.risk_adjustment:.2f}x")
    print(f"   Position Multiplier: {analysis.position_sizing_multiplier:.2f}x")
    print(f"   Confidence: {analysis.confidence*100:.1f}%")
    
    # Test volatility summary
    summary = vol_engine.get_volatility_summary()
    print(f"\nüìã Volatility Summary:")
    for key, value in summary.items():
        if key != 'optimal_strategies':
            print(f"   {key}: {value}")
    
    # Test forecast
    forecasts = vol_engine.get_volatility_forecast(4)
    print(f"\nüîÆ Volatility Forecast:")
    for forecast in forecasts:
        print(f"   Hour {forecast['hour']} ({forecast['time']}): {forecast['expected_level']} "
                f"({forecast['expected_atr_pips']} pips)")
    
    # Test trading recommendations
    recommendations = vol_engine.get_trading_recommendations()
    print(f"\nüí° Trading Recommendations:")
    print(f"   Current Volatility: {recommendations['current_volatility']}")
    print(f"   Primary Strategies: {', '.join(recommendations['strategy_recommendations']['primary_strategies'])}")
    print(f"   Position Size Adjustment: {recommendations['risk_management']['position_size_adjustment']}")
    print(f"   General Advice: {len(recommendations['general_advice'])} recommendations")
    
    print("\n‚úÖ Volatility Engine test completed")

if __name__ == "__main__":
   main()
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
REAL MARKET ANALYZER - Intelligent Market Analysis System (LIVE ONLY)
====================================================================
‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Live Trading ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
‡πÑ‡∏°‡πà‡∏°‡∏µ Mock ‡∏´‡∏£‡∏∑‡∏≠ Simulation ‡πÉ‡∏î‡πÜ - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MT5

üéØ ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î XAUUSD ‡πÅ‡∏ö‡∏ö Real-time
- ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MT5 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Market Condition ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ Strategy ‡πÅ‡∏•‡∏∞ Recovery Method
- Multi-timeframe Analysis (M1, M5, M15, H1)
"""

import MetaTrader5 as mt5
import pandas as pd
import numpy as np
import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, field
from enum import Enum
import json
from collections import deque, defaultdict

# Internal imports
from config.settings import get_system_settings
from config.trading_params import get_trading_parameters, EntryStrategy, RecoveryMethod, MarketCondition, SessionType
from utilities.professional_logger import setup_component_logger
from utilities.error_handler import handle_trading_errors, ErrorCategory, ErrorSeverity

class AnalysisStatus(Enum):
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
    STOPPED = "STOPPED"
    STARTING = "STARTING"
    RUNNING = "RUNNING"
    ERROR = "ERROR"

@dataclass
class MarketData:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö Real-time"""
    symbol: str
    timeframe: str
    timestamp: datetime
    open: float
    high: float
    low: float
    close: float
    volume: int
    bid: float
    ask: float
    spread: float

@dataclass
class TechnicalIndicators:
    """‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ"""
    sma_20: float = 0.0
    sma_50: float = 0.0
    ema_12: float = 0.0
    ema_26: float = 0.0
    rsi_14: float = 0.0
    adx_14: float = 0.0
    atr_14: float = 0.0
    bb_upper: float = 0.0
    bb_middle: float = 0.0
    bb_lower: float = 0.0
    macd_main: float = 0.0
    macd_signal: float = 0.0
    stoch_k: float = 0.0
    stoch_d: float = 0.0

@dataclass
class MarketAnalysis:
    """‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î"""
    timestamp: datetime
    symbol: str
    current_price: float
    condition: MarketCondition
    session: SessionType
    trend_strength: float  # 0.0-1.0
    volatility_level: float  # 0.0-1.0
    recommended_strategy: EntryStrategy
    recommended_recovery: RecoveryMethod
    confidence_score: float  # 0.0-1.0
    technical_indicators: TechnicalIndicators
    market_data: Dict[str, MarketData]
    notes: str = ""

class RealMarketAnalyzer:
    """Real Market Analyzer - ‡πÑ‡∏°‡πà‡∏°‡∏µ Mock"""
    
    def __init__(self):
        self.logger = setup_component_logger("RealMarketAnalyzer")
        self.settings = get_system_settings()
        self.trading_params = get_trading_parameters()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MT5 connection
        if not mt5.initialize():
            raise RuntimeError("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ - ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        
        self.logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á")
        
        # Analysis state
        self.status = AnalysisStatus.STOPPED
        self.analysis_thread: Optional[threading.Thread] = None
        self.stop_event = threading.Event()
        
        # Data storage
        self.market_data: Dict[str, deque] = defaultdict(lambda: deque(maxlen=1000))
        self.current_analysis: Optional[MarketAnalysis] = None
        self.analysis_lock = threading.Lock()
        
        # Callbacks
        self.analysis_callbacks: List[callable] = []
        
        # Symbol - ‡πÉ‡∏ä‡πâ Auto-detected Gold Symbol
        from config.trading_params import get_current_gold_symbol
        self.symbol = get_current_gold_symbol()
        self.timeframes = ["M1", "M5", "M15", "H1"]
        
        # Verify symbol
        symbol_info = mt5.symbol_info(self.symbol)
        if symbol_info is None:
            raise RuntimeError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Symbol {self.symbol} ‡πÉ‡∏ô MT5")
        
        if not symbol_info.visible:
            if not mt5.symbol_select(self.symbol, True):
                raise RuntimeError(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Symbol {self.symbol}")
        
        self.logger.info(f"‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Symbol {self.symbol} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    @handle_trading_errors(ErrorCategory.MARKET_DATA, ErrorSeverity.HIGH)
    def start_analysis(self) -> bool:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î"""
        if self.status == AnalysisStatus.RUNNING:
            self.logger.warning("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return True
        
        try:
            self.status = AnalysisStatus.STARTING
            self.stop_event.clear()
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° analysis thread
            self.analysis_thread = threading.Thread(
                target=self._analysis_loop,
                name="MarketAnalysisThread",
                daemon=True
            )
            self.analysis_thread.start()
            
            self.status = AnalysisStatus.RUNNING
            self.logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö Real-time")
            return True
            
        except Exception as e:
            self.status = AnalysisStatus.ERROR
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {e}")
            return False
    
    def stop_analysis(self) -> bool:
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            self.stop_event.set()
            self.status = AnalysisStatus.STOPPED
            
            if self.analysis_thread and self.analysis_thread.is_alive():
                self.analysis_thread.join(timeout=5.0)
            
            self.logger.info("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {e}")
            return False
    
    def _analysis_loop(self):
        """Loop ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        self.logger.info("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Analysis Loop")
        
        while not self.stop_event.is_set():
            try:
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å MT5
                market_data = self._get_real_market_data()
                if not market_data:
                    time.sleep(1)
                    continue
                
                # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                analysis = self._analyze_market_data(market_data)
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                with self.analysis_lock:
                    self.current_analysis = analysis
                
                # ‡πÅ‡∏à‡πâ‡∏á callbacks
                self._notify_callbacks(analysis)
                
                # Log ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                self._log_analysis_result(analysis)
                
                # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
                time.sleep(5)  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Analysis Loop: {e}")
                time.sleep(10)  # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    
    @handle_trading_errors(ErrorCategory.MARKET_DATA, ErrorSeverity.MEDIUM)
    def _get_real_market_data(self) -> Optional[Dict[str, MarketData]]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MT5"""
        try:
            market_data = {}
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ timeframe
            for tf in self.timeframes:
                # ‡πÅ‡∏õ‡∏•‡∏á timeframe ‡πÄ‡∏õ‡πá‡∏ô MT5 constant
                mt5_tf = self._get_mt5_timeframe(tf)
                if mt5_tf is None:
                    continue
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rates
                rates = mt5.copy_rates_from_pos(self.symbol, mt5_tf, 0, 100)
                if rates is None or len(rates) == 0:
                    self.logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {tf} ‡πÑ‡∏î‡πâ")
                    continue
                
                # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tick ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                tick = mt5.symbol_info_tick(self.symbol)
                if tick is None:
                    self.logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á tick ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
                    continue
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á MarketData object
                latest_rate = rates[-1]
                market_data[tf] = MarketData(
                    symbol=self.symbol,
                    timeframe=tf,
                    timestamp=datetime.fromtimestamp(latest_rate['time']),
                    open=float(latest_rate['open']),
                    high=float(latest_rate['high']),
                    low=float(latest_rate['low']),
                    close=float(latest_rate['close']),
                    volume=int(latest_rate['tick_volume']),
                    bid=float(tick.bid),
                    ask=float(tick.ask),
                    spread=float(tick.ask - tick.bid)
                )
                
                # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô deque
                self.market_data[tf].append(market_data[tf])
            
            return market_data if market_data else None
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î: {e}")
            return None
    
    def _get_mt5_timeframe(self, timeframe: str):
        """‡πÅ‡∏õ‡∏•‡∏á timeframe string ‡πÄ‡∏õ‡πá‡∏ô MT5 constant"""
        tf_map = {
            "M1": mt5.TIMEFRAME_M1,
            "M5": mt5.TIMEFRAME_M5,
            "M15": mt5.TIMEFRAME_M15,
            "H1": mt5.TIMEFRAME_H1,
            "H4": mt5.TIMEFRAME_H4,
            "D1": mt5.TIMEFRAME_D1
        }
        return tf_map.get(timeframe)
    
    @handle_trading_errors(ErrorCategory.TRADING_LOGIC, ErrorSeverity.MEDIUM)
    def _calculate_technical_indicators(self, rates_data: np.ndarray) -> TechnicalIndicators:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
        try:
            df = pd.DataFrame(rates_data)
            close_prices = df['close'].astype(float)
            high_prices = df['high'].astype(float)
            low_prices = df['low'].astype(float)
            
            indicators = TechnicalIndicators()
            
            # Moving Averages
            if len(close_prices) >= 50:
                indicators.sma_20 = float(close_prices.rolling(20).mean().iloc[-1])
                indicators.sma_50 = float(close_prices.rolling(50).mean().iloc[-1])
            
            if len(close_prices) >= 26:
                indicators.ema_12 = float(close_prices.ewm(span=12).mean().iloc[-1])
                indicators.ema_26 = float(close_prices.ewm(span=26).mean().iloc[-1])
            
            # RSI
            if len(close_prices) >= 14:
                delta = close_prices.diff()
                gain = (delta.where(delta > 0, 0)).rolling(14).mean()
                loss = (-delta.where(delta < 0, 0)).rolling(14).mean()
                rs = gain / loss
                indicators.rsi_14 = float(100 - (100 / (1 + rs.iloc[-1])))
            
            # ATR
            if len(close_prices) >= 14:
                tr1 = high_prices - low_prices
                tr2 = abs(high_prices - close_prices.shift(1))
                tr3 = abs(low_prices - close_prices.shift(1))
                tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
                indicators.atr_14 = float(tr.rolling(14).mean().iloc[-1])
            
            # Bollinger Bands
            if len(close_prices) >= 20:
                sma_20 = close_prices.rolling(20).mean()
                std_20 = close_prices.rolling(20).std()
                indicators.bb_upper = float(sma_20.iloc[-1] + (2 * std_20.iloc[-1]))
                indicators.bb_middle = float(sma_20.iloc[-1])
                indicators.bb_lower = float(sma_20.iloc[-1] - (2 * std_20.iloc[-1]))
            
            # MACD
            if len(close_prices) >= 26:
                ema_12 = close_prices.ewm(span=12).mean()
                ema_26 = close_prices.ewm(span=26).mean()
                macd_line = ema_12 - ema_26
                signal_line = macd_line.ewm(span=9).mean()
                indicators.macd_main = float(macd_line.iloc[-1])
                indicators.macd_signal = float(signal_line.iloc[-1])
            
            return indicators
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Technical Indicators: {e}")
            return TechnicalIndicators()
    
    @handle_trading_errors(ErrorCategory.TRADING_LOGIC, ErrorSeverity.LOW)
    def _analyze_market_data(self, market_data: Dict[str, MarketData]) -> MarketAnalysis:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î Strategy"""
        try:
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• M15 ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
            primary_data = market_data.get("M15") or market_data.get("M5") or market_data.get("M1")
            if not primary_data:
                raise ValueError("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì indicators
            rates = mt5.copy_rates_from_pos(self.symbol, mt5.TIMEFRAME_M15, 0, 100)
            if rates is None:
                raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rates ‡πÑ‡∏î‡πâ")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Technical Indicators
            indicators = self._calculate_technical_indicators(rates)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Market Condition
            condition = self._detect_market_condition(primary_data, indicators)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Session
            session = self._detect_current_session()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Trend Strength
            trend_strength = self._calculate_trend_strength(indicators)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Volatility Level
            volatility_level = self._calculate_volatility_level(indicators, market_data)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Strategy ‡πÅ‡∏•‡∏∞ Recovery Method
            strategy_info = self.trading_params.get_strategy_for_condition(condition)
            recommended_strategy = strategy_info.get('primary', EntryStrategy.SCALPING_FAST)
            recommended_recovery = strategy_info.get('recovery', RecoveryMethod.CONSERVATIVE_RECOVERY)
            confidence_score = strategy_info.get('confidence', 0.5)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            analysis = MarketAnalysis(
                timestamp=datetime.now(),
                symbol=self.symbol,
                current_price=primary_data.close,
                condition=condition,
                session=session,
                trend_strength=trend_strength,
                volatility_level=volatility_level,
                recommended_strategy=recommended_strategy,
                recommended_recovery=recommended_recovery,
                confidence_score=confidence_score,
                technical_indicators=indicators,
                market_data=market_data,
                notes=f"Real-time analysis at {datetime.now().strftime('%H:%M:%S')}"
            )
            
            return analysis
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î: {e}")
            # Return default analysis
            return MarketAnalysis(
                timestamp=datetime.now(),
                symbol=self.symbol,
                current_price=2000.0,
                condition=MarketCondition.UNKNOWN,
                session=SessionType.ASIAN,
                trend_strength=0.5,
                volatility_level=0.5,
                recommended_strategy=EntryStrategy.SCALPING_FAST,
                recommended_recovery=RecoveryMethod.CONSERVATIVE_RECOVERY,
                confidence_score=0.3,
                technical_indicators=TechnicalIndicators(),
                market_data=market_data,
                notes="Error in analysis - using default values"
            )
    
    def _detect_market_condition(self, market_data: MarketData, indicators: TechnicalIndicators) -> MarketCondition:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
        try:
            # ADX ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
            if indicators.adx_14 > 25:
                # Trending Market
                if indicators.adx_14 > 40:
                    return MarketCondition.TRENDING_STRONG
                else:
                    return MarketCondition.TRENDING_WEAK
            
            # ATR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡πÅ‡∏õ‡∏£
            if indicators.atr_14 > 15:  # High volatility for Gold
                return MarketCondition.VOLATILE_HIGH
            
            # Bollinger Bands ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Range
            if indicators.bb_upper > 0 and indicators.bb_lower > 0:
                bb_width = indicators.bb_upper - indicators.bb_lower
                current_price = market_data.close
                
                if bb_width < 10:  # Tight range for Gold
                    return MarketCondition.RANGING_TIGHT
                elif current_price > indicators.bb_upper or current_price < indicators.bb_lower:
                    return MarketCondition.VOLATILE_HIGH
                else:
                    return MarketCondition.RANGING_WIDE
            
            # Default condition
            return MarketCondition.RANGING_TIGHT
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Market Condition: {e}")
            return MarketCondition.UNKNOWN
    
    def _detect_current_session(self) -> SessionType:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (GMT+7)"""
        now = datetime.now()
        current_time = now.time()
        
        # London/NY Overlap (20:30-00:00)
        if current_time >= time(20, 30) or current_time <= time(0, 0):
            return SessionType.OVERLAP
        
        # London Session (15:00-00:00)
        elif current_time >= time(15, 0):
            return SessionType.LONDON
        
        # NY Session (20:30-05:30) - ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà overlap
        elif current_time <= time(5, 30):
            return SessionType.NY
        
        # Asian Session (22:00-08:00) - ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        else:
            return SessionType.ASIAN
    
    def _calculate_trend_strength(self, indicators: TechnicalIndicators) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå (0.0-1.0)"""
        try:
            strength = 0.0
            factors = 0
            
            # ADX strength
            if indicators.adx_14 > 0:
                strength += min(indicators.adx_14 / 50, 1.0)
                factors += 1
            
            # Moving Average alignment
            if indicators.sma_20 > 0 and indicators.sma_50 > 0:
                if abs(indicators.sma_20 - indicators.sma_50) > 5:  # Significant gap
                    strength += 0.8
                else:
                    strength += 0.3
                factors += 1
            
            # MACD strength
            if indicators.macd_main != 0 and indicators.macd_signal != 0:
                macd_diff = abs(indicators.macd_main - indicators.macd_signal)
                strength += min(macd_diff / 10, 1.0)
                factors += 1
            
            return strength / factors if factors > 0 else 0.5
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Trend Strength: {e}")
            return 0.5
    
    def _calculate_volatility_level(self, indicators: TechnicalIndicators, market_data: Dict[str, MarketData]) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡πÅ‡∏õ‡∏£ (0.0-1.0)"""
        try:
            volatility = 0.0
            factors = 0
            
            # ATR-based volatility
            if indicators.atr_14 > 0:
                volatility += min(indicators.atr_14 / 20, 1.0)  # Normalize for Gold
                factors += 1
            
            # Bollinger Bands width
            if indicators.bb_upper > 0 and indicators.bb_lower > 0:
                bb_width = indicators.bb_upper - indicators.bb_lower
                volatility += min(bb_width / 30, 1.0)  # Normalize for Gold
                factors += 1
            
            # Spread-based volatility
            for tf_data in market_data.values():
                if tf_data.spread > 0:
                    volatility += min(tf_data.spread / 2.0, 1.0)  # Normalize spread
                    factors += 1
                    break  # Use one timeframe only
            
            return volatility / factors if factors > 0 else 0.5
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Volatility Level: {e}")
            return 0.5
    
    def _notify_callbacks(self, analysis: MarketAnalysis):
        """‡πÅ‡∏à‡πâ‡∏á callbacks ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà"""
        for callback in self.analysis_callbacks:
            try:
                callback(analysis)
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô analysis callback: {e}")
    
    def _log_analysis_result(self, analysis: MarketAnalysis):
        """Log ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        self.logger.info(
            f"üìä Market Analysis: {analysis.condition.value} | "
            f"Session: {analysis.session.value} | "
            f"Strategy: {analysis.recommended_strategy.value} | "
            f"Price: {analysis.current_price:.2f} | "
            f"Confidence: {analysis.confidence_score:.2f}"
        )
    
    def get_current_analysis(self) -> Optional[MarketAnalysis]:
        """‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        with self.analysis_lock:
            return self.current_analysis
    
    def add_analysis_callback(self, callback: callable):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà"""
        self.analysis_callbacks.append(callback)
    
    def remove_analysis_callback(self, callback: callable):
        """‡∏•‡∏ö callback"""
        if callback in self.analysis_callbacks:
            self.analysis_callbacks.remove(callback)
    
    def get_analysis_status(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        return {
            'status': self.status.value,
            'mt5_connected': mt5.terminal_info() is not None,
            'symbol': self.symbol,
            'timeframes': self.timeframes,
            'data_points': {tf: len(data) for tf, data in self.market_data.items()},
            'last_analysis': self.current_analysis.timestamp if self.current_analysis else None,
            'callbacks_count': len(self.analysis_callbacks)
        }
    
    def __del__(self):
        """Cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ object ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢"""
        try:
            self.stop_analysis()
        except:
            pass

# ===== FACTORY FUNCTION =====

def get_market_analyzer() -> RealMarketAnalyzer:
    """Factory function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Real Market Analyzer"""
    return RealMarketAnalyzer()

# ===== MAIN TESTING =====

if __name__ == "__main__":
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Real Market Analyzer"""
    
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Real Market Analyzer")
    print("=" * 50)
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á analyzer
        analyzer = RealMarketAnalyzer()
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Real Market Analyzer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        if analyzer.start_analysis():
            print("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            print("‚è≥ ‡∏£‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
            time.sleep(10)
            
            # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            analysis = analyzer.get_current_analysis()
            if analysis:
                print(f"üìä Market Condition: {analysis.condition.value}")
                print(f"üìä Current Session: {analysis.session.value}")
                print(f"üìä Recommended Strategy: {analysis.recommended_strategy.value}")
                print(f"üìä Current Price: {analysis.current_price:.2f}")
                print(f"üìä Confidence: {analysis.confidence_score:.2f}")
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            analyzer.stop_analysis()
            print("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ")
            
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
    
    print("\nüéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
COMPREHENSIVE ERROR HANDLING - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô
========================================================
‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏î‡∏¥‡πâ‡∏á
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ recovery ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå

‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á:
- utilities/professional_logger.py (‡∏Å‡∏≤‡∏£ log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)
- mt5_integration/connection_manager.py (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠)
- gui_system/components/* (‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô GUI)
"""

import sys
import traceback
import threading
import functools
from typing import Dict, List, Optional, Callable, Any, Union
from datetime import datetime, timedelta
from enum import Enum
from dataclasses import dataclass, field
import logging
from pathlib import Path

class ErrorSeverity(Enum):
    """‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
    LOW = "LOW"           # ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    MEDIUM = "MEDIUM"     # ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á retry
    HIGH = "HIGH"         # ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏£‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    CRITICAL = "CRITICAL" # ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ß‡∏¥‡∏Å‡∏§‡∏ï - ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö

class ErrorCategory(Enum):
    """‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
    CONNECTION = "CONNECTION"     # ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
    TRADING = "TRADING"          # ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î/‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå
    MARKET_DATA = "MARKET_DATA"  # ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î
    SYSTEM = "SYSTEM"            # ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
    RECOVERY = "RECOVERY"        # ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Recovery
    GUI = "GUI"                  # ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ User Interface
    DATA = "DATA"                # ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

@dataclass
class ErrorInfo:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
    timestamp: datetime
    error_type: str
    message: str
    severity: ErrorSeverity
    category: ErrorCategory
    traceback_str: str
    function_name: str
    line_number: int
    recovery_attempted: bool = False
    recovery_successful: bool = False
    retry_count: int = 0
    context_data: Dict[str, Any] = field(default_factory=dict)

class RecoveryStrategy:
    """‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£ Recovery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"""
    
    def __init__(self, name: str, max_retries: int = 3, delay: float = 1.0):
        self.name = name
        self.max_retries = max_retries
        self.delay = delay
        self.success_count = 0
        self.failure_count = 0
    
    def execute(self, error_info: ErrorInfo, recovery_func: Callable) -> bool:
        """
        ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Recovery Strategy
        """
        try:
            recovery_func(error_info)
            self.success_count += 1
            return True
        except Exception as e:
            self.failure_count += 1
            return False

class GlobalErrorHandler:
    """
    ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ recovery ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    """
    
    def __init__(self, logger: Optional[logging.Logger] = None):
        self.logger = logger
        self.error_history: List[ErrorInfo] = []
        self.recovery_strategies: Dict[ErrorCategory, RecoveryStrategy] = {}
        self.error_callbacks: List[Callable[[ErrorInfo], None]] = []
        self.lock = threading.Lock()
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        self.error_counts: Dict[ErrorCategory, int] = {cat: 0 for cat in ErrorCategory}
        self.last_error_time: Dict[ErrorCategory, datetime] = {}
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Recovery Strategies
        self._setup_recovery_strategies()
    
    def _setup_recovery_strategies(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Recovery Strategies ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"""
        
        # Connection Recovery - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÉ‡∏´‡∏°‡πà
        self.recovery_strategies[ErrorCategory.CONNECTION] = RecoveryStrategy(
            name="MT5_Reconnect",
            max_retries=5,
            delay=2.0
        )
        
        # Trading Recovery - ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
        self.recovery_strategies[ErrorCategory.TRADING] = RecoveryStrategy(
            name="Retry_Order",
            max_retries=3,
            delay=1.0
        )
        
        # Market Data Recovery - ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î
        self.recovery_strategies[ErrorCategory.MARKET_DATA] = RecoveryStrategy(
            name="Refresh_MarketData",
            max_retries=2,
            delay=0.5
        )
        
        # System Recovery - ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        self.recovery_strategies[ErrorCategory.SYSTEM] = RecoveryStrategy(
            name="Module_Restart",
            max_retries=2,
            delay=3.0
        )
    
    def setup_global_exception_handling(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Exception ‡∏£‡∏∞‡∏î‡∏±‡∏ö Global"""
        
        def handle_exception(exc_type, exc_value, exc_traceback):
            """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Exception ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö"""
            if issubclass(exc_type, KeyboardInterrupt):
                # ‡πÉ‡∏´‡πâ KeyboardInterrupt ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
                sys.__excepthook__(exc_type, exc_value, exc_traceback)
                return
            
            error_info = self._create_error_info(
                exc_value,
                ErrorSeverity.CRITICAL,
                ErrorCategory.SYSTEM,
                exc_traceback
            )
            
            self.handle_error(error_info)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Global Exception Handler
        sys.excepthook = handle_exception
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Threading Exception Handler (Python 3.8+)
        if hasattr(threading, 'excepthook'):
            def thread_exception_handler(args):
                error_info = self._create_error_info(
                    args.exc_value,
                    ErrorSeverity.HIGH,
                    ErrorCategory.SYSTEM,
                    args.exc_traceback
                )
                self.handle_error(error_info)
            
            threading.excepthook = thread_exception_handler
    
    def handle_error(self, error_info: ErrorInfo) -> bool:
        """
        ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å
        Returns: True ‡∏ñ‡πâ‡∏≤ recovery ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, False ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        """
        with self.lock:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            self.error_history.append(error_info)
            self.error_counts[error_info.category] += 1
            self.last_error_time[error_info.category] = error_info.timestamp
            
            # Log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            self._log_error(error_info)
            
            # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô callbacks
            self._notify_callbacks(error_info)
            
            # ‡∏•‡∏≠‡∏á Recovery (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà recovery ‡πÑ‡∏î‡πâ)
            recovery_success = self._attempt_recovery(error_info)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ recovery
            error_info.recovery_attempted = True
            error_info.recovery_successful = recovery_success
            
            return recovery_success
    
    def _create_error_info(self, 
                          exception: Exception, 
                          severity: ErrorSeverity,
                          category: ErrorCategory,
                          tb: Optional[Any] = None) -> ErrorInfo:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á ErrorInfo ‡∏à‡∏≤‡∏Å Exception"""
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• traceback
        if tb is None:
            tb = sys.exc_info()[2]
        
        traceback_str = ''.join(traceback.format_exception(type(exception), exception, tb))
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        frame = tb.tb_frame if tb else None
        function_name = frame.f_code.co_name if frame else "unknown"
        line_number = tb.tb_lineno if tb else 0
        
        return ErrorInfo(
            timestamp=datetime.now(),
            error_type=type(exception).__name__,
            message=str(exception),
            severity=severity,
            category=category,
            traceback_str=traceback_str,
            function_name=function_name,
            line_number=line_number
        )
    
    def _log_error(self, error_info: ErrorInfo):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        if not self.logger:
            return
        
        severity_emoji = {
            ErrorSeverity.LOW: "üü°",
            ErrorSeverity.MEDIUM: "üü†", 
            ErrorSeverity.HIGH: "üî¥",
            ErrorSeverity.CRITICAL: "üí•"
        }
        
        emoji = severity_emoji.get(error_info.severity, "‚ùå")
        
        log_msg = (
            f"{emoji} {error_info.category.value} ERROR: {error_info.error_type} "
            f"in {error_info.function_name}:{error_info.line_number} - {error_info.message}"
        )
        
        if error_info.severity == ErrorSeverity.CRITICAL:
            self.logger.critical(log_msg)
            self.logger.critical(f"Full traceback:\n{error_info.traceback_str}")
        elif error_info.severity == ErrorSeverity.HIGH:
            self.logger.error(log_msg)
        elif error_info.severity == ErrorSeverity.MEDIUM:
            self.logger.warning(log_msg)
        else:
            self.logger.info(log_msg)
    
    def _notify_callbacks(self, error_info: ErrorInfo):
        """‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô callbacks ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ"""
        for callback in self.error_callbacks:
            try:
                callback(error_info)
            except Exception as e:
                if self.logger:
                    self.logger.error(f"Error in error callback: {e}")
    
    def _attempt_recovery(self, error_info: ErrorInfo) -> bool:
        """‡∏•‡∏≠‡∏á Recovery ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Recovery Strategy ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if error_info.category not in self.recovery_strategies:
            return False
        
        strategy = self.recovery_strategies[error_info.category]
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà retry ‡πÅ‡∏•‡πâ‡∏ß
        if error_info.retry_count >= strategy.max_retries:
            if self.logger:
                self.logger.warning(f"üö´ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô retry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {error_info.category.value}")
            return False
        
        # ‡∏•‡∏≠‡∏á Recovery
        if self.logger:
            self.logger.info(f"üîÑ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° Recovery: {strategy.name} (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {error_info.retry_count + 1})")
        
        # TODO: Implement specific recovery functions
        # ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞ return False ‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£ implement recovery functions
        
        return False
        
    def add_error_callback(self, callback: Callable[[ErrorInfo], None]):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        self.error_callbacks.append(callback)
    
    def get_error_statistics(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        with self.lock:
            total_errors = len(self.error_history)
            recent_errors = [
                err for err in self.error_history 
                if err.timestamp > datetime.now() - timedelta(hours=1)
            ]
            
            return {
                "total_errors": total_errors,
                "recent_errors_1h": len(recent_errors),
                "error_by_category": dict(self.error_counts),
                "last_error_times": {
                    cat.value: time.isoformat() if time else None
                    for cat, time in self.last_error_time.items()
                },
                "recovery_stats": {
                    cat.value: {
                        "strategy": strategy.name,
                        "success_count": strategy.success_count,
                        "failure_count": strategy.failure_count,
                        "success_rate": (
                            strategy.success_count / 
                            (strategy.success_count + strategy.failure_count)
                            if (strategy.success_count + strategy.failure_count) > 0 else 0
                        )
                    }
                    for cat, strategy in self.recovery_strategies.items()
                }
            }
    
    def clear_old_errors(self, days: int = 7):
        """‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å"""
        cutoff_time = datetime.now() - timedelta(days=days)
        with self.lock:
            self.error_history = [
                err for err in self.error_history 
                if err.timestamp > cutoff_time
            ]

# === ERROR HANDLING DECORATORS ===

def handle_trading_errors(category: ErrorCategory = ErrorCategory.TRADING,
                         severity: ErrorSeverity = ErrorSeverity.MEDIUM):
    """
    Decorator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á ErrorInfo
                error_info = ErrorInfo(
                    timestamp=datetime.now(),
                    error_type=type(e).__name__,
                    message=str(e),
                    severity=severity,
                    category=category,
                    traceback_str=traceback.format_exc(),
                    function_name=func.__name__,
                    line_number=0,  # ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å traceback
                    context_data={"function_args": args, "function_kwargs": kwargs}
                )
                
                # TODO: ‡πÉ‡∏ä‡πâ global error handler
                # _global_error_handler.handle_error(error_info)
                
                # Re-raise exception ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
                raise
        return wrapper
    return decorator

def handle_connection_errors(max_retries: int = 3, retry_delay: float = 1.0):
    """
    Decorator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            
            for attempt in range(max_retries + 1):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    last_exception = e
                    
                    if attempt < max_retries:
                        # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô retry
                        import time
                        time.sleep(retry_delay * (attempt + 1))  # Exponential backoff
                        continue
                    else:
                        # ‡∏´‡∏°‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô retry ‡πÅ‡∏•‡πâ‡∏ß
                        error_info = ErrorInfo(
                            timestamp=datetime.now(),
                            error_type=type(e).__name__,
                            message=str(e),
                            severity=ErrorSeverity.HIGH,
                            category=ErrorCategory.CONNECTION,
                            traceback_str=traceback.format_exc(),
                            function_name=func.__name__,
                            line_number=0,
                            retry_count=max_retries,
                            context_data={"max_retries": max_retries, "retry_delay": retry_delay}
                        )
                        
                        # TODO: ‡πÉ‡∏ä‡πâ global error handler
                        raise last_exception
            
            return None
        return wrapper
    return decorator

# === SPECIALIZED ERROR CLASSES ===

class TradingError(Exception):
    """‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
    def __init__(self, message: str, error_code: Optional[str] = None, context: Optional[Dict] = None):
        super().__init__(message)
        self.error_code = error_code
        self.context = context or {}

class MT5ConnectionError(TradingError):
    """‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
    pass

class OrderExecutionError(TradingError):
    """‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå"""
    pass

class MarketDataError(TradingError):
    """‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î"""
    pass

class RecoveryError(TradingError):
    """‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö Recovery"""
    pass

# === GLOBAL ERROR HANDLER INSTANCE ===
_global_error_handler: Optional[GlobalErrorHandler] = None

def get_global_error_handler() -> GlobalErrorHandler:
    """‡∏î‡∏∂‡∏á Global Error Handler (Singleton)"""
    global _global_error_handler
    if _global_error_handler is None:
        from .professional_logger import setup_error_logger
        logger = setup_error_logger()
        _global_error_handler = GlobalErrorHandler(logger)
    return _global_error_handler

def report_error(exception: Exception, 
                category: ErrorCategory = ErrorCategory.SYSTEM,
                severity: ErrorSeverity = ErrorSeverity.MEDIUM,
                context: Optional[Dict] = None) -> bool:
    """
    ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Global Error Handler
    """
    handler = get_global_error_handler()
    
    error_info = ErrorInfo(
        timestamp=datetime.now(),
        error_type=type(exception).__name__,
        message=str(exception),
        severity=severity,
        category=category,
        traceback_str=traceback.format_exc(),
        function_name="unknown",
        line_number=0,
        context_data=context or {}
    )
    
    return handler.handle_error(error_info)
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PROFESSIONAL LOGGING SYSTEM - ‡∏£‡∏∞‡∏ö‡∏ö Logging ‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
================================================
‡∏£‡∏∞‡∏ö‡∏ö logging ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏î‡∏¥‡πâ‡∏á
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó log ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö

‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á:
- config/settings.py (‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging)
- utilities/data_manager.py (‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö log data)
- ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
"""

import logging
import sys
import os
from pathlib import Path
from typing import Optional, Dict, Any
from datetime import datetime
from logging.handlers import RotatingFileHandler
import threading
from dataclasses import dataclass

@dataclass
class LoggerConfig:
    """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Logger ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß"""
    name: str
    level: str = "INFO"
    log_to_file: bool = True
    log_to_console: bool = True
    file_max_size: int = 50  # MB
    backup_count: int = 5
    format_string: Optional[str] = None

class TradingLoggerFormatter(logging.Formatter):
    """
    Custom Formatter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏î‡∏¥‡πâ‡∏á
    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ ‡πÅ‡∏•‡∏∞ emoji ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó log
    """
    
    # ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö
    COLORS = {
        'DEBUG': '\033[36m',    # Cyan
        'INFO': '\033[32m',     # Green  
        'WARNING': '\033[33m',  # Yellow
        'ERROR': '\033[31m',    # Red
        'CRITICAL': '\033[35m', # Magenta
        'RESET': '\033[0m'      # Reset
    }
    
    # Emoji ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    EMOJIS = {
        'DEBUG': 'üîç',
        'INFO': 'üìò', 
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'CRITICAL': 'üí•',
        'TRADING': 'üìä',
        'ORDER': 'üìà',
        'RECOVERY': 'üîÑ',
        'MARKET': 'üåç',
        'SYSTEM': '‚öôÔ∏è'
    }
    
    def format(self, record):
        """
        ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö log message ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ‡πÅ‡∏•‡∏∞ emoji
        """
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° emoji ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        emoji = self.EMOJIS.get(record.levelname, self.EMOJIS.get('INFO'))
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö console ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        if hasattr(record, 'add_color') and record.add_color:
            color = self.COLORS.get(record.levelname, '')
            reset = self.COLORS['RESET']
            record.levelname = f"{color}{record.levelname}{reset}"
        
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
        record.asctime = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á format string
        if not hasattr(self, '_style'):
            fmt = f"{emoji} %(asctime)s | %(name)s | %(levelname)s | %(funcName)s:%(lineno)d | %(message)s"
        else:
            fmt = self._fmt or f"{emoji} %(asctime)s | %(name)s | %(levelname)s | %(funcName)s:%(lineno)d | %(message)s"
            
        formatter = logging.Formatter(fmt)
        return formatter.format(record)

class TradingLogger:
    """
    ‡∏£‡∏∞‡∏ö‡∏ö Logger ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏î‡∏¥‡πâ‡∏á
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á logger ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    """
    
    _instances: Dict[str, logging.Logger] = {}
    _lock = threading.Lock()
    
    @classmethod
    def get_logger(cls, config: LoggerConfig) -> logging.Logger:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á Logger ‡∏ï‡∏≤‡∏° config ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (Singleton pattern)
        """
        with cls._lock:
            if config.name in cls._instances:
                return cls._instances[config.name]
            
            logger = cls._create_logger(config)
            cls._instances[config.name] = logger
            return logger
    
    @classmethod
    def _create_logger(cls, config: LoggerConfig) -> logging.Logger:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á Logger ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° configuration
        """
        logger = logging.getLogger(config.name)
        logger.setLevel(getattr(logging, config.level.upper()))
        
        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° handler ‡∏ã‡πâ‡∏≥
        if logger.handlers:
            logger.handlers.clear()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á formatter
        formatter = TradingLoggerFormatter()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Console Handler
        if config.log_to_console:
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setFormatter(formatter)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö console
            console_filter = cls._ColorFilter()
            console_handler.addFilter(console_filter)
            
            logger.addHandler(console_handler)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° File Handler
        if config.log_to_file:
            file_handler = cls._create_file_handler(config, formatter)
            logger.addHandler(file_handler)
        
        return logger
    
    @classmethod
    def _create_file_handler(cls, config: LoggerConfig, formatter) -> RotatingFileHandler:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á File Handler ‡∏û‡∏£‡πâ‡∏≠‡∏° rotation
        """
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå logs ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        today = datetime.now().strftime("%Y%m%d")
        log_file = log_dir / f"{config.name}_{today}.log"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á RotatingFileHandler
        file_handler = RotatingFileHandler(
            filename=str(log_file),
            maxBytes=config.file_max_size * 1024 * 1024,  # Convert MB to bytes
            backupCount=config.backup_count,
            encoding='utf-8'
        )
        
        file_handler.setFormatter(formatter)
        return file_handler
    
    class _ColorFilter(logging.Filter):
        """Filter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡πÉ‡∏ô console"""
        def filter(self, record):
            record.add_color = True
            return True

# === SPECIALIZED LOGGERS ===

def setup_main_logger(name: str = "IntelligentGoldTrading") -> logging.Logger:
    """
    ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logger ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö main.py ‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
    """
    config = LoggerConfig(
        name=name,
        level="INFO",
        log_to_file=True,
        log_to_console=True
    )
    return TradingLogger.get_logger(config)

def setup_trading_logger(name: str = "Trading") -> logging.Logger:
    """
    ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏î‡∏¥‡πâ‡∏á
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö entry, recovery, position management
    """
    config = LoggerConfig(
        name=name,
        level="DEBUG",  # ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        log_to_file=True,
        log_to_console=True
    )
    return TradingLogger.get_logger(config)

def setup_market_logger(name: str = "Market") -> logging.Logger:
    """
    ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö market intelligence ‡πÅ‡∏•‡∏∞ analysis
    """
    config = LoggerConfig(
        name=name,
        level="INFO",
        log_to_file=True,
        log_to_console=False  # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô console ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î noise
    )
    return TradingLogger.get_logger(config)

def setup_mt5_logger(name: str = "MT5") -> logging.Logger:
    """
    ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MT5 Integration
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå
    """
    config = LoggerConfig(
        name=name,
        level="DEBUG",
        log_to_file=True,
        log_to_console=True
    )
    return TradingLogger.get_logger(config)

def setup_error_logger(name: str = "Error") -> logging.Logger:
    """
    ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Error ‡πÅ‡∏•‡∏∞ Exception
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    """
    config = LoggerConfig(
        name=name,
        level="ERROR",
        log_to_file=True,
        log_to_console=True,
        file_max_size=100,  # ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error logs
        backup_count=10
    )
    return TradingLogger.get_logger(config)

def setup_performance_logger(name: str = "Performance") -> logging.Logger:
    """
    ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Performance Tracking
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    """
    config = LoggerConfig(
        name=name,
        level="INFO",
        log_to_file=True,
        log_to_console=False
    )
    return TradingLogger.get_logger(config)

# === UTILITY FUNCTIONS ===

def get_all_loggers() -> Dict[str, logging.Logger]:
    """
    ‡∏î‡∏∂‡∏á Logger ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
    """
    return TradingLogger._instances.copy()

def set_global_log_level(level: str) -> None:
    """
    ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Logger ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    """
    numeric_level = getattr(logging, level.upper())
    for logger in TradingLogger._instances.values():
        logger.setLevel(numeric_level)

def close_all_loggers() -> None:
    """
    ‡∏õ‡∏¥‡∏î Logger ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡πà‡∏≠‡∏¢ resources
    """
    for logger in TradingLogger._instances.values():
        for handler in logger.handlers:
            handler.close()
            logger.removeHandler(handler)
    
    TradingLogger._instances.clear()

# === LOGGING DECORATORS ===

def log_function_call(logger: Optional[logging.Logger] = None):
    """
    Decorator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            _logger = logger or setup_trading_logger()
            _logger.debug(f"üîß ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ {func.__name__} - args: {args}, kwargs: {kwargs}")
            
            try:
                result = func(*args, **kwargs)
                _logger.debug(f"‚úÖ {func.__name__} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - result: {result}")
                return result
            except Exception as e:
                _logger.error(f"‚ùå {func.__name__} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - error: {e}")
                raise
        return wrapper
    return decorator

def log_trading_action(action_type: str):
    """
    Decorator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ trading actions
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            logger = setup_trading_logger()
            logger.info(f"üìä {action_type}: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô {func.__name__}")
            
            try:
                result = func(*args, **kwargs)
                logger.info(f"‚úÖ {action_type}: {func.__name__} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return result
            except Exception as e:
                logger.error(f"‚ùå {action_type}: {func.__name__} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - {e}")
                raise
        return wrapper
    return decorator
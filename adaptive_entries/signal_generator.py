#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SIGNAL GENERATOR - Entry Signal Coordination Engine
================================================
‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô Entry Signals ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å Entry Engines
‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå

Key Features:
- ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° signals ‡∏à‡∏≤‡∏Å entry engines ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û signal ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
- ‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á signals
- ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à final entry signal
- ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏° market conditions
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö High-Frequency Trading (50-100 lots/‡∏ß‡∏±‡∏ô)

‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á:
- adaptive_entries/entry_engines/* (‡∏£‡∏±‡∏ö signals)
- market_intelligence/market_analyzer.py (‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î)
- adaptive_entries/strategy_selector.py (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå)
- mt5_integration/order_executor.py (‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå)
"""

import asyncio
import threading
import time
from datetime import datetime, timedelta
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Tuple, Any, Callable
from enum import Enum
import queue
import json

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ internal modules
from config.settings import get_system_settings, MarketSession
from config.trading_params import get_trading_parameters, EntryStrategy
from utilities.professional_logger import setup_trading_logger
from utilities.error_handler import handle_trading_errors, ErrorCategory, ErrorSeverity

class SignalStrength(Enum):
    """‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á Signal"""
    VERY_WEAK = 1
    WEAK = 2
    MODERATE = 3
    STRONG = 4
    VERY_STRONG = 5

class SignalDirection(Enum):
    """‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Signal"""
    BUY = "BUY"
    SELL = "SELL"
    NEUTRAL = "NEUTRAL"

class SignalConfidence(Enum):
    """‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á Signal"""
    LOW = 0.3      # 30% confidence
    MEDIUM = 0.6   # 60% confidence
    HIGH = 0.8     # 80% confidence
    VERY_HIGH = 0.95  # 95% confidence

@dataclass
class EntrySignal:
    """
    ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Entry Signal
    """
    signal_id: str                              # ID ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á Signal
    timestamp: datetime                         # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á Signal
    source_engine: EntryStrategy               # Engine ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á Signal
    direction: SignalDirection                 # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
    strength: SignalStrength                   # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á Signal
    confidence: float                          # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô (0.0-1.0)
    
    # Market Data
    current_price: float                       # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    suggested_volume: float                    # Volume ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    
    # Technical Analysis Data
    technical_indicators: Dict[str, Any] = field(default_factory=dict)
    market_conditions: Dict[str, Any] = field(default_factory=dict)
    
    # Signal Quality Metrics
    signal_quality_score: float = 0.0         # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û Signal (0-100)
    risk_reward_ratio: float = 1.0             # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô Risk:Reward
    probability_success: float = 0.5           # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    
    # Execution Parameters
    urgency_level: int = 1                     # ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏µ‡∏ö‡∏î‡πà‡∏ß‡∏ô (1-5)
    max_slippage_points: float = 2.0           # Slippage ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
    
    # Metadata
    session: MarketSession                     # Session ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î Signal
    market_volatility: str = "MEDIUM"          # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î
    additional_info: Dict[str, Any] = field(default_factory=dict)

class SignalAggregator:
    """
    ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Signals ‡∏à‡∏≤‡∏Å Entry Engines ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    """
    
    def __init__(self):
        self.logger = setup_trading_logger()
        self.settings = get_system_settings()
        self.trading_params = get_trading_parameters()
        
        # Signal Storage
        self.active_signals: List[EntrySignal] = []
        self.signal_history: List[EntrySignal] = []
        self.signal_queue = queue.Queue()
        
        # Entry Engines Connection
        self.entry_engines: Dict[EntryStrategy, Any] = {}
        self.engine_weights: Dict[EntryStrategy, float] = {
            EntryStrategy.TREND_FOLLOWING: 0.25,
            EntryStrategy.MEAN_REVERSION: 0.25,
            EntryStrategy.BREAKOUT_FALSE: 0.20,
            EntryStrategy.NEWS_REACTION: 0.15,
            EntryStrategy.SCALPING_ENGINE: 0.15
        }
        
        # Signal Quality Filters
        self.min_signal_strength = SignalStrength.MODERATE
        self.min_confidence_level = 0.6
        self.min_quality_score = 60.0
        
        # Threading
        self.processing_active = False
        self.signal_processor_thread = None
        
        self.logger.info("üìä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Signal Aggregator")
    
    def register_entry_engine(self, strategy: EntryStrategy, engine_instance: Any) -> None:
        """
        ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Entry Engine
        """
        self.entry_engines[strategy] = engine_instance
        self.logger.info(f"‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô {strategy.value} Engine")
    
    def add_signal(self, signal: EntrySignal) -> bool:
        """
        ‡πÄ‡∏û‡∏¥‡πà‡∏° Signal ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
        """
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û Signal
            if not self._validate_signal_quality(signal):
                self.logger.debug(f"üö´ Signal ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥: {signal.signal_id}")
                return False
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Signal Quality Score
            signal.signal_quality_score = self._calculate_quality_score(signal)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Queue
            self.signal_queue.put(signal)
            self.logger.debug(f"üìà ‡πÄ‡∏û‡∏¥‡πà‡∏° Signal: {signal.signal_id} | Score: {signal.signal_quality_score:.1f}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° Signal: {e}")
            return False
    
    def _validate_signal_quality(self, signal: EntrySignal) -> bool:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û Signal ‡∏Ç‡∏±‡πâ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        """
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á
        if signal.strength.value < self.min_signal_strength.value:
            return False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
        if signal.confidence < self.min_confidence_level:
            return False
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á Signal (‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        signal_age = (datetime.now() - signal.timestamp).total_seconds()
        if signal_age > 60:
            return False
        
        return True
    
    def _calculate_quality_score(self, signal: EntrySignal) -> float:
        """
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á Signal
        """
        score = 0.0
        
        # Base Score ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á (0-30 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        score += signal.strength.value * 6
        
        # Confidence Score (0-25 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        score += signal.confidence * 25
        
        # Engine Weight Score (0-20 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        engine_weight = self.engine_weights.get(signal.source_engine, 0.1)
        score += engine_weight * 20
        
        # Market Conditions Score (0-15 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        volatility_score = {"LOW": 5, "MEDIUM": 10, "HIGH": 15}.get(signal.market_volatility, 8)
        score += volatility_score
        
        # Risk-Reward Ratio Score (0-10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        rr_score = min(signal.risk_reward_ratio * 3, 10)
        score += rr_score
        
        return min(score, 100.0)  # ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

class SignalGenerator:
    """
    üéØ Main Signal Generator Class
    
    ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Entry Signals
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö High-Frequency Trading ‡πÅ‡∏•‡∏∞ Adaptive Strategy Selection
    """
    
    def __init__(self):
        self.logger = setup_trading_logger()
        self.settings = get_system_settings()
        self.trading_params = get_trading_parameters()
        
        # Core Components
        self.signal_aggregator = SignalAggregator()
        self.market_analyzer = None  # ‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ô start()
        self.strategy_selector = None  # ‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ô start()
        
        # Signal Generation Stats
        self.signals_generated_today = 0
        self.signals_executed_today = 0
        self.target_signals_per_hour = self._calculate_target_signals()
        
        # Timing Control
        self.last_signal_time = datetime.now()
        self.min_signal_interval = timedelta(seconds=self.settings.min_entry_interval_seconds)
        
        # Threading
        self.generator_active = False
        self.generator_thread = None
        self.signal_monitor_thread = None
        
    def _calculate_target_signals(self) -> int:
        """
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ Signals ‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ Volume 50-100 lots/‡∏ß‡∏±‡∏ô
        """
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å daily volume target
        daily_target = (self.settings.daily_volume_target_min + 
                       self.settings.daily_volume_target_max) / 2
        
        # 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        hourly_target = daily_target / 24
        
        # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö signals ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ execute
        return int(hourly_target * 1.5)
    
    @handle_trading_errors(ErrorCategory.SIGNAL_GENERATION, ErrorSeverity.MEDIUM)
    async def start_signal_generation(self) -> None:
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Signals
        """
        if self.generator_active:
            self.logger.warning("‚ö†Ô∏è Signal Generator ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return
        
        self.logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Signal Generation System")
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Market Analyzer
        try:
            from market_intelligence.market_analyzer import MarketAnalyzer
            self.market_analyzer = MarketAnalyzer()
            await self.market_analyzer.start_analysis()
        except ImportError:
            self.logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Market Analyzer")
            return
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Strategy Selector
        try:
            from adaptive_entries.strategy_selector import StrategySelector
            self.strategy_selector = StrategySelector()
        except ImportError:
            self.logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Strategy Selector")
            return
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Entry Engines
        await self._initialize_entry_engines()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° Threads
        self.generator_active = True
        self.generator_thread = threading.Thread(target=self._signal_generation_loop, daemon=True)
        self.signal_monitor_thread = threading.Thread(target=self._signal_monitoring_loop, daemon=True)
        
        self.generator_thread.start()
        self.signal_monitor_thread.start()
        
        self.logger.info("‚úÖ Signal Generation System ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
    
    async def _initialize_entry_engines(self) -> None:
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Entry Engines ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        """
        try:
            # Trend Following Engine
            from adaptive_entries.entry_engines.trend_following import TrendFollowingEngine
            trend_engine = TrendFollowingEngine()
            self.signal_aggregator.register_entry_engine(EntryStrategy.TREND_FOLLOWING, trend_engine)
            
            # Mean Reversion Engine  
            from adaptive_entries.entry_engines.mean_reversion import MeanReversionEngine
            mean_engine = MeanReversionEngine()
            self.signal_aggregator.register_entry_engine(EntryStrategy.MEAN_REVERSION, mean_engine)
            
            # ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
            self.logger.info("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Entry Engines ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
        except ImportError as e:
            self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Entry Engines: {e}")
    
    def _signal_generation_loop(self) -> None:
        """
        Main Signal Generation Loop
        ‡∏£‡∏±‡∏ô‡πÉ‡∏ô separate thread
        """
        self.logger.info("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Signal Generation Loop")
        
        while self.generator_active:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Signals
                time_since_last = datetime.now() - self.last_signal_time
                if time_since_last < self.min_signal_interval:
                    time.sleep(0.1)
                    continue
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á Signals ‡∏à‡∏≤‡∏Å Entry Engines
                self._generate_signals_from_engines()
                
                # ‡∏û‡∏±‡∏Å 100ms ‡∏Å‡πà‡∏≠‡∏ô loop ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                time.sleep(0.1)
                
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Signal Generation Loop: {e}")
                time.sleep(1)
    
    def _generate_signals_from_engines(self) -> None:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á Signals ‡∏à‡∏≤‡∏Å Entry Engines ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        """
        if not self.market_analyzer or not self.strategy_selector:
            return
        
        # ‡πÑ‡∏î‡πâ Market Conditions ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        market_state = self.market_analyzer.get_current_market_state()
        current_session = self.market_analyzer.get_current_session()
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Active Strategies ‡∏ï‡∏≤‡∏° Market Conditions
        active_strategies = self.strategy_selector.select_strategies(market_state, current_session)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Signals ‡∏à‡∏≤‡∏Å Active Engines
        for strategy in active_strategies:
            if strategy in self.signal_aggregator.entry_engines:
                engine = self.signal_aggregator.entry_engines[strategy]
                try:
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å generate_signal ‡∏à‡∏≤‡∏Å engine
                    if hasattr(engine, 'generate_signal'):
                        signal = engine.generate_signal(market_state, current_session)
                        if signal:
                            self.signal_aggregator.add_signal(signal)
                            self.signals_generated_today += 1
                            self.last_signal_time = datetime.now()
                            
                except Exception as e:
                    self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô {strategy.value} Engine: {e}")
    
    def _signal_monitoring_loop(self) -> None:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Signals ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        """
        self.logger.info("üëÅÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Signal Monitoring Loop")
        
        while self.generator_active:
            try:
                # ‡∏î‡∏∂‡∏á Signal ‡∏à‡∏≤‡∏Å Queue (timeout 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                if not self.signal_aggregator.signal_queue.empty():
                    signal = self.signal_aggregator.signal_queue.get(timeout=1)
                    
                    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Signal
                    self._process_final_signal(signal)
                else:
                    time.sleep(0.1)
                    
            except queue.Empty:
                continue
            except Exception as e:
                self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Signal Monitoring: {e}")
                time.sleep(1)
    
    def _process_final_signal(self, signal: EntrySignal) -> None:
        """
        ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Final Signal ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå
        """
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Final Signal Quality
            if signal.signal_quality_score < self.signal_aggregator.min_quality_score:
                self.logger.debug(f"üö´ Final Signal ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥: {signal.signal_id}")
                return
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Signal
            self.signal_aggregator.active_signals.append(signal)
            self.signal_aggregator.signal_history.append(signal)
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå
            self._prepare_order_execution(signal)
            
            self.logger.info(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Signal: {signal.signal_id} | "
                           f"Direction: {signal.direction.value} | "
                           f"Score: {signal.signal_quality_score:.1f}")
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Final Signal: {e}")
    
    def _prepare_order_execution(self, signal: EntrySignal) -> None:
        """
        ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå
        """
        try:
            # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ mt5_integration/order_executor.py
            self.logger.info(f"üì§ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå: {signal.direction.value} "
                           f"{signal.suggested_volume} lots")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô signals ‡∏ó‡∏µ‡πà execute
            self.signals_executed_today += 1
            
        except Exception as e:
            self.logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå: {e}")
    
    def stop_signal_generation(self) -> None:
        """
        ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Signals
        """
        self.logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î Signal Generation System")
        
        self.generator_active = False
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ Threads ‡∏à‡∏ö
        if self.generator_thread and self.generator_thread.is_alive():
            self.generator_thread.join(timeout=5)
        
        if self.signal_monitor_thread and self.signal_monitor_thread.is_alive():
            self.signal_monitor_thread.join(timeout=5)
        
        self.logger.info("‚úÖ Signal Generation System ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß")
    
    def get_signal_statistics(self) -> Dict[str, Any]:
        """
        ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Signal Generator
        """
        return {
            "signals_generated_today": self.signals_generated_today,
            "signals_executed_today": self.signals_executed_today,
            "target_signals_per_hour": self.target_signals_per_hour,
            "active_signals_count": len(self.signal_aggregator.active_signals),
            "signal_history_count": len(self.signal_aggregator.signal_history),
            "execution_rate": (self.signals_executed_today / max(self.signals_generated_today, 1)) * 100,
            "generator_active": self.generator_active
        }
    
    def get_active_signals(self) -> List[EntrySignal]:
        """
        ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Active Signals
        """
        return self.signal_aggregator.active_signals.copy()
    
    def clear_old_signals(self, max_age_minutes: int = 30) -> int:
        """
        ‡∏•‡∏ö Signals ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å
        """
        current_time = datetime.now()
        cutoff_time = current_time - timedelta(minutes=max_age_minutes)
        
        # ‡∏ô‡∏±‡∏ö signals ‡πÄ‡∏Å‡πà‡∏≤
        old_count = len([s for s in self.signal_aggregator.active_signals 
                        if s.timestamp < cutoff_time])
        
        # ‡∏•‡∏ö signals ‡πÄ‡∏Å‡πà‡∏≤
        self.signal_aggregator.active_signals = [
            s for s in self.signal_aggregator.active_signals 
            if s.timestamp >= cutoff_time
        ]
        
        if old_count > 0:
            self.logger.info(f"üßπ ‡∏•‡∏ö Signals ‡πÄ‡∏Å‡πà‡∏≤ {old_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        return old_count

# === GLOBAL SIGNAL GENERATOR INSTANCE ===
_global_signal_generator: Optional[SignalGenerator] = None

def get_signal_generator() -> SignalGenerator:
    """
    ‡∏î‡∏∂‡∏á SignalGenerator ‡πÅ‡∏ö‡∏ö Singleton
    """
    global _global_signal_generator
    if _global_signal_generator is None:
        _global_signal_generator = SignalGenerator()
    return _global_signal_generator

async def main():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Signal Generator
    """
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Signal Generator")
    
    generator = get_signal_generator()
    
    try:
        await generator.start_signal_generation()
        
        # ‡∏£‡∏±‡∏ô 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        await asyncio.sleep(10)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        stats = generator.get_signal_statistics()
        print(f"üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {json.dumps(stats, indent=2, ensure_ascii=False)}")
        
    finally:
        generator.stop_signal_generation()

if __name__ == "__main__":
    asyncio.run(main())
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
STRATEGY SELECTOR - ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
=================================================
‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå

üéØ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î
- ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
"""

from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, field
from enum import Enum
from datetime import datetime
import random

# Import market analyzer
try:
    from market_intelligence.market_analyzer import MarketAnalyzer

except ImportError:
    # Fallback definitions if import fails
    class TrendDirection(Enum):
        STRONG_UPTREND = "‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á"
        UPTREND = "‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏∂‡πâ‡∏ô"
        SIDEWAYS = "‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡πâ‡∏≤‡∏á"
        DOWNTREND = "‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏•‡∏á"
        STRONG_DOWNTREND = "‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏•‡∏á‡πÅ‡∏£‡∏á"
        UNCERTAIN = "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô"
    
    class MarketCondition(Enum):
        TRENDING = "Trending"
        RANGING = "Ranging"
        VOLATILE = "Volatile"
        QUIET = "Quiet"
        NEWS_IMPACT = "News Impact"
        BREAKOUT = "Breakout"
    
    class TradingSession(Enum):
        ASIAN = "Asian"
        LONDON = "London"
        NEW_YORK = "New York"
        OVERLAP = "Overlap"
        CLOSED = "Market Closed"
    
    class VolatilityLevel(Enum):
        VERY_LOW = "‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å"
        LOW = "‡∏ï‡πà‡∏≥"
        NORMAL = "‡∏õ‡∏Å‡∏ï‡∏¥"
        HIGH = "‡∏™‡∏π‡∏á"
        VERY_HIGH = "‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å"

class EntryStrategy(Enum):
    """‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î"""
    TREND_FOLLOWING = "Trend Following"
    MEAN_REVERSION = "Mean Reversion"
    BREAKOUT = "Breakout"
    SCALPING = "Scalping"
    NEWS_TRADING = "News Trading"
    GRID_TRADING = "Grid Trading"
    HEDGING = "Hedging"

class EntrySignal(Enum):
    """‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î"""
    STRONG_BUY = "BUY ‡πÅ‡∏£‡∏á"
    BUY = "BUY"
    WEAK_BUY = "BUY ‡∏≠‡πà‡∏≠‡∏ô"
    NEUTRAL = "‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
    WEAK_SELL = "SELL ‡∏≠‡πà‡∏≠‡∏ô"
    SELL = "SELL"
    STRONG_SELL = "SELL ‡πÅ‡∏£‡∏á"
    NO_SIGNAL = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì"

class OrderType(Enum):
    """‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢"""
    MARKET = "Market"
    LIMIT = "Limit"
    STOP = "Stop"
    STOP_LIMIT = "Stop Limit"

@dataclass
class StrategyParameters:
    """‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"""
    strategy: EntryStrategy
    
    # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    lot_size: float = 0.1
    max_spread: float = 1.0
    min_volatility: float = 0.5
    max_volatility: float = 3.0
    
    # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤
    min_trade_interval: int = 60  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    max_trades_per_hour: int = 10
    preferred_sessions: List[TradingSession] = field(default_factory=list)
    
    # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
    rsi_oversold: float = 30
    rsi_overbought: float = 70
    adx_threshold: float = 25
    atr_multiplier: float = 2.0
    
    # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    max_drawdown: float = 5.0
    profit_target: float = 2.0
    risk_reward_ratio: float = 1.5

@dataclass 
class EntrySignalData:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î"""
    signal: EntrySignal = EntrySignal.NO_SIGNAL
    strategy: EntryStrategy = EntryStrategy.TREND_FOLLOWING
    confidence: float = 0.0
    entry_price: float = 0.0
    suggested_lot: float = 0.1
    order_type: OrderType = OrderType.MARKET
    
    # ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
    reasoning: str = ""
    technical_score: float = 0.0
    market_score: float = 0.0
    
    # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    stop_loss: float = 0.0
    take_profit: float = 0.0
    risk_reward: float = 0.0
    
    # ‡πÄ‡∏ß‡∏•‡∏≤
    timestamp: datetime = field(default_factory=datetime.now)
    valid_until: datetime = field(default_factory=datetime.now)

class StrategySelector:
    """‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å"""
    
    def __init__(self, symbol: str = "XAUUSD.v"):
        self.symbol = symbol
        self.current_strategy: Optional[EntryStrategy] = None
        self.strategy_params: Dict[EntryStrategy, StrategyParameters] = {}
        self.performance_history: Dict[EntryStrategy, List[float]] = {}
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.total_signals = 0
        self.successful_signals = 0
        self.last_signal_time: Optional[datetime] = None
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        self._initialize_strategies()
        
        print(f"üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Strategy Selector ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {symbol}")
    
    def _initialize_strategies(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        
        # Trend Following Strategy
        self.strategy_params[EntryStrategy.TREND_FOLLOWING] = StrategyParameters(
            strategy=EntryStrategy.TREND_FOLLOWING,
            lot_size=0.1,
            adx_threshold=25,
            preferred_sessions=[TradingSession.LONDON, TradingSession.NEW_YORK],
            max_trades_per_hour=5
        )
        
        # Mean Reversion Strategy
        self.strategy_params[EntryStrategy.MEAN_REVERSION] = StrategyParameters(
            strategy=EntryStrategy.MEAN_REVERSION,
            lot_size=0.05,
            rsi_oversold=25,
            rsi_overbought=75,
            preferred_sessions=[TradingSession.ASIAN],
            max_trades_per_hour=8
        )
        
        # Breakout Strategy
        self.strategy_params[EntryStrategy.BREAKOUT] = StrategyParameters(
            strategy=EntryStrategy.BREAKOUT,
            lot_size=0.15,
            min_volatility=1.0,
            preferred_sessions=[TradingSession.LONDON, TradingSession.OVERLAP],
            max_trades_per_hour=3
        )
        
        # Scalping Strategy
        self.strategy_params[EntryStrategy.SCALPING] = StrategyParameters(
            strategy=EntryStrategy.SCALPING,
            lot_size=0.2,
            max_spread=0.5,
            min_trade_interval=30,
            max_trades_per_hour=20,
            preferred_sessions=[TradingSession.OVERLAP]
        )
        
        # Grid Trading Strategy
        self.strategy_params[EntryStrategy.GRID_TRADING] = StrategyParameters(
            strategy=EntryStrategy.GRID_TRADING,
            lot_size=0.05,
            min_volatility=0.3,
            max_volatility=2.0,
            max_trades_per_hour=15
        )
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô performance history
        for strategy in EntryStrategy:
            self.performance_history[strategy] = []
    
    def select_optimal_strategy(self, market_analysis: Any) -> EntryStrategy:
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
        try:
            strategy_scores = {}
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            for strategy in EntryStrategy:
                strategy_scores[strategy] = self._calculate_strategy_score(strategy, market_analysis)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            best_strategy = max(strategy_scores, key=strategy_scores.get)
            best_score = strategy_scores[best_strategy]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏µ‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if best_score > 60:
                self.current_strategy = best_strategy
                print(f"üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå: {best_strategy.value} (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {best_score:.1f})")
                return best_strategy
            else:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {best_score:.1f})")
                return EntryStrategy.TREND_FOLLOWING  # default
                
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå: {e}")
            return EntryStrategy.TREND_FOLLOWING
    
    def _calculate_strategy_score(self, strategy: EntryStrategy, market_analysis: Any) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"""
        score = 50.0  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        
        try:
            # ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å Market Condition
            if hasattr(market_analysis, 'market_condition'):
                condition = market_analysis.market_condition
                
                if strategy == EntryStrategy.TREND_FOLLOWING:
                    if condition == MarketCondition.TRENDING:
                        score += 30
                    elif condition == MarketCondition.BREAKOUT:
                        score += 20
                    elif condition == MarketCondition.RANGING:
                        score -= 20
                
                elif strategy == EntryStrategy.MEAN_REVERSION:
                    if condition == MarketCondition.RANGING:
                        score += 30
                    elif condition == MarketCondition.QUIET:
                        score += 20
                    elif condition == MarketCondition.TRENDING:
                        score -= 20
                
                elif strategy == EntryStrategy.BREAKOUT:
                    if condition == MarketCondition.BREAKOUT:
                        score += 35
                    elif condition == MarketCondition.VOLATILE:
                        score += 25
                    elif condition == MarketCondition.QUIET:
                        score -= 25
                
                elif strategy == EntryStrategy.SCALPING:
                    if condition == MarketCondition.VOLATILE:
                        score += 25
                    elif condition == MarketCondition.RANGING:
                        score += 15
                    elif condition == MarketCondition.QUIET:
                        score -= 30
            
            # ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å Trading Session
            if hasattr(market_analysis, 'trading_session'):
                session = market_analysis.trading_session
                params = self.strategy_params.get(strategy)
                
                if params and session in params.preferred_sessions:
                    score += 15
                elif session == TradingSession.CLOSED:
                    score -= 40
            
            # ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å Volatility
            if hasattr(market_analysis, 'volatility_level'):
                volatility = market_analysis.volatility_level
                
                if strategy == EntryStrategy.SCALPING:
                    if volatility in [VolatilityLevel.HIGH, VolatilityLevel.VERY_HIGH]:
                        score += 20
                    elif volatility == VolatilityLevel.VERY_LOW:
                        score -= 25
                
                elif strategy == EntryStrategy.GRID_TRADING:
                    if volatility in [VolatilityLevel.LOW, VolatilityLevel.NORMAL]:
                        score += 20
                    elif volatility == VolatilityLevel.VERY_HIGH:
                        score -= 20
            
            # ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å Trend Strength
            if hasattr(market_analysis, 'trend_strength'):
                trend_strength = market_analysis.trend_strength
                
                if strategy == EntryStrategy.TREND_FOLLOWING:
                    if trend_strength > 70:
                        score += 25
                    elif trend_strength < 30:
                        score -= 20
                
                elif strategy == EntryStrategy.MEAN_REVERSION:
                    if trend_strength < 30:
                        score += 20
                    elif trend_strength > 70:
                        score -= 25
            
            # ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å Performance History
            if strategy in self.performance_history:
                recent_performance = self.performance_history[strategy][-10:]  # 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                if recent_performance:
                    avg_performance = sum(recent_performance) / len(recent_performance)
                    score += (avg_performance - 50) * 0.3  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏° performance
            
            return max(0, min(100, score))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-100
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {strategy}: {e}")
            return 50.0
    
    def generate_entry_signal(self, market_analysis: Any) -> EntrySignalData:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î"""
        signal_data = EntrySignalData()
        
        try:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            strategy = self.select_optimal_strategy(market_analysis)
            signal_data.strategy = strategy
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
            if strategy == EntryStrategy.TREND_FOLLOWING:
                signal_data = self._generate_trend_following_signal(market_analysis, signal_data)
            elif strategy == EntryStrategy.MEAN_REVERSION:
                signal_data = self._generate_mean_reversion_signal(market_analysis, signal_data)
            elif strategy == EntryStrategy.BREAKOUT:
                signal_data = self._generate_breakout_signal(market_analysis, signal_data)
            elif strategy == EntryStrategy.SCALPING:
                signal_data = self._generate_scalping_signal(market_analysis, signal_data)
            elif strategy == EntryStrategy.GRID_TRADING:
                signal_data = self._generate_grid_signal(market_analysis, signal_data)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            self.total_signals += 1
            self.last_signal_time = datetime.now()
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            if signal_data.signal != EntrySignal.NO_SIGNAL:
                print(f"üì° ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {signal_data.signal.value} | "
                        f"‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå: {signal_data.strategy.value} | "
                        f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {signal_data.confidence:.1f}%")
                print(f"üí° ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {signal_data.reasoning}")
            
            return signal_data
            
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {e}")
            signal_data.signal = EntrySignal.NO_SIGNAL
            return signal_data
    
    def _generate_trend_following_signal(self, market_analysis: Any, signal_data: EntrySignalData) -> EntrySignalData:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Trend Following"""
        try:
            if not hasattr(market_analysis, 'trend_direction'):
                return signal_data
            
            trend = market_analysis.trend_direction
            strength = getattr(market_analysis, 'trend_strength', 0)
            
            if trend == TrendDirection.STRONG_UPTREND and strength > 70:
                signal_data.signal = EntrySignal.STRONG_BUY
                signal_data.confidence = strength
                signal_data.reasoning = f"‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏£‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á {strength:.1f}%"
            elif trend == TrendDirection.UPTREND and strength > 50:
                signal_data.signal = EntrySignal.BUY
                signal_data.confidence = strength * 0.8
                signal_data.reasoning = f"‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á {strength:.1f}%"
            elif trend == TrendDirection.STRONG_DOWNTREND and strength > 70:
                signal_data.signal = EntrySignal.STRONG_SELL
                signal_data.confidence = strength
                signal_data.reasoning = f"‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏•‡∏á‡πÅ‡∏£‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á {strength:.1f}%"
            elif trend == TrendDirection.DOWNTREND and strength > 50:
                signal_data.signal = EntrySignal.SELL
                signal_data.confidence = strength * 0.8
                signal_data.reasoning = f"‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏•‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á {strength:.1f}%"
            else:
                signal_data.signal = EntrySignal.NO_SIGNAL
                signal_data.reasoning = "‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"
            
            return signal_data
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô trend following signal: {e}")
            return signal_data
    
    def _generate_mean_reversion_signal(self, market_analysis: Any, signal_data: EntrySignalData) -> EntrySignalData:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Mean Reversion"""
        try:
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• momentum ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô RSI
            momentum = getattr(market_analysis, 'momentum_score', 50)
            
            if momentum < 20:  # Oversold
                signal_data.signal = EntrySignal.BUY
                signal_data.confidence = (20 - momentum) * 4  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 0-80
                signal_data.reasoning = f"‡∏ï‡∏•‡∏≤‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô Momentum: {momentum:.1f}"
            elif momentum > 80:  # Overbought
                signal_data.signal = EntrySignal.SELL
                signal_data.confidence = (momentum - 80) * 4
                signal_data.reasoning = f"‡∏ï‡∏•‡∏≤‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô Momentum: {momentum:.1f}"
            else:
                signal_data.signal = EntrySignal.NO_SIGNAL
                signal_data.reasoning = "‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏Å‡∏ï‡∏¥"
            
            return signal_data
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô mean reversion signal: {e}")
            return signal_data
    
    def _generate_breakout_signal(self, market_analysis: Any, signal_data: EntrySignalData) -> EntrySignalData:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Breakout"""
        try:
            volatility = getattr(market_analysis, 'volatility_score', 50)
            current_price = getattr(market_analysis, 'current_price', 0)
            resistance = getattr(market_analysis, 'resistance_level', 0)
            support = getattr(market_analysis, 'support_level', 0)
            
            if volatility > 70 and current_price > 0:
                if resistance > 0 and current_price > resistance * 1.001:  # Breakout above resistance
                    signal_data.signal = EntrySignal.BUY
                    signal_data.confidence = volatility
                    signal_data.reasoning = f"Breakout ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ Resistance {resistance:.2f}"
                elif support > 0 and current_price < support * 0.999:  # Breakdown below support
                    signal_data.signal = EntrySignal.SELL
                    signal_data.confidence = volatility
                    signal_data.reasoning = f"Breakdown ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ Support {support:.2f}"
                else:
                    signal_data.signal = EntrySignal.NO_SIGNAL
                    signal_data.reasoning = "‡∏£‡∏≠ Breakout ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"
            else:
                signal_data.signal = EntrySignal.NO_SIGNAL
                signal_data.reasoning = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"
            
            return signal_data
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô breakout signal: {e}")
            return signal_data
    
    def _generate_scalping_signal(self, market_analysis: Any, signal_data: EntrySignalData) -> EntrySignalData:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Scalping"""
        try:
            # Scalping ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏ñ‡∏µ‡πà
            trend = getattr(market_analysis, 'trend_direction', TrendDirection.SIDEWAYS)
            volatility = getattr(market_analysis, 'volatility_score', 50)
            
            if volatility > 40:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏û‡∏≠
                # ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á high-frequency trading
                random_signal = random.choice([EntrySignal.BUY, EntrySignal.SELL, EntrySignal.NO_SIGNAL])
                
                if random_signal != EntrySignal.NO_SIGNAL:
                    signal_data.signal = random_signal
                    signal_data.confidence = volatility * 0.8
                    signal_data.reasoning = f"Scalping ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô: {volatility:.1f}"
                else:
                    signal_data.signal = EntrySignal.NO_SIGNAL
                    signal_data.reasoning = "‡∏£‡∏≠‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Scalping"
            else:
                signal_data.signal = EntrySignal.NO_SIGNAL
                signal_data.reasoning = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Scalping"
            
            return signal_data
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô scalping signal: {e}")
            return signal_data
    
    def _generate_grid_signal(self, market_analysis: Any, signal_data: EntrySignalData) -> EntrySignalData:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Grid Trading"""
        try:
            # Grid Trading ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏ä‡∏±‡∏î
            trend_strength = getattr(market_analysis, 'trend_strength', 50)
            
            if trend_strength < 40:  # ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏≠‡πà‡∏≠‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö Grid
                # ‡∏™‡∏•‡∏±‡∏ö BUY/SELL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Grid
                signal_choice = random.choice([EntrySignal.BUY, EntrySignal.SELL])
                signal_data.signal = signal_choice
                signal_data.confidence = 60
                signal_data.reasoning = f"Grid Trading - ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏≠‡πà‡∏≠‡∏ô {trend_strength:.1f}%"
            else:
                signal_data.signal = EntrySignal.NO_SIGNAL
                signal_data.reasoning = "‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÅ‡∏£‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Grid"
            
            return signal_data
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô grid signal: {e}")
            return signal_data
    
    def update_strategy_performance(self, strategy: EntryStrategy, performance_score: float):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"""
        try:
            if strategy not in self.performance_history:
                self.performance_history[strategy] = []
            
            self.performance_history[strategy].append(performance_score)
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡πà 50 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if len(self.performance_history[strategy]) > 50:
                self.performance_history[strategy].pop(0)
            
            print(f"üìä ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û {strategy.value}: {performance_score:.1f}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {e}")
    
    def get_strategy_statistics(self) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"""
        stats = {
            'current_strategy': self.current_strategy.value if self.current_strategy else "‡πÑ‡∏°‡πà‡∏°‡∏µ",
            'total_signals': self.total_signals,
            'success_rate': (self.successful_signals / max(self.total_signals, 1)) * 100,
            'last_signal_time': self.last_signal_time.isoformat() if self.last_signal_time else None,
            'strategy_performance': {}
        }
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        for strategy, performance_list in self.performance_history.items():
            if performance_list:
                stats['strategy_performance'][strategy.value] = {
                    'average_score': sum(performance_list) / len(performance_list),
                    'total_uses': len(performance_list),
                    'recent_score': performance_list[-1] if performance_list else 0
                }
        
        return stats

def test_strategy_selector():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Strategy Selector"""
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Strategy Selector...")
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á selector
        selector = StrategySelector("XAUUSD")
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• market analysis
        class MockMarketAnalysis:
            def __init__(self):
                self.trend_direction = TrendDirection.UPTREND
                self.market_condition = MarketCondition.TRENDING
                self.trading_session = TradingSession.LONDON
                self.volatility_level = VolatilityLevel.NORMAL
                self.trend_strength = 65
                self.volatility_score = 55
                self.momentum_score = 30
                self.current_price = 2000.0
                self.resistance_level = 2010.0
                self.support_level = 1990.0
        
        mock_analysis = MockMarketAnalysis()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
        print("üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå...")
        strategy = selector.select_optimal_strategy(mock_analysis)
        print(f"‚úÖ ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {strategy.value}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        print("\nüì° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì...")
        signal = selector.generate_entry_signal(mock_analysis)
        
        print(f"üéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
        print(f"   ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {signal.signal.value}")
        print(f"   ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå: {signal.strategy.value}")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {signal.confidence:.1f}%")
        print(f"   ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {signal.reasoning}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        print("\nüìà ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û...")
        selector.update_strategy_performance(strategy, 75.0)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        print("\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå:")
        stats = selector.get_strategy_statistics()
        print(f"   ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {stats['current_strategy']}")
        print(f"   ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {stats['total_signals']}")
        print(f"   ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {stats['success_rate']:.1f}%")
        
        print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Strategy Selector ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")

if __name__ == "__main__":
   test_strategy_selector()